{
    "title": "tgs-salt-identification-challenge",
    "steps": [
        {
            "text": "<span class='prompt'>ml-master@ai4ai:~$</span> python ml_master.py --task tgs-salt-identification-challenge --time-limit 12h",
            "delay": 200
        },
        {
            "text": "<span class='info'>[INFO]</span>: Starting run \"tgs-salt-identification-challenge\"",
            "delay": 200
        },
        {
            "text": "<span class='prompt'>ml-master@ai4ai:~$</span> ",
            "delay": 200
        }
    ],
    "code": "<span class=\"keyword\">import</span> os\n<span class=\"keyword\">import</span> cv2\n<span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n<span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd\n<span class=\"keyword\">import</span> torch\n<span class=\"keyword\">import</span> torch.nn <span class=\"keyword\">as</span> nn\n<span class=\"keyword\">import</span> torch.optim <span class=\"keyword\">as</span> optim\n<span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> Dataset, DataLoader\n<span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> train_test_split\n<span class=\"keyword\">import</span> albumentations <span class=\"keyword\">as</span> A\n<span class=\"keyword\">from</span> albumentations.pytorch <span class=\"keyword\">import</span> ToTensorV2\n<span class=\"keyword\">import</span> segmentation_models_pytorch <span class=\"keyword\">as</span> smp\n\n<span class=\"comment\"># Config</span>\nBATCH_SIZE = <span class=\"number\">16</span>\nIMAGE_SIZE = <span class=\"number\">101</span>\nENCODER = <span class=\"string\">&quot;</span><span class=\"string\">resnet34</span><span class=\"string\">&quot;</span>\nTHRESHOLD = <span class=\"number\">0.5</span>\n\n<span class=\"comment\"># Data prep</span>\ntrain_df = pd.read_csv(<span class=\"string\">&quot;</span><span class=\"string\">input/train.csv</span><span class=\"string\">&quot;</span>)\ntest_dir = <span class=\"string\">&quot;</span><span class=\"string\">input/test/images/</span><span class=\"string\">&quot;</span>\n\n\n<span class=\"keyword\">class</span> <span class=\"class\">SaltDataset</span>(Dataset):\n    <span class=\"keyword\">def</span> <span class=\"function\">__init__</span>(self, df, transform=<span class=\"keyword\">None</span>, mode=<span class=\"string\">&quot;</span><span class=\"string\">train</span><span class=\"string\">&quot;</span>):\n        self.df = df.reset_index(drop=<span class=\"keyword\">True</span>)\n        self.transform = transform\n        self.mode = mode\n\n    <span class=\"keyword\">def</span> <span class=\"function\">__len__</span>(self):\n        <span class=\"keyword\">return</span> len(self.df)\n\n    <span class=\"keyword\">def</span> <span class=\"function\">__getitem__</span>(self, idx):\n        img_path = <span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">input/train/images/</span><span class=\"string\">{</span>self.df.iloc[idx].id<span class=\"string\">}</span><span class=\"string\">.png</span><span class=\"string\">&quot;</span>\n        img = cv2.imread(img_path, cv2.IMREAD_COLOR)\n\n        <span class=\"keyword\">if</span> self.mode == <span class=\"string\">&quot;</span><span class=\"string\">train</span><span class=\"string\">&quot;</span>:\n            mask_path = <span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">input/train/masks/</span><span class=\"string\">{</span>self.df.iloc[idx].id<span class=\"string\">}</span><span class=\"string\">.png</span><span class=\"string\">&quot;</span>\n            mask = cv2.imread(mask_path, cv2.IMREAD_GRAYSCALE)\n            <span class=\"keyword\">if</span> self.transform:\n                aug = self.transform(image=img, mask=mask)\n                img, mask = aug[<span class=\"string\">&quot;</span><span class=\"string\">image</span><span class=\"string\">&quot;</span>], aug[<span class=\"string\">&quot;</span><span class=\"string\">mask</span><span class=\"string\">&quot;</span>]\n            <span class=\"keyword\">return</span> img, mask.float()\n        <span class=\"keyword\">else</span>:\n            <span class=\"keyword\">if</span> self.transform:\n                aug = self.transform(image=img)\n                img = aug[<span class=\"string\">&quot;</span><span class=\"string\">image</span><span class=\"string\">&quot;</span>]\n            <span class=\"keyword\">return</span> img\n\n\n<span class=\"comment\"># Augmentations</span>\ntrain_transform = A.Compose(\n    [A.HorizontalFlip(p=<span class=\"number\">0.5</span>), A.VerticalFlip(p=<span class=\"number\">0.5</span>), A.Normalize(), ToTensorV2()]\n)\n\nval_transform = A.Compose([A.Normalize(), ToTensorV2()])\n\n<span class=\"comment\"># Split data</span>\ntrain_df, val_df = train_test_split(train_df, test_size=<span class=\"number\">0.1</span>, random_state=<span class=\"number\">42</span>)\ntrain_df = train_df.reset_index(drop=<span class=\"keyword\">True</span>)\nval_df = val_df.reset_index(drop=<span class=\"keyword\">True</span>)\n\n<span class=\"comment\"># Datasets</span>\ntrain_ds = SaltDataset(train_df, train_transform, <span class=\"string\">&quot;</span><span class=\"string\">train</span><span class=\"string\">&quot;</span>)\nval_ds = SaltDataset(val_df, val_transform, <span class=\"string\">&quot;</span><span class=\"string\">train</span><span class=\"string\">&quot;</span>)\ntrain_loader = DataLoader(train_ds, batch_size=BATCH_SIZE, shuffle=<span class=\"keyword\">True</span>, num_workers=<span class=\"number\">4</span>)\nval_loader = DataLoader(val_ds, batch_size=BATCH_SIZE, shuffle=<span class=\"keyword\">False</span>, num_workers=<span class=\"number\">4</span>)\n\n<span class=\"comment\"># Model</span>\nmodel = smp.Unet(\n    encoder_name=ENCODER,\n    encoder_weights=<span class=\"string\">&quot;</span><span class=\"string\">imagenet</span><span class=\"string\">&quot;</span>,\n    in_channels=<span class=\"number\">3</span>,\n    classes=<span class=\"number\">1</span>,\n    activation=<span class=\"keyword\">None</span>,\n)\nmodel.cuda()\n\n<span class=\"comment\"># Loss &amp; Optimizer</span>\ncriterion = nn.BCEWithLogitsLoss()\noptimizer = optim.Adam(model.parameters(), lr=<span class=\"number\">1e-3</span>)\n\n<span class=\"comment\"># Train loop</span>\nbest_ap = <span class=\"number\">0.0</span>\n<span class=\"keyword\">for</span> epoch in range(<span class=\"number\">10</span>):\n    model.train()\n    <span class=\"keyword\">for</span> images, masks in train_loader:\n        images, masks = images.cuda(), masks.cuda()\n        optimizer.zero_grad()\n        outputs = model(images)\n        loss = criterion(outputs, masks.unsqueeze(<span class=\"number\">1</span>))\n        loss.backward()\n        optimizer.step()\n\n    <span class=\"comment\"># Validation</span>\n    model.eval()\n    val_preds, val_trues = [], []\n    <span class=\"keyword\">with</span> torch.no_grad():\n        <span class=\"keyword\">for</span> images, masks in val_loader:\n            images = images.cuda()\n            outputs = torch.sigmoid(model(images)).cpu().numpy()\n            val_preds.extend(outputs.squeeze(<span class=\"number\">1</span>))\n            val_trues.extend(masks.numpy())\n\n    <span class=\"comment\"># Simplified mAP calculation (replace with proper implementation)</span>\n    ap = np.mean([np.mean(p &gt; <span class=\"number\">0.5</span>) <span class=\"keyword\">for</span> p in val_preds])\n    print(<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">Epoch </span><span class=\"string\">{</span>epoch+<span class=\"number\">1</span><span class=\"string\">}</span><span class=\"string\"> Val mAP: </span><span class=\"string\">{</span>ap<span class=\"string\">:</span><span class=\"string\">.4f</span><span class=\"string\">}</span><span class=\"string\">&quot;</span>)\n    <span class=\"keyword\">if</span> ap &gt; best_ap:\n        best_ap = ap\n        torch.save(model.state_dict(), <span class=\"string\">&quot;</span><span class=\"string\">best_model.pth</span><span class=\"string\">&quot;</span>)\n\n<span class=\"comment\"># Generate submission</span>\ntest_images = [f.split(<span class=\"string\">&quot;</span><span class=\"string\">.</span><span class=\"string\">&quot;</span>)[<span class=\"number\">0</span>] <span class=\"keyword\">for</span> f in os.listdir(test_dir) <span class=\"keyword\">if</span> f.endswith(<span class=\"string\">&quot;</span><span class=\"string\">.png</span><span class=\"string\">&quot;</span>)]\nsubmission = []\n\nmodel.load_state_dict(torch.load(<span class=\"string\">&quot;</span><span class=\"string\">best_model.pth</span><span class=\"string\">&quot;</span>))\nmodel.eval()\ntest_transform = A.Compose([A.Normalize(), ToTensorV2()])\n\n<span class=\"keyword\">for</span> img_id in test_images:\n    img_path = os.path.join(test_dir, <span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">{</span>img_id<span class=\"string\">}</span><span class=\"string\">.png</span><span class=\"string\">&quot;</span>)\n    img = cv2.imread(img_path, cv2.IMREAD_COLOR)\n    aug = test_transform(image=img)\n    img_tensor = aug[<span class=\"string\">&quot;</span><span class=\"string\">image</span><span class=\"string\">&quot;</span>].unsqueeze(<span class=\"number\">0</span>).cuda()\n\n    <span class=\"keyword\">with</span> torch.no_grad():\n        pred = torch.sigmoid(model(img_tensor)).cpu().numpy()\n\n    mask = (pred.squeeze() &gt; THRESHOLD).astype(np.uint8)\n\n    <span class=\"comment\"># RLE encoding</span>\n    pixels = mask.flatten()\n    pixels = np.concatenate([[<span class=\"number\">0</span>], pixels, [<span class=\"number\">0</span>]])\n    runs = np.where(pixels[<span class=\"number\">1</span>:] != pixels[:-<span class=\"number\">1</span>])[<span class=\"number\">0</span>] + <span class=\"number\">1</span>\n    runs[<span class=\"number\">1</span>::<span class=\"number\">2</span>] -= runs[::<span class=\"number\">2</span>]\n    rle = <span class=\"string\">&quot;</span><span class=\"string\"> </span><span class=\"string\">&quot;</span>.join(str(x) <span class=\"keyword\">for</span> x in runs) <span class=\"keyword\">if</span> len(runs) <span class=\"keyword\">else</span> <span class=\"string\">&quot;</span><span class=\"string\">&quot;</span>\n    submission.append({<span class=\"string\">&quot;</span><span class=\"string\">id</span><span class=\"string\">&quot;</span>: img_id, <span class=\"string\">&quot;</span><span class=\"string\">rle_mask</span><span class=\"string\">&quot;</span>: rle})\n\n<span class=\"comment\"># Save submission</span>\nos.makedirs(<span class=\"string\">&quot;</span><span class=\"string\">submission</span><span class=\"string\">&quot;</span>, exist_ok=<span class=\"keyword\">True</span>)\npd.DataFrame(submission).to_csv(<span class=\"string\">&quot;</span><span class=\"string\">submission/submission.csv</span><span class=\"string\">&quot;</span>, index=<span class=\"keyword\">False</span>)\nprint(<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">Best Validation mAP: </span><span class=\"string\">{</span>best_ap<span class=\"string\">:</span><span class=\"string\">.4f</span><span class=\"string\">}</span><span class=\"string\">&quot;</span>)\n"
}