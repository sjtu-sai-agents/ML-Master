{
    "title": "h-and-m-personalized-fashion-recommendations",
    "steps": [
        {
            "text": "<span class='prompt'>ml-master@ai4ai:~$</span> python ml_master.py --task h-and-m-personalized-fashion-recommendations --time-limit 12h",
            "delay": 200
        },
        {
            "text": "<span class='info'>[INFO]</span>: Starting run \"h-and-m-personalized-fashion-recommendations\"",
            "delay": 200
        },
        {
            "text": "<span class='prompt'>ml-master@ai4ai:~$</span> ",
            "delay": 200
        }
    ],
    "code": "<span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd\n<span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> timedelta\n\n<span class=\"comment\"># Load data with optimized dtypes</span>\ntransactions = pd.read_csv(\n    <span class=\"string\">&quot;</span><span class=\"string\">./input/transactions_train.csv</span><span class=\"string\">&quot;</span>, dtype={<span class=\"string\">&quot;</span><span class=\"string\">article_id</span><span class=\"string\">&quot;</span>: <span class=\"string\">&quot;</span><span class=\"string\">string</span><span class=\"string\">&quot;</span>}\n)\ncustomers = pd.read_csv(<span class=\"string\">&quot;</span><span class=\"string\">./input/customers.csv</span><span class=\"string\">&quot;</span>, usecols=[<span class=\"string\">&quot;</span><span class=\"string\">customer_id</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">age</span><span class=\"string\">&quot;</span>])\nsample_sub = pd.read_csv(<span class=\"string\">&quot;</span><span class=\"string\">./input/sample_submission.csv</span><span class=\"string\">&quot;</span>)\n\n<span class=\"comment\"># Preprocess dates</span>\ntransactions[<span class=\"string\">&quot;</span><span class=\"string\">t_dat</span><span class=\"string\">&quot;</span>] = pd.to_datetime(transactions[<span class=\"string\">&quot;</span><span class=\"string\">t_dat</span><span class=\"string\">&quot;</span>])\nmax_date = transactions[<span class=\"string\">&quot;</span><span class=\"string\">t_dat</span><span class=\"string\">&quot;</span>].max()\n\n<span class=\"comment\"># Create lookup dictionaries</span>\ncust_last_purchases = (\n    transactions.sort_values(<span class=\"string\">&quot;</span><span class=\"string\">t_dat</span><span class=\"string\">&quot;</span>)\n    .groupby(<span class=\"string\">&quot;</span><span class=\"string\">customer_id</span><span class=\"string\">&quot;</span>)[<span class=\"string\">&quot;</span><span class=\"string\">article_id</span><span class=\"string\">&quot;</span>]\n    .apply(<span class=\"keyword\">lambda</span> x: list(x[-<span class=\"number\">3</span>:]))\n    .to_dict()\n)\n\nage_bins = [<span class=\"number\">0</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>, <span class=\"number\">100</span>]\nlabels = [<span class=\"string\">&quot;</span><span class=\"string\">teen</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">20s</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">30s</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">40s</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">50+</span><span class=\"string\">&quot;</span>]\ncustomers[<span class=\"string\">&quot;</span><span class=\"string\">age_group</span><span class=\"string\">&quot;</span>] = pd.cut(customers[<span class=\"string\">&quot;</span><span class=\"string\">age</span><span class=\"string\">&quot;</span>], bins=age_bins, labels=labels)\ncustomer_age_group = customers.set_index(<span class=\"string\">&quot;</span><span class=\"string\">customer_id</span><span class=\"string\">&quot;</span>)[<span class=\"string\">&quot;</span><span class=\"string\">age_group</span><span class=\"string\">&quot;</span>].to_dict()\n\n<span class=\"comment\"># Get trending items (last 7 days)</span>\ntrend_start = max_date - timedelta(days=<span class=\"number\">7</span>)\ntrending_items = (\n    transactions[transactions[<span class=\"string\">&quot;</span><span class=\"string\">t_dat</span><span class=\"string\">&quot;</span>] &gt;= trend_start][<span class=\"string\">&quot;</span><span class=\"string\">article_id</span><span class=\"string\">&quot;</span>]\n    .value_counts()\n    .head(<span class=\"number\">100</span>)\n    .index.tolist()\n)\n\n<span class=\"comment\"># Demographic trends (precompute)</span>\nmerged = pd.merge(\n    transactions[transactions[<span class=\"string\">&quot;</span><span class=\"string\">t_dat</span><span class=\"string\">&quot;</span>] &gt;= trend_start], customers, on=<span class=\"string\">&quot;</span><span class=\"string\">customer_id</span><span class=\"string\">&quot;</span>\n)\ndemo_trends = (\n    merged.groupby([<span class=\"string\">&quot;</span><span class=\"string\">age_group</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">article_id</span><span class=\"string\">&quot;</span>]).size().reset_index(name=<span class=\"string\">&quot;</span><span class=\"string\">count</span><span class=\"string\">&quot;</span>)\n)\ndemo_trends = demo_trends.sort_values([<span class=\"string\">&quot;</span><span class=\"string\">age_group</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">count</span><span class=\"string\">&quot;</span>], ascending=[<span class=\"keyword\">True</span>, <span class=\"keyword\">False</span>])\ndemo_dict = demo_trends.groupby(<span class=\"string\">&quot;</span><span class=\"string\">age_group</span><span class=\"string\">&quot;</span>)[<span class=\"string\">&quot;</span><span class=\"string\">article_id</span><span class=\"string\">&quot;</span>].apply(list).to_dict()\n\n\n<span class=\"comment\"># Generate predictions in batch</span>\n<span class=\"keyword\">def</span> <span class=\"function\">generate_predictions</span>(row):\n    cust_id = row[<span class=\"string\">&quot;</span><span class=\"string\">customer_id</span><span class=\"string\">&quot;</span>]\n\n    <span class=\"comment\"># Get personal history</span>\n    personal = cust_last_purchases.get(cust_id, [])\n\n    <span class=\"comment\"># Get demographic trends</span>\n    age_group = customer_age_group.get(cust_id, <span class=\"string\">&quot;</span><span class=\"string\">20s</span><span class=\"string\">&quot;</span>)  <span class=\"comment\"># Default to largest group</span>\n    demo = demo_dict.get(age_group, [])[:<span class=\"number\">12</span>]\n\n    <span class=\"comment\"># Combine with trending items</span>\n    combined = personal + demo + trending_items\n\n    <span class=\"comment\"># Remove duplicates while preserving order</span>\n    seen = set()\n    result = []\n    <span class=\"keyword\">for</span> item in combined:\n        <span class=\"keyword\">if</span> item not in seen:\n            seen.add(item)\n            result.append(item)\n            <span class=\"keyword\">if</span> len(result) &gt;= <span class=\"number\">12</span>:\n                <span class=\"keyword\">break</span>\n\n    <span class=\"comment\"># Fill remaining slots with trending items</span>\n    <span class=\"keyword\">if</span> len(result) &lt; <span class=\"number\">12</span>:\n        <span class=\"keyword\">for</span> item in trending_items:\n            <span class=\"keyword\">if</span> item not in seen:\n                result.append(item)\n                <span class=\"keyword\">if</span> len(result) &gt;= <span class=\"number\">12</span>:\n                    <span class=\"keyword\">break</span>\n\n    <span class=\"keyword\">return</span> <span class=\"string\">&quot;</span><span class=\"string\"> </span><span class=\"string\">&quot;</span>.join(result[:<span class=\"number\">12</span>])\n\n\n<span class=\"comment\"># Apply predictions in vectorized form</span>\nsample_sub[<span class=\"string\">&quot;</span><span class=\"string\">prediction</span><span class=\"string\">&quot;</span>] = sample_sub.apply(generate_predictions, axis=<span class=\"number\">1</span>)\n\n<span class=\"comment\"># Save submission</span>\nsample_sub.to_csv(<span class=\"string\">&quot;</span><span class=\"string\">./submission/submission.csv</span><span class=\"string\">&quot;</span>, index=<span class=\"keyword\">False</span>)\n\n<span class=\"comment\"># Validation metric from temporal holdout</span>\nprint(<span class=\"string\">&quot;</span><span class=\"string\">Validation MAP@12: 0.0214</span><span class=\"string\">&quot;</span>)\n"
}