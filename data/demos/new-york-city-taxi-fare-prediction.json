{
    "title": "new-york-city-taxi-fare-prediction",
    "steps": [
        {
            "text": "<span class='prompt'>ml-master@ai4ai:~$</span> python ml_master.py --task new-york-city-taxi-fare-prediction --time-limit 12h",
            "delay": 200
        },
        {
            "text": "<span class='info'>[INFO]</span>: Starting run \"new-york-city-taxi-fare-prediction\"",
            "delay": 200
        },
        {
            "text": "<span class='prompt'>ml-master@ai4ai:~$</span> ",
            "delay": 200
        }
    ],
    "code": "<span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd\n<span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n<span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> train_test_split\n<span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> mean_squared_error\n<span class=\"keyword\">import</span> lightgbm <span class=\"keyword\">as</span> lgb\n\n\n<span class=\"keyword\">def</span> <span class=\"function\">haversine_distance</span>(lat1, lon1, lat2, lon2):\n    R = <span class=\"number\">6371</span>  <span class=\"comment\"># Earth radius in km</span>\n    lat1, lon1, lat2, lon2 = map(np.radians, [lat1, lon1, lat2, lon2])\n    dlat = lat2 - lat1\n    dlon = lon2 - lon1\n    a = np.sin(dlat / <span class=\"number\">2</span>) ** <span class=\"number\">2</span> + np.cos(lat1) * np.cos(lat2) * np.sin(dlon / <span class=\"number\">2</span>) ** <span class=\"number\">2</span>\n    c = <span class=\"number\">2</span> * np.arcsin(np.sqrt(a))\n    <span class=\"keyword\">return</span> R * c\n\n\n<span class=\"keyword\">def</span> <span class=\"function\">bearing_angle</span>(lat1, lon1, lat2, lon2):\n    lat1, lon1, lat2, lon2 = map(np.radians, [lat1, lon1, lat2, lon2])\n    dlon = lon2 - lon1\n    x = np.sin(dlon) * np.cos(lat2)\n    y = np.cos(lat1) * np.sin(lat2) - np.sin(lat1) * np.cos(lat2) * np.cos(dlon)\n    <span class=\"keyword\">return</span> np.degrees(np.arctan2(x, y))\n\n\n<span class=\"comment\"># Load and preprocess data</span>\ntrain = pd.read_csv(\n    <span class=\"string\">&quot;</span><span class=\"string\">input/labels.csv</span><span class=\"string\">&quot;</span>,\n    usecols=[\n        <span class=\"string\">&quot;</span><span class=\"string\">fare_amount</span><span class=\"string\">&quot;</span>,\n        <span class=\"string\">&quot;</span><span class=\"string\">pickup_datetime</span><span class=\"string\">&quot;</span>,\n        <span class=\"string\">&quot;</span><span class=\"string\">pickup_longitude</span><span class=\"string\">&quot;</span>,\n        <span class=\"string\">&quot;</span><span class=\"string\">pickup_latitude</span><span class=\"string\">&quot;</span>,\n        <span class=\"string\">&quot;</span><span class=\"string\">dropoff_longitude</span><span class=\"string\">&quot;</span>,\n        <span class=\"string\">&quot;</span><span class=\"string\">dropoff_latitude</span><span class=\"string\">&quot;</span>,\n        <span class=\"string\">&quot;</span><span class=\"string\">passenger_count</span><span class=\"string\">&quot;</span>,\n    ],\n    parse_dates=[<span class=\"string\">&quot;</span><span class=\"string\">pickup_datetime</span><span class=\"string\">&quot;</span>],\n)\n\n<span class=\"comment\"># Filter valid coordinates and fares</span>\nnyc_bounds = {<span class=\"string\">&quot;</span><span class=\"string\">lat_min</span><span class=\"string\">&quot;</span>: <span class=\"number\">40.5</span>, <span class=\"string\">&quot;</span><span class=\"string\">lat_max</span><span class=\"string\">&quot;</span>: <span class=\"number\">41.7</span>, <span class=\"string\">&quot;</span><span class=\"string\">lon_min</span><span class=\"string\">&quot;</span>: -<span class=\"number\">74.3</span>, <span class=\"string\">&quot;</span><span class=\"string\">lon_max</span><span class=\"string\">&quot;</span>: -<span class=\"number\">73.7</span>}\nvalid_coords = (\n    train.pickup_latitude.between(nyc_bounds[<span class=\"string\">&quot;</span><span class=\"string\">lat_min</span><span class=\"string\">&quot;</span>], nyc_bounds[<span class=\"string\">&quot;</span><span class=\"string\">lat_max</span><span class=\"string\">&quot;</span>])\n    &amp; train.pickup_longitude.between(nyc_bounds[<span class=\"string\">&quot;</span><span class=\"string\">lon_min</span><span class=\"string\">&quot;</span>], nyc_bounds[<span class=\"string\">&quot;</span><span class=\"string\">lon_max</span><span class=\"string\">&quot;</span>])\n    &amp; train.dropoff_latitude.between(nyc_bounds[<span class=\"string\">&quot;</span><span class=\"string\">lat_min</span><span class=\"string\">&quot;</span>], nyc_bounds[<span class=\"string\">&quot;</span><span class=\"string\">lat_max</span><span class=\"string\">&quot;</span>])\n    &amp; train.dropoff_longitude.between(nyc_bounds[<span class=\"string\">&quot;</span><span class=\"string\">lon_min</span><span class=\"string\">&quot;</span>], nyc_bounds[<span class=\"string\">&quot;</span><span class=\"string\">lon_max</span><span class=\"string\">&quot;</span>])\n)\ntrain = train[\n    valid_coords &amp; (train.fare_amount.between(<span class=\"number\">2</span>, <span class=\"number\">200</span>)) &amp; (train.passenger_count &gt; <span class=\"number\">0</span>)\n].copy()\n\n<span class=\"comment\"># Feature engineering</span>\nairports = {\n    <span class=\"string\">&quot;</span><span class=\"string\">jfk</span><span class=\"string\">&quot;</span>: (<span class=\"number\">40.6413</span>, -<span class=\"number\">73.7781</span>),\n    <span class=\"string\">&quot;</span><span class=\"string\">lga</span><span class=\"string\">&quot;</span>: (<span class=\"number\">40.7769</span>, -<span class=\"number\">73.8740</span>),\n    <span class=\"string\">&quot;</span><span class=\"string\">ewr</span><span class=\"string\">&quot;</span>: (<span class=\"number\">40.6895</span>, -<span class=\"number\">74.1745</span>),\n}\ncity_center = (<span class=\"number\">40.7831</span>, -<span class=\"number\">73.9712</span>)\n\n<span class=\"keyword\">for</span> df in [train]:\n    df[<span class=\"string\">&quot;</span><span class=\"string\">distance</span><span class=\"string\">&quot;</span>] = haversine_distance(\n        df.pickup_latitude,\n        df.pickup_longitude,\n        df.dropoff_latitude,\n        df.dropoff_longitude,\n    )\n    df[<span class=\"string\">&quot;</span><span class=\"string\">bearing</span><span class=\"string\">&quot;</span>] = bearing_angle(\n        df.pickup_latitude,\n        df.pickup_longitude,\n        df.dropoff_latitude,\n        df.dropoff_longitude,\n    )\n    dt = df.pickup_datetime.dt\n    df[<span class=\"string\">&quot;</span><span class=\"string\">hour</span><span class=\"string\">&quot;</span>] = dt.hour\n    df[<span class=\"string\">&quot;</span><span class=\"string\">weekday</span><span class=\"string\">&quot;</span>] = dt.weekday\n    df[<span class=\"string\">&quot;</span><span class=\"string\">month</span><span class=\"string\">&quot;</span>] = dt.month\n    df[<span class=\"string\">&quot;</span><span class=\"string\">year</span><span class=\"string\">&quot;</span>] = dt.year - <span class=\"number\">2009</span>\n\n    <span class=\"comment\"># Airport distance features</span>\n    <span class=\"keyword\">for</span> airport, (lat, lon) in airports.items():\n        df[<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">pickup_dist_</span><span class=\"string\">{</span>airport<span class=\"string\">}</span><span class=\"string\">&quot;</span>] = haversine_distance(\n            df.pickup_latitude, df.pickup_longitude, lat, lon\n        )\n        df[<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">dropoff_dist_</span><span class=\"string\">{</span>airport<span class=\"string\">}</span><span class=\"string\">&quot;</span>] = haversine_distance(\n            df.dropoff_latitude, df.dropoff_longitude, lat, lon\n        )\n\n    <span class=\"comment\"># City center features</span>\n    df[<span class=\"string\">&quot;</span><span class=\"string\">pickup_dist_center</span><span class=\"string\">&quot;</span>] = haversine_distance(\n        df.pickup_latitude, df.pickup_longitude, *city_center\n    )\n    df[<span class=\"string\">&quot;</span><span class=\"string\">dropoff_dist_center</span><span class=\"string\">&quot;</span>] = haversine_distance(\n        df.dropoff_latitude, df.dropoff_longitude, *city_center\n    )\n    df[<span class=\"string\">&quot;</span><span class=\"string\">dist_center_diff</span><span class=\"string\">&quot;</span>] = df[<span class=\"string\">&quot;</span><span class=\"string\">pickup_dist_center</span><span class=\"string\">&quot;</span>] - df[<span class=\"string\">&quot;</span><span class=\"string\">dropoff_dist_center</span><span class=\"string\">&quot;</span>]\n\n<span class=\"comment\"># Prepare features</span>\nfeatures = [\n    <span class=\"string\">&quot;</span><span class=\"string\">passenger_count</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">distance</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">bearing</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">hour</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">weekday</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">month</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">year</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">pickup_dist_jfk</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">pickup_dist_lga</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">pickup_dist_ewr</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">dropoff_dist_jfk</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">dropoff_dist_lga</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">dropoff_dist_ewr</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">pickup_dist_center</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">dropoff_dist_center</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">dist_center_diff</span><span class=\"string\">&quot;</span>,\n]\n\nX_train, X_val, y_train, y_val = train_test_split(\n    train[features], train.fare_amount, test_size=<span class=\"number\">0.2</span>, random_state=<span class=\"number\">42</span>\n)\n\n<span class=\"comment\"># Train model with adjusted parameters</span>\nmodel = lgb.LGBMRegressor(\n    objective=<span class=\"string\">&quot;</span><span class=\"string\">regression</span><span class=\"string\">&quot;</span>,\n    metric=<span class=\"string\">&quot;</span><span class=\"string\">rmse</span><span class=\"string\">&quot;</span>,\n    num_leaves=<span class=\"number\">65</span>,\n    learning_rate=<span class=\"number\">0.05</span>,\n    max_depth=<span class=\"number\">15</span>,\n    reg_alpha=<span class=\"number\">0.7</span>,\n    reg_lambda=<span class=\"number\">0.7</span>,\n    n_estimators=<span class=\"number\">2000</span>,\n    n_jobs=-<span class=\"number\">1</span>,\n)\nmodel.fit(\n    X_train,\n    y_train,\n    eval_set=[(X_val, y_val)],\n    callbacks=[lgb.early_stopping(<span class=\"number\">100</span>), lgb.log_evaluation(<span class=\"number\">50</span>)],\n)\n\n<span class=\"comment\"># Validation score</span>\nval_pred = model.predict(X_val)\nrmse = np.sqrt(mean_squared_error(y_val, val_pred))\nprint(<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">Validation RMSE: </span><span class=\"string\">{</span>rmse<span class=\"string\">:</span><span class=\"string\">.4f</span><span class=\"string\">}</span><span class=\"string\">&quot;</span>)\n\n<span class=\"comment\"># Generate submission</span>\ntest = pd.read_csv(<span class=\"string\">&quot;</span><span class=\"string\">input/test.csv</span><span class=\"string\">&quot;</span>, parse_dates=[<span class=\"string\">&quot;</span><span class=\"string\">pickup_datetime</span><span class=\"string\">&quot;</span>])\ntest[<span class=\"string\">&quot;</span><span class=\"string\">distance</span><span class=\"string\">&quot;</span>] = haversine_distance(\n    test.pickup_latitude,\n    test.pickup_longitude,\n    test.dropoff_latitude,\n    test.dropoff_longitude,\n)\ntest[<span class=\"string\">&quot;</span><span class=\"string\">bearing</span><span class=\"string\">&quot;</span>] = bearing_angle(\n    test.pickup_latitude,\n    test.pickup_longitude,\n    test.dropoff_latitude,\n    test.dropoff_longitude,\n)\ndt = test.pickup_datetime.dt\ntest[<span class=\"string\">&quot;</span><span class=\"string\">hour</span><span class=\"string\">&quot;</span>] = dt.hour\ntest[<span class=\"string\">&quot;</span><span class=\"string\">weekday</span><span class=\"string\">&quot;</span>] = dt.weekday\ntest[<span class=\"string\">&quot;</span><span class=\"string\">month</span><span class=\"string\">&quot;</span>] = dt.month\ntest[<span class=\"string\">&quot;</span><span class=\"string\">year</span><span class=\"string\">&quot;</span>] = dt.year - <span class=\"number\">2009</span>\n\n<span class=\"comment\"># Airport features for test set</span>\n<span class=\"keyword\">for</span> airport, (lat, lon) in airports.items():\n    test[<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">pickup_dist_</span><span class=\"string\">{</span>airport<span class=\"string\">}</span><span class=\"string\">&quot;</span>] = haversine_distance(\n        test.pickup_latitude, test.pickup_longitude, lat, lon\n    )\n    test[<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">dropoff_dist_</span><span class=\"string\">{</span>airport<span class=\"string\">}</span><span class=\"string\">&quot;</span>] = haversine_distance(\n        test.dropoff_latitude, test.dropoff_longitude, lat, lon\n    )\n\n<span class=\"comment\"># City center features for test set</span>\ntest[<span class=\"string\">&quot;</span><span class=\"string\">pickup_dist_center</span><span class=\"string\">&quot;</span>] = haversine_distance(\n    test.pickup_latitude, test.pickup_longitude, *city_center\n)\ntest[<span class=\"string\">&quot;</span><span class=\"string\">dropoff_dist_center</span><span class=\"string\">&quot;</span>] = haversine_distance(\n    test.dropoff_latitude, test.dropoff_longitude, *city_center\n)\ntest[<span class=\"string\">&quot;</span><span class=\"string\">dist_center_diff</span><span class=\"string\">&quot;</span>] = test[<span class=\"string\">&quot;</span><span class=\"string\">pickup_dist_center</span><span class=\"string\">&quot;</span>] - test[<span class=\"string\">&quot;</span><span class=\"string\">dropoff_dist_center</span><span class=\"string\">&quot;</span>]\n\n<span class=\"comment\"># Generate predictions</span>\nsubmission = pd.DataFrame(\n    {<span class=\"string\">&quot;</span><span class=\"string\">key</span><span class=\"string\">&quot;</span>: test.key, <span class=\"string\">&quot;</span><span class=\"string\">fare_amount</span><span class=\"string\">&quot;</span>: model.predict(test[features]).clip(<span class=\"number\">2.5</span>, <span class=\"number\">200</span>)}\n)\nsubmission.to_csv(<span class=\"string\">&quot;</span><span class=\"string\">submission/submission.csv</span><span class=\"string\">&quot;</span>, index=<span class=\"keyword\">False</span>)\n"
}