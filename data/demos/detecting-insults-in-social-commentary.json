{
    "title": "detecting-insults-in-social-commentary",
    "steps": [
        {
            "text": "<span class='prompt'>ml-master@ai4ai:~$</span> python ml_master.py --task detecting-insults-in-social-commentary --time-limit 12h",
            "delay": 200
        },
        {
            "text": "<span class='info'>[INFO]</span>: Starting run \"detecting-insults-in-social-commentary\"",
            "delay": 200
        },
        {
            "text": "<span class='prompt'>ml-master@ai4ai:~$</span> ",
            "delay": 200
        }
    ],
    "code": "<span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd\n<span class=\"keyword\">import</span> re\n<span class=\"keyword\">from</span> sklearn.feature_extraction.text <span class=\"keyword\">import</span> TfidfVectorizer\n<span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> train_test_split\n<span class=\"keyword\">from</span> xgboost <span class=\"keyword\">import</span> XGBClassifier\n<span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> roc_auc_score\n\n\n<span class=\"keyword\">def</span> <span class=\"function\">preprocess</span>(text):\n    text = text.encode(<span class=\"string\">&quot;</span><span class=\"string\">utf-8</span><span class=\"string\">&quot;</span>).decode(<span class=\"string\">&quot;</span><span class=\"string\">unicode_escape</span><span class=\"string\">&quot;</span>)[<span class=\"number\">1</span>:-<span class=\"number\">1</span>]\n    text = re.sub(<span class=\"string\">r</span><span class=\"string\">&quot;</span><span class=\"string\">[^</span><span class=\"string\">\\</span><span class=\"string\">w</span><span class=\"string\">\\</span><span class=\"string\">s]</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">&quot;</span>, text.lower())\n    <span class=\"keyword\">return</span> text\n\n\n<span class=\"keyword\">def</span> <span class=\"function\">extract_text_features</span>(comment):\n    decoded = comment.encode(<span class=\"string\">&quot;</span><span class=\"string\">utf-8</span><span class=\"string\">&quot;</span>).decode(<span class=\"string\">&quot;</span><span class=\"string\">unicode_escape</span><span class=\"string\">&quot;</span>)[<span class=\"number\">1</span>:-<span class=\"number\">1</span>]\n    exclamation = decoded.count(<span class=\"string\">&quot;</span><span class=\"string\">!</span><span class=\"string\">&quot;</span>)\n    question = decoded.count(<span class=\"string\">&quot;</span><span class=\"string\">?</span><span class=\"string\">&quot;</span>)\n    has_url = <span class=\"number\">1</span> <span class=\"keyword\">if</span> (<span class=\"string\">&quot;</span><span class=\"string\">http://</span><span class=\"string\">&quot;</span> in decoded) or (<span class=\"string\">&quot;</span><span class=\"string\">https://</span><span class=\"string\">&quot;</span> in decoded) <span class=\"keyword\">else</span> <span class=\"number\">0</span>\n    uppercase = sum(\n        <span class=\"number\">1</span>\n        <span class=\"keyword\">for</span> word in decoded.split()\n        <span class=\"keyword\">if</span> re.sub(<span class=\"string\">r</span><span class=\"string\">&quot;</span><span class=\"string\">[^A-Z]</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">&quot;</span>, word).isupper() and len(word) &gt; <span class=\"number\">0</span>\n    )\n    <span class=\"keyword\">return</span> exclamation, question, has_url, uppercase\n\n\n<span class=\"comment\"># Load and preprocess data</span>\ntrain = pd.read_csv(<span class=\"string\">&quot;</span><span class=\"string\">./input/train.csv</span><span class=\"string\">&quot;</span>)\ntest = pd.read_csv(<span class=\"string\">&quot;</span><span class=\"string\">./input/test.csv</span><span class=\"string\">&quot;</span>)\n\ntrain[<span class=\"string\">&quot;</span><span class=\"string\">clean_text</span><span class=\"string\">&quot;</span>] = train[<span class=\"string\">&quot;</span><span class=\"string\">Comment</span><span class=\"string\">&quot;</span>].apply(preprocess)\ntest[<span class=\"string\">&quot;</span><span class=\"string\">clean_text</span><span class=\"string\">&quot;</span>] = test[<span class=\"string\">&quot;</span><span class=\"string\">Comment</span><span class=\"string\">&quot;</span>].apply(preprocess)\n\n<span class=\"comment\"># Extract text features</span>\ntrain[[<span class=\"string\">&quot;</span><span class=\"string\">excl</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">quest</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">url</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">uppercase</span><span class=\"string\">&quot;</span>]] = (\n    train[<span class=\"string\">&quot;</span><span class=\"string\">Comment</span><span class=\"string\">&quot;</span>].apply(extract_text_features).apply(pd.Series)\n)\ntest[[<span class=\"string\">&quot;</span><span class=\"string\">excl</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">quest</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">url</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">uppercase</span><span class=\"string\">&quot;</span>]] = (\n    test[<span class=\"string\">&quot;</span><span class=\"string\">Comment</span><span class=\"string\">&quot;</span>].apply(extract_text_features).apply(pd.Series)\n)\n\n<span class=\"comment\"># Extract date features</span>\n<span class=\"keyword\">for</span> df in [train, test]:\n    dates = df[<span class=\"string\">&quot;</span><span class=\"string\">Date</span><span class=\"string\">&quot;</span>].str.replace(<span class=\"string\">&quot;</span><span class=\"string\">Z$</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">+0000</span><span class=\"string\">&quot;</span>, regex=<span class=\"keyword\">True</span>)\n    df[<span class=\"string\">&quot;</span><span class=\"string\">dt</span><span class=\"string\">&quot;</span>] = pd.to_datetime(dates, format=<span class=\"string\">&quot;</span><span class=\"string\">%</span><span class=\"string\">Y</span><span class=\"string\">%</span><span class=\"string\">m</span><span class=\"string\">%d</span><span class=\"string\">%</span><span class=\"string\">H</span><span class=\"string\">%</span><span class=\"string\">M</span><span class=\"string\">%</span><span class=\"string\">S</span><span class=\"string\">%</span><span class=\"string\">z</span><span class=\"string\">&quot;</span>, errors=<span class=\"string\">&quot;</span><span class=\"string\">coerce</span><span class=\"string\">&quot;</span>)\n    df[<span class=\"string\">&quot;</span><span class=\"string\">hour</span><span class=\"string\">&quot;</span>] = df[<span class=\"string\">&quot;</span><span class=\"string\">dt</span><span class=\"string\">&quot;</span>].dt.hour.fillna(-<span class=\"number\">1</span>)\n    df[<span class=\"string\">&quot;</span><span class=\"string\">dow</span><span class=\"string\">&quot;</span>] = df[<span class=\"string\">&quot;</span><span class=\"string\">dt</span><span class=\"string\">&quot;</span>].dt.weekday.fillna(-<span class=\"number\">1</span>)\n    df[<span class=\"string\">&quot;</span><span class=\"string\">date_missing</span><span class=\"string\">&quot;</span>] = df[<span class=\"string\">&quot;</span><span class=\"string\">dt</span><span class=\"string\">&quot;</span>].isna().astype(int)\n\n<span class=\"comment\"># TF-IDF features</span>\ntfidf = TfidfVectorizer(max_features=<span class=\"number\">5000</span>, ngram_range=(<span class=\"number\">1</span>, <span class=\"number\">2</span>))\nX_train = tfidf.fit_transform(train[<span class=\"string\">&quot;</span><span class=\"string\">clean_text</span><span class=\"string\">&quot;</span>])\nX_test = tfidf.transform(test[<span class=\"string\">&quot;</span><span class=\"string\">clean_text</span><span class=\"string\">&quot;</span>])\n\n<span class=\"comment\"># Create feature matrices</span>\nmeta_features = [\n    <span class=\"string\">&quot;</span><span class=\"string\">char_count</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">word_count</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">all_caps</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">excl</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">quest</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">url</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">uppercase</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">hour</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">dow</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">date_missing</span><span class=\"string\">&quot;</span>,\n]\n<span class=\"keyword\">for</span> i, df in enumerate([train, test]):\n    df[<span class=\"string\">&quot;</span><span class=\"string\">char_count</span><span class=\"string\">&quot;</span>] = df[<span class=\"string\">&quot;</span><span class=\"string\">clean_text</span><span class=\"string\">&quot;</span>].str.len()\n    df[<span class=\"string\">&quot;</span><span class=\"string\">word_count</span><span class=\"string\">&quot;</span>] = df[<span class=\"string\">&quot;</span><span class=\"string\">clean_text</span><span class=\"string\">&quot;</span>].str.split().str.len()\n    df[<span class=\"string\">&quot;</span><span class=\"string\">all_caps</span><span class=\"string\">&quot;</span>] = df[<span class=\"string\">&quot;</span><span class=\"string\">clean_text</span><span class=\"string\">&quot;</span>].str.isupper().astype(int)\n\nX_train = pd.DataFrame.sparse.from_spmatrix(X_train)\nX_test = pd.DataFrame.sparse.from_spmatrix(X_test)\nX_train[meta_features] = train[meta_features]\nX_test[meta_features] = test[meta_features]\n\n<span class=\"comment\"># Model training with early stopping</span>\nX_train_split, X_val, y_train_split, y_val = train_test_split(\n    X_train, train[<span class=\"string\">&quot;</span><span class=\"string\">Insult</span><span class=\"string\">&quot;</span>], test_size=<span class=\"number\">0.2</span>, random_state=<span class=\"number\">42</span>\n)\nmodel = XGBClassifier(\n    n_estimators=<span class=\"number\">1000</span>,\n    max_depth=<span class=\"number\">6</span>,\n    learning_rate=<span class=\"number\">0.05</span>,\n    tree_method=<span class=\"string\">&quot;</span><span class=\"string\">gpu_hist</span><span class=\"string\">&quot;</span>,\n    eval_metric=<span class=\"string\">&quot;</span><span class=\"string\">auc</span><span class=\"string\">&quot;</span>,\n    random_state=<span class=\"number\">42</span>,\n)\nmodel.fit(\n    X_train_split,\n    y_train_split,\n    early_stopping_rounds=<span class=\"number\">20</span>,\n    eval_set=[(X_val, y_val)],\n    verbose=<span class=\"keyword\">False</span>,\n)\n\n<span class=\"comment\"># Create final model with best iteration</span>\nparams = model.get_params()\nparams[<span class=\"string\">&quot;</span><span class=\"string\">n_estimators</span><span class=\"string\">&quot;</span>] = model.best_iteration\nfinal_model = XGBClassifier(**params)\nfinal_model.fit(X_train, train[<span class=\"string\">&quot;</span><span class=\"string\">Insult</span><span class=\"string\">&quot;</span>])\n\n<span class=\"comment\"># Generate submission</span>\ntest_probs = final_model.predict_proba(X_test)[:, <span class=\"number\">1</span>]\npd.DataFrame({<span class=\"string\">&quot;</span><span class=\"string\">Date</span><span class=\"string\">&quot;</span>: test.Date, <span class=\"string\">&quot;</span><span class=\"string\">Comment</span><span class=\"string\">&quot;</span>: test.Comment, <span class=\"string\">&quot;</span><span class=\"string\">Insult</span><span class=\"string\">&quot;</span>: test_probs}).to_csv(\n    <span class=\"string\">&quot;</span><span class=\"string\">./submission/submission.csv</span><span class=\"string\">&quot;</span>, index=<span class=\"keyword\">False</span>\n)\n\n<span class=\"comment\"># Validation metric</span>\nval_preds = final_model.predict_proba(X_val)[:, <span class=\"number\">1</span>]\nprint(<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">Validation AUC: </span><span class=\"string\">{</span>roc_auc_score(y_val, val_preds)<span class=\"string\">:</span><span class=\"string\">.4f</span><span class=\"string\">}</span><span class=\"string\">&quot;</span>)\n"
}