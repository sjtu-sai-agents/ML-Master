{
    "title": "histopathologic-cancer-detection",
    "steps": [
        {
            "text": "<span class='prompt'>ml-master@ai4ai:~$</span> python ml_master.py --task histopathologic-cancer-detection --time-limit 12h",
            "delay": 200
        },
        {
            "text": "<span class='info'>[INFO]</span>: Starting run \"histopathologic-cancer-detection\"",
            "delay": 200
        },
        {
            "text": "<span class='prompt'>ml-master@ai4ai:~$</span> ",
            "delay": 200
        }
    ],
    "code": "<span class=\"keyword\">import</span> os\n<span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd\n<span class=\"keyword\">import</span> torch\n<span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> Dataset, DataLoader\n<span class=\"keyword\">import</span> torch.nn <span class=\"keyword\">as</span> nn\n<span class=\"keyword\">import</span> torch.optim <span class=\"keyword\">as</span> optim\n<span class=\"keyword\">from</span> torch.optim.lr_scheduler <span class=\"keyword\">import</span> ReduceLROnPlateau\n<span class=\"keyword\">from</span> torchvision <span class=\"keyword\">import</span> transforms, models\n<span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> roc_auc_score\n<span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> train_test_split\n<span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image\n\n<span class=\"comment\"># Configuration</span>\nBATCH_SIZE = <span class=\"number\">64</span>  <span class=\"comment\"># Reduced for B3&#x27;s larger size</span>\nEPOCHS = <span class=\"number\">15</span>\nIMG_SIZE = <span class=\"number\">224</span>  <span class=\"comment\"># Updated target size</span>\nVAL_SPLIT = <span class=\"number\">0.2</span>\nSEED = <span class=\"number\">42</span>\ntorch.manual_seed(SEED)\n\n<span class=\"comment\"># Data preparation</span>\ntrain_df = pd.read_csv(<span class=\"string\">&quot;</span><span class=\"string\">./input/train_labels.csv</span><span class=\"string\">&quot;</span>)\ntrain_df[<span class=\"string\">&quot;</span><span class=\"string\">path</span><span class=\"string\">&quot;</span>] = <span class=\"string\">&quot;</span><span class=\"string\">./input/train/</span><span class=\"string\">&quot;</span> + train_df[<span class=\"string\">&quot;</span><span class=\"string\">id</span><span class=\"string\">&quot;</span>] + <span class=\"string\">&quot;</span><span class=\"string\">.tif</span><span class=\"string\">&quot;</span>\ntrain_files, val_files = train_test_split(\n    train_df, test_size=VAL_SPLIT, stratify=train_df[<span class=\"string\">&quot;</span><span class=\"string\">label</span><span class=\"string\">&quot;</span>], random_state=SEED\n)\n\n<span class=\"comment\"># Enhanced augmentations with resizing</span>\ntrain_transform = transforms.Compose(\n    [\n        transforms.Resize(IMG_SIZE),\n        transforms.RandomHorizontalFlip(p=<span class=\"number\">0.5</span>),\n        transforms.RandomVerticalFlip(p=<span class=\"number\">0.5</span>),\n        transforms.RandomRotation(<span class=\"number\">25</span>),\n        transforms.ColorJitter(brightness=<span class=\"number\">0.15</span>, contrast=<span class=\"number\">0.15</span>, saturation=<span class=\"number\">0.15</span>),\n        transforms.ToTensor(),\n        transforms.Normalize(mean=[<span class=\"number\">0.702</span>, <span class=\"number\">0.551</span>, <span class=\"number\">0.699</span>], std=[<span class=\"number\">0.236</span>, <span class=\"number\">0.278</span>, <span class=\"number\">0.213</span>]),\n    ]\n)\n\nval_transform = transforms.Compose(\n    [\n        transforms.Resize(IMG_SIZE),\n        transforms.ToTensor(),\n        transforms.Normalize(mean=[<span class=\"number\">0.702</span>, <span class=\"number\">0.551</span>, <span class=\"number\">0.699</span>], std=[<span class=\"number\">0.236</span>, <span class=\"number\">0.278</span>, <span class=\"number\">0.213</span>]),\n    ]\n)\n\n\n<span class=\"keyword\">class</span> <span class=\"class\">HistoDataset</span>(Dataset):\n    <span class=\"keyword\">def</span> <span class=\"function\">__init__</span>(self, df, transform=<span class=\"keyword\">None</span>):\n        self.df = df\n        self.transform = transform\n\n    <span class=\"keyword\">def</span> <span class=\"function\">__len__</span>(self):\n        <span class=\"keyword\">return</span> len(self.df)\n\n    <span class=\"keyword\">def</span> <span class=\"function\">__getitem__</span>(self, idx):\n        img_path = self.df.iloc[idx][<span class=\"string\">&quot;</span><span class=\"string\">path</span><span class=\"string\">&quot;</span>]\n        img = Image.open(img_path)\n        label = self.df.iloc[idx][<span class=\"string\">&quot;</span><span class=\"string\">label</span><span class=\"string\">&quot;</span>]\n        <span class=\"keyword\">if</span> self.transform:\n            img = self.transform(img)\n        <span class=\"keyword\">return</span> img, label\n\n\n<span class=\"comment\"># Create datasets and loaders with increased workers</span>\ntrain_dataset = HistoDataset(train_files, train_transform)\nval_dataset = HistoDataset(val_files, val_transform)\n\ntrain_loader = DataLoader(\n    train_dataset,\n    batch_size=BATCH_SIZE,\n    shuffle=<span class=\"keyword\">True</span>,\n    num_workers=<span class=\"number\">8</span>,\n    pin_memory=<span class=\"keyword\">True</span>,\n    persistent_workers=<span class=\"keyword\">True</span>,\n)\nval_loader = DataLoader(\n    val_dataset,\n    batch_size=BATCH_SIZE * <span class=\"number\">2</span>,\n    num_workers=<span class=\"number\">8</span>,\n    pin_memory=<span class=\"keyword\">True</span>,\n    persistent_workers=<span class=\"keyword\">True</span>,\n)\n\n<span class=\"comment\"># Upgraded model architecture</span>\nmodel = models.efficientnet_b3(pretrained=<span class=\"keyword\">True</span>)\nmodel.classifier[<span class=\"number\">1</span>] = nn.Linear(model.classifier[<span class=\"number\">1</span>].in_features, <span class=\"number\">1</span>)\nmodel = model.to(<span class=\"string\">&quot;</span><span class=\"string\">cuda</span><span class=\"string\">&quot;</span>)\n\n<span class=\"comment\"># Training setup</span>\ncriterion = nn.BCEWithLogitsLoss()\noptimizer = optim.AdamW(model.parameters(), lr=<span class=\"number\">1e-3</span>, weight_decay=<span class=\"number\">1e-4</span>)\nscheduler = ReduceLROnPlateau(\n    optimizer, mode=<span class=\"string\">&quot;</span><span class=\"string\">max</span><span class=\"string\">&quot;</span>, patience=<span class=\"number\">2</span>, factor=<span class=\"number\">0.5</span>, verbose=<span class=\"keyword\">True</span>\n)\n\nbest_auc = <span class=\"number\">0</span>\n<span class=\"keyword\">for</span> epoch in range(EPOCHS):\n    model.train()\n    <span class=\"keyword\">for</span> images, labels in train_loader:\n        images, labels = images.to(<span class=\"string\">&quot;</span><span class=\"string\">cuda</span><span class=\"string\">&quot;</span>), labels.float().to(<span class=\"string\">&quot;</span><span class=\"string\">cuda</span><span class=\"string\">&quot;</span>)\n        optimizer.zero_grad()\n        outputs = model(images).squeeze()\n        loss = criterion(outputs, labels)\n        loss.backward()\n        optimizer.step()\n\n    <span class=\"comment\"># Validation</span>\n    model.eval()\n    val_preds, val_labels = [], []\n    <span class=\"keyword\">with</span> torch.no_grad():\n        <span class=\"keyword\">for</span> images, labels in val_loader:\n            images = images.to(<span class=\"string\">&quot;</span><span class=\"string\">cuda</span><span class=\"string\">&quot;</span>)\n            outputs = torch.sigmoid(model(images).squeeze())\n            val_preds.extend(outputs.cpu().numpy())\n            val_labels.extend(labels.numpy())\n\n    auc = roc_auc_score(val_labels, val_preds)\n    print(<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">Epoch </span><span class=\"string\">{</span>epoch+<span class=\"number\">1</span><span class=\"string\">}</span><span class=\"string\">/</span><span class=\"string\">{</span>EPOCHS<span class=\"string\">}</span><span class=\"string\"> | Val AUC: </span><span class=\"string\">{</span>auc<span class=\"string\">:</span><span class=\"string\">.4f</span><span class=\"string\">}</span><span class=\"string\">&quot;</span>)\n    scheduler.step(auc)\n\n    <span class=\"keyword\">if</span> auc &gt; best_auc:\n        best_auc = auc\n        torch.save(model.state_dict(), <span class=\"string\">&quot;</span><span class=\"string\">./working/best_model.pth</span><span class=\"string\">&quot;</span>)\n\n<span class=\"comment\"># Test predictions</span>\ntest_files = os.listdir(<span class=\"string\">&quot;</span><span class=\"string\">./input/test</span><span class=\"string\">&quot;</span>)\ntest_df = pd.DataFrame({<span class=\"string\">&quot;</span><span class=\"string\">id</span><span class=\"string\">&quot;</span>: [f.replace(<span class=\"string\">&quot;</span><span class=\"string\">.tif</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">&quot;</span>) <span class=\"keyword\">for</span> f in test_files]})\ntest_df[<span class=\"string\">&quot;</span><span class=\"string\">path</span><span class=\"string\">&quot;</span>] = <span class=\"string\">&quot;</span><span class=\"string\">./input/test/</span><span class=\"string\">&quot;</span> + test_df[<span class=\"string\">&quot;</span><span class=\"string\">id</span><span class=\"string\">&quot;</span>] + <span class=\"string\">&quot;</span><span class=\"string\">.tif</span><span class=\"string\">&quot;</span>\n\n\n<span class=\"keyword\">class</span> <span class=\"class\">TestDataset</span>(Dataset):\n    <span class=\"keyword\">def</span> <span class=\"function\">__init__</span>(self, df, transform=<span class=\"keyword\">None</span>):\n        self.df = df\n        self.transform = transform\n\n    <span class=\"keyword\">def</span> <span class=\"function\">__len__</span>(self):\n        <span class=\"keyword\">return</span> len(self.df)\n\n    <span class=\"keyword\">def</span> <span class=\"function\">__getitem__</span>(self, idx):\n        img_path = self.df.iloc[idx][<span class=\"string\">&quot;</span><span class=\"string\">path</span><span class=\"string\">&quot;</span>]\n        img = Image.open(img_path)\n        <span class=\"keyword\">if</span> self.transform:\n            img = self.transform(img)\n        <span class=\"keyword\">return</span> img\n\n\ntest_dataset = TestDataset(test_df, val_transform)\ntest_loader = DataLoader(\n    test_dataset,\n    batch_size=BATCH_SIZE * <span class=\"number\">2</span>,\n    num_workers=<span class=\"number\">8</span>,\n    shuffle=<span class=\"keyword\">False</span>,\n    pin_memory=<span class=\"keyword\">True</span>,\n)\n\nmodel.load_state_dict(torch.load(<span class=\"string\">&quot;</span><span class=\"string\">./working/best_model.pth</span><span class=\"string\">&quot;</span>))\nmodel.eval()\npreds = []\n<span class=\"keyword\">with</span> torch.no_grad():\n    <span class=\"keyword\">for</span> images in test_loader:\n        images = images.to(<span class=\"string\">&quot;</span><span class=\"string\">cuda</span><span class=\"string\">&quot;</span>)\n        outputs = torch.sigmoid(model(images).squeeze())\n        preds.extend(outputs.cpu().numpy())\n\nsubmission = pd.DataFrame({<span class=\"string\">&quot;</span><span class=\"string\">id</span><span class=\"string\">&quot;</span>: test_df[<span class=\"string\">&quot;</span><span class=\"string\">id</span><span class=\"string\">&quot;</span>], <span class=\"string\">&quot;</span><span class=\"string\">label</span><span class=\"string\">&quot;</span>: preds})\nsubmission.to_csv(<span class=\"string\">&quot;</span><span class=\"string\">./submission/submission.csv</span><span class=\"string\">&quot;</span>, index=<span class=\"keyword\">False</span>)\nprint(<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">Best Validation AUC: </span><span class=\"string\">{</span>best_auc<span class=\"string\">:</span><span class=\"string\">.4f</span><span class=\"string\">}</span><span class=\"string\">&quot;</span>)\n"
}