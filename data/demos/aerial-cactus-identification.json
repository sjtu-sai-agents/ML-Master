{
    "title": "aerial-cactus-identification",
    "steps": [
        {
            "text": "<span class='prompt'>ml-master@ai4ai:~$</span> python ml_master.py --task aerial-cactus-identification --time-limit 12h",
            "delay": 200
        },
        {
            "text": "<span class='info'>[INFO]</span>: Starting run \"aerial-cactus-identification\"",
            "delay": 200
        },
        {
            "text": "<span class='prompt'>ml-master@ai4ai:~$</span> ",
            "delay": 200
        }
    ],
    "code": "<span class=\"keyword\">import</span> os\n<span class=\"keyword\">import</span> torch\n<span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn, optim\n<span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> DataLoader, Dataset, random_split\n<span class=\"keyword\">from</span> torchvision <span class=\"keyword\">import</span> transforms, models\n<span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> roc_auc_score\n<span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image\n<span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd\n<span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n\n<span class=\"comment\"># Config</span>\nDATA_DIR = <span class=\"string\">&quot;</span><span class=\"string\">./input</span><span class=\"string\">&quot;</span>\nBATCH_SIZE = <span class=\"number\">64</span>\nIMG_SIZE = <span class=\"number\">224</span>\nEPOCHS = <span class=\"number\">10</span>\nSEED = <span class=\"number\">42</span>\ntorch.manual_seed(SEED)\n\n\n<span class=\"comment\"># Dataset class</span>\n<span class=\"keyword\">class</span> <span class=\"class\">CactusDataset</span>(Dataset):\n    <span class=\"keyword\">def</span> <span class=\"function\">__init__</span>(self, df, img_dir, transform=<span class=\"keyword\">None</span>):\n        self.df = df\n        self.img_dir = img_dir\n        self.transform = transform\n\n    <span class=\"keyword\">def</span> <span class=\"function\">__len__</span>(self):\n        <span class=\"keyword\">return</span> len(self.df)\n\n    <span class=\"keyword\">def</span> <span class=\"function\">__getitem__</span>(self, idx):\n        img_path = os.path.join(self.img_dir, self.df.iloc[idx][<span class=\"string\">&quot;</span><span class=\"string\">id</span><span class=\"string\">&quot;</span>])\n        image = Image.open(img_path).convert(<span class=\"string\">&quot;</span><span class=\"string\">RGB</span><span class=\"string\">&quot;</span>)\n        label = self.df.iloc[idx][<span class=\"string\">&quot;</span><span class=\"string\">has_cactus</span><span class=\"string\">&quot;</span>]\n\n        <span class=\"keyword\">if</span> self.transform:\n            image = self.transform(image)\n\n        <span class=\"keyword\">return</span> image, torch.tensor(label, dtype=torch.float32)\n\n\n<span class=\"comment\"># Prepare data</span>\ntrain_df = pd.read_csv(<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">{</span>DATA_DIR<span class=\"string\">}</span><span class=\"string\">/train.csv</span><span class=\"string\">&quot;</span>)\ntrain_df[<span class=\"string\">&quot;</span><span class=\"string\">path</span><span class=\"string\">&quot;</span>] = train_df[<span class=\"string\">&quot;</span><span class=\"string\">id</span><span class=\"string\">&quot;</span>].apply(<span class=\"keyword\">lambda</span> x: <span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">{</span>DATA_DIR<span class=\"string\">}</span><span class=\"string\">/train/</span><span class=\"string\">{</span>x<span class=\"string\">}</span><span class=\"string\">&quot;</span>)\n\n<span class=\"comment\"># Split train/val</span>\ntrain_sub, val_sub = random_split(\n    train_df, [<span class=\"number\">0.8</span>, <span class=\"number\">0.2</span>], generator=torch.Generator().manual_seed(SEED)\n)\n\n<span class=\"comment\"># Transforms</span>\ntrain_transform = transforms.Compose(\n    [\n        transforms.Resize((IMG_SIZE, IMG_SIZE)),\n        transforms.RandomHorizontalFlip(),\n        transforms.RandomVerticalFlip(),\n        transforms.RandomRotation(<span class=\"number\">15</span>),\n        transforms.ToTensor(),\n        transforms.Normalize([<span class=\"number\">0.485</span>, <span class=\"number\">0.456</span>, <span class=\"number\">0.406</span>], [<span class=\"number\">0.229</span>, <span class=\"number\">0.224</span>, <span class=\"number\">0.225</span>]),\n    ]\n)\n\nval_transform = transforms.Compose(\n    [\n        transforms.Resize((IMG_SIZE, IMG_SIZE)),\n        transforms.ToTensor(),\n        transforms.Normalize([<span class=\"number\">0.485</span>, <span class=\"number\">0.456</span>, <span class=\"number\">0.406</span>], [<span class=\"number\">0.229</span>, <span class=\"number\">0.224</span>, <span class=\"number\">0.225</span>]),\n    ]\n)\n\n<span class=\"comment\"># Datasets and loaders</span>\ntrain_ds = CactusDataset(\n    train_df.iloc[train_sub.indices], <span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">{</span>DATA_DIR<span class=\"string\">}</span><span class=\"string\">/train</span><span class=\"string\">&quot;</span>, train_transform\n)\nval_ds = CactusDataset(\n    train_df.iloc[val_sub.indices], <span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">{</span>DATA_DIR<span class=\"string\">}</span><span class=\"string\">/train</span><span class=\"string\">&quot;</span>, val_transform\n)\n\ntrain_loader = DataLoader(\n    train_ds, batch_size=BATCH_SIZE, shuffle=<span class=\"keyword\">True</span>, num_workers=<span class=\"number\">4</span>, pin_memory=<span class=\"keyword\">True</span>\n)\nval_loader = DataLoader(\n    val_ds, batch_size=BATCH_SIZE * <span class=\"number\">2</span>, num_workers=<span class=\"number\">4</span>, pin_memory=<span class=\"keyword\">True</span>\n)\n\n<span class=\"comment\"># Model</span>\nmodel = models.efficientnet_b0(pretrained=<span class=\"keyword\">True</span>)\nmodel.classifier[<span class=\"number\">1</span>] = nn.Linear(model.classifier[<span class=\"number\">1</span>].in_features, <span class=\"number\">1</span>)\nmodel = model.cuda()\n\n<span class=\"comment\"># Training setup</span>\ncriterion = nn.BCEWithLogitsLoss()\noptimizer = optim.Adam(model.parameters(), lr=<span class=\"number\">1e-3</span>)\nbest_auc = <span class=\"number\">0</span>\n\n<span class=\"comment\"># Training loop</span>\n<span class=\"keyword\">for</span> epoch in range(EPOCHS):\n    model.train()\n    <span class=\"keyword\">for</span> images, labels in train_loader:\n        images, labels = images.cuda(), labels.cuda()\n        optimizer.zero_grad()\n        outputs = model(images).squeeze()\n        loss = criterion(outputs, labels)\n        loss.backward()\n        optimizer.step()\n\n    <span class=\"comment\"># Validation</span>\n    model.eval()\n    val_preds = []\n    val_labels = []\n    <span class=\"keyword\">with</span> torch.no_grad():\n        <span class=\"keyword\">for</span> images, labels in val_loader:\n            images = images.cuda()\n            outputs = torch.sigmoid(model(images).squeeze())\n            val_preds.extend(outputs.cpu().numpy())\n            val_labels.extend(labels.cpu().numpy())\n\n    auc = roc_auc_score(val_labels, val_preds)\n    print(<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">Epoch </span><span class=\"string\">{</span>epoch+<span class=\"number\">1</span><span class=\"string\">}</span><span class=\"string\">/</span><span class=\"string\">{</span>EPOCHS<span class=\"string\">}</span><span class=\"string\"> - Val AUC: </span><span class=\"string\">{</span>auc<span class=\"string\">:</span><span class=\"string\">.4f</span><span class=\"string\">}</span><span class=\"string\">&quot;</span>)\n\n    <span class=\"keyword\">if</span> auc &gt; best_auc:\n        best_auc = auc\n        torch.save(model.state_dict(), <span class=\"string\">&quot;</span><span class=\"string\">./working/best_model.pth</span><span class=\"string\">&quot;</span>)\n\n<span class=\"comment\"># Load best model for test predictions</span>\nmodel.load_state_dict(torch.load(<span class=\"string\">&quot;</span><span class=\"string\">./working/best_model.pth</span><span class=\"string\">&quot;</span>))\nmodel.eval()\n\n<span class=\"comment\"># Generate submission</span>\ntest_dir = <span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">{</span>DATA_DIR<span class=\"string\">}</span><span class=\"string\">/test</span><span class=\"string\">&quot;</span>\ntest_files = [f <span class=\"keyword\">for</span> f in os.listdir(test_dir) <span class=\"keyword\">if</span> f.endswith(<span class=\"string\">&quot;</span><span class=\"string\">.jpg</span><span class=\"string\">&quot;</span>)]\ntest_df = pd.DataFrame({<span class=\"string\">&quot;</span><span class=\"string\">id</span><span class=\"string\">&quot;</span>: test_files})\n\n\n<span class=\"keyword\">class</span> <span class=\"class\">TestDataset</span>(Dataset):\n    <span class=\"keyword\">def</span> <span class=\"function\">__init__</span>(self, img_dir, transform=<span class=\"keyword\">None</span>):\n        self.img_dir = img_dir\n        self.transform = transform\n        self.images = os.listdir(img_dir)\n\n    <span class=\"keyword\">def</span> <span class=\"function\">__len__</span>(self):\n        <span class=\"keyword\">return</span> len(self.images)\n\n    <span class=\"keyword\">def</span> <span class=\"function\">__getitem__</span>(self, idx):\n        img_path = os.path.join(self.img_dir, self.images[idx])\n        image = Image.open(img_path).convert(<span class=\"string\">&quot;</span><span class=\"string\">RGB</span><span class=\"string\">&quot;</span>)\n        <span class=\"keyword\">if</span> self.transform:\n            image = self.transform(image)\n        <span class=\"keyword\">return</span> image, self.images[idx]\n\n\ntest_ds = TestDataset(test_dir, val_transform)\ntest_loader = DataLoader(test_ds, batch_size=BATCH_SIZE * <span class=\"number\">2</span>, num_workers=<span class=\"number\">4</span>)\n\npreds = []\nids = []\n<span class=\"keyword\">with</span> torch.no_grad():\n    <span class=\"keyword\">for</span> images, batch_ids in test_loader:\n        images = images.cuda()\n        outputs = torch.sigmoid(model(images).squeeze())\n        preds.extend(outputs.cpu().numpy())\n        ids.extend(batch_ids)\n\nsubmission = pd.DataFrame({<span class=\"string\">&quot;</span><span class=\"string\">id</span><span class=\"string\">&quot;</span>: ids, <span class=\"string\">&quot;</span><span class=\"string\">has_cactus</span><span class=\"string\">&quot;</span>: preds})\nsubmission.to_csv(<span class=\"string\">&quot;</span><span class=\"string\">./submission/submission.csv</span><span class=\"string\">&quot;</span>, index=<span class=\"keyword\">False</span>)\nprint(<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">Validation AUC: </span><span class=\"string\">{</span>best_auc<span class=\"string\">:</span><span class=\"string\">.4f</span><span class=\"string\">}</span><span class=\"string\">&quot;</span>)\nprint(<span class=\"string\">&quot;</span><span class=\"string\">Submission saved to submission.csv</span><span class=\"string\">&quot;</span>)\n"
}