{
    "title": "predict-volcanic-eruptions-ingv-oe",
    "steps": [
        {
            "text": "<span class='prompt'>ml-master@ai4ai:~$</span> python ml_master.py --task predict-volcanic-eruptions-ingv-oe --time-limit 12h",
            "delay": 200
        },
        {
            "text": "<span class='info'>[INFO]</span>: Starting run \"predict-volcanic-eruptions-ingv-oe\"",
            "delay": 200
        },
        {
            "text": "<span class='prompt'>ml-master@ai4ai:~$</span> ",
            "delay": 200
        }
    ],
    "code": "<span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd\n<span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n<span class=\"keyword\">from</span> pathlib <span class=\"keyword\">import</span> Path\n<span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> train_test_split\n<span class=\"keyword\">import</span> lightgbm <span class=\"keyword\">as</span> lgb\n<span class=\"keyword\">from</span> scipy.stats <span class=\"keyword\">import</span> skew, kurtosis\n<span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> mean_absolute_error\n\ninput_path = Path(<span class=\"string\">&quot;</span><span class=\"string\">./input</span><span class=\"string\">&quot;</span>)\ntrain_labels = pd.read_csv(input_path / <span class=\"string\">&quot;</span><span class=\"string\">train.csv</span><span class=\"string\">&quot;</span>)\n\n\n<span class=\"keyword\">def</span> <span class=\"function\">extract_features</span>(file_path):\n    df = pd.read_csv(file_path)\n    features = {}\n    <span class=\"keyword\">for</span> col in df.columns:\n        col_data = df[col]\n\n        <span class=\"comment\"># Handle NaN values</span>\n        <span class=\"keyword\">if</span> col_data.isna().all():\n            col_data_filled = col_data.fillna(<span class=\"number\">0</span>)\n        <span class=\"keyword\">else</span>:\n            col_data_filled = col_data.fillna(col_data.mean())\n\n        <span class=\"comment\"># Basic stats</span>\n        features[<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">{</span>col<span class=\"string\">}</span><span class=\"string\">_mean</span><span class=\"string\">&quot;</span>] = col_data_filled.mean()\n        features[<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">{</span>col<span class=\"string\">}</span><span class=\"string\">_std</span><span class=\"string\">&quot;</span>] = col_data_filled.std()\n        features[<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">{</span>col<span class=\"string\">}</span><span class=\"string\">_max</span><span class=\"string\">&quot;</span>] = col_data_filled.max()\n        features[<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">{</span>col<span class=\"string\">}</span><span class=\"string\">_min</span><span class=\"string\">&quot;</span>] = col_data_filled.min()\n        features[<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">{</span>col<span class=\"string\">}</span><span class=\"string\">_q95</span><span class=\"string\">&quot;</span>] = col_data_filled.quantile(<span class=\"number\">0.95</span>)\n        features[<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">{</span>col<span class=\"string\">}</span><span class=\"string\">_q05</span><span class=\"string\">&quot;</span>] = col_data_filled.quantile(<span class=\"number\">0.05</span>)\n\n        <span class=\"comment\"># Distribution stats</span>\n        features[<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">{</span>col<span class=\"string\">}</span><span class=\"string\">_skew</span><span class=\"string\">&quot;</span>] = skew(col_data_filled)\n        features[<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">{</span>col<span class=\"string\">}</span><span class=\"string\">_kurtosis</span><span class=\"string\">&quot;</span>] = kurtosis(col_data_filled)\n\n        <span class=\"comment\"># Autocorrelation</span>\n        autocorr_lag1 = col_data_filled.autocorr(lag=<span class=\"number\">1</span>)\n        autocorr_lag100 = col_data_filled.autocorr(lag=<span class=\"number\">100</span>)\n        features[<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">{</span>col<span class=\"string\">}</span><span class=\"string\">_ac_lag1</span><span class=\"string\">&quot;</span>] = autocorr_lag1 <span class=\"keyword\">if</span> not np.isnan(autocorr_lag1) <span class=\"keyword\">else</span> <span class=\"number\">0</span>\n        features[<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">{</span>col<span class=\"string\">}</span><span class=\"string\">_ac_lag100</span><span class=\"string\">&quot;</span>] = (\n            autocorr_lag100 <span class=\"keyword\">if</span> not np.isnan(autocorr_lag100) <span class=\"keyword\">else</span> <span class=\"number\">0</span>\n        )\n\n        <span class=\"comment\"># Rolling window stats</span>\n        window_size = <span class=\"number\">1000</span>\n        rolling_mean = col_data_filled.rolling(window_size).mean().dropna()\n        rolling_std = col_data_filled.rolling(window_size).std().dropna()\n        <span class=\"keyword\">if</span> len(rolling_mean) &gt; <span class=\"number\">0</span>:\n            features[<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">{</span>col<span class=\"string\">}</span><span class=\"string\">_roll_mean_mean</span><span class=\"string\">&quot;</span>] = rolling_mean.mean()\n            features[<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">{</span>col<span class=\"string\">}</span><span class=\"string\">_roll_mean_std</span><span class=\"string\">&quot;</span>] = rolling_mean.std()\n            features[<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">{</span>col<span class=\"string\">}</span><span class=\"string\">_roll_std_mean</span><span class=\"string\">&quot;</span>] = rolling_std.mean()\n            features[<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">{</span>col<span class=\"string\">}</span><span class=\"string\">_roll_std_std</span><span class=\"string\">&quot;</span>] = rolling_std.std()\n        <span class=\"keyword\">else</span>:\n            features.update(\n                {\n                    <span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">{</span>col<span class=\"string\">}</span><span class=\"string\">_roll_</span><span class=\"string\">{</span>stat<span class=\"string\">}</span><span class=\"string\">&quot;</span>: <span class=\"number\">0</span>\n                    <span class=\"keyword\">for</span> stat in [<span class=\"string\">&quot;</span><span class=\"string\">mean_mean</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">mean_std</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">std_mean</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">std_std</span><span class=\"string\">&quot;</span>]\n                }\n            )\n\n        <span class=\"comment\"># FFT features</span>\n        fft = np.fft.rfft(col_data_filled.values)\n        magnitude = np.abs(fft)[<span class=\"number\">1</span>:]\n        <span class=\"keyword\">if</span> len(magnitude) &gt; <span class=\"number\">0</span>:\n            features[<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">{</span>col<span class=\"string\">}</span><span class=\"string\">_fft_mean</span><span class=\"string\">&quot;</span>] = magnitude.mean()\n            features[<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">{</span>col<span class=\"string\">}</span><span class=\"string\">_fft_std</span><span class=\"string\">&quot;</span>] = magnitude.std()\n            features[<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">{</span>col<span class=\"string\">}</span><span class=\"string\">_fft_max</span><span class=\"string\">&quot;</span>] = magnitude.max()\n            features[<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">{</span>col<span class=\"string\">}</span><span class=\"string\">_fft_min</span><span class=\"string\">&quot;</span>] = magnitude.min()\n            features[<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">{</span>col<span class=\"string\">}</span><span class=\"string\">_fft_q95</span><span class=\"string\">&quot;</span>] = np.quantile(magnitude, <span class=\"number\">0.95</span>)\n            features[<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">{</span>col<span class=\"string\">}</span><span class=\"string\">_fft_q05</span><span class=\"string\">&quot;</span>] = np.quantile(magnitude, <span class=\"number\">0.05</span>)\n        <span class=\"keyword\">else</span>:\n            features.update(\n                {\n                    <span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">{</span>col<span class=\"string\">}</span><span class=\"string\">_fft_</span><span class=\"string\">{</span>stat<span class=\"string\">}</span><span class=\"string\">&quot;</span>: <span class=\"number\">0</span>\n                    <span class=\"keyword\">for</span> stat in [<span class=\"string\">&quot;</span><span class=\"string\">mean</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">std</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">max</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">min</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">q95</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">q05</span><span class=\"string\">&quot;</span>]\n                }\n            )\n\n    <span class=\"keyword\">return</span> pd.Series(features)\n\n\n<span class=\"comment\"># Process training data</span>\nprint(<span class=\"string\">&quot;</span><span class=\"string\">Processing training files...</span><span class=\"string\">&quot;</span>)\ntrain_features = []\n<span class=\"keyword\">for</span> seg_id in train_labels[<span class=\"string\">&quot;</span><span class=\"string\">segment_id</span><span class=\"string\">&quot;</span>]:\n    features = extract_features(input_path / <span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">train/</span><span class=\"string\">{</span>seg_id<span class=\"string\">}</span><span class=\"string\">.csv</span><span class=\"string\">&quot;</span>)\n    train_features.append(features)\ntrain_features = pd.concat(train_features, axis=<span class=\"number\">1</span>).T.reset_index(drop=<span class=\"keyword\">True</span>)\ntrain_data = pd.concat([train_labels, train_features], axis=<span class=\"number\">1</span>)\n\n<span class=\"comment\"># Split validation</span>\nX_train, X_val, y_train, y_val = train_test_split(\n    train_data.drop([<span class=\"string\">&quot;</span><span class=\"string\">segment_id</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">time_to_eruption</span><span class=\"string\">&quot;</span>], axis=<span class=\"number\">1</span>),\n    train_data[<span class=\"string\">&quot;</span><span class=\"string\">time_to_eruption</span><span class=\"string\">&quot;</span>],\n    test_size=<span class=\"number\">0.2</span>,\n    random_state=<span class=\"number\">42</span>,\n)\n\n<span class=\"comment\"># Optimized model parameters</span>\nmodel = lgb.LGBMRegressor(\n    num_leaves=<span class=\"number\">255</span>,\n    learning_rate=<span class=\"number\">0.005</span>,\n    n_estimators=<span class=\"number\">5000</span>,\n    max_depth=-<span class=\"number\">1</span>,\n    reg_alpha=<span class=\"number\">0.2</span>,\n    reg_lambda=<span class=\"number\">0.3</span>,\n    min_child_samples=<span class=\"number\">20</span>,\n    random_state=<span class=\"number\">42</span>,\n    n_jobs=-<span class=\"number\">1</span>,\n    verbose=<span class=\"number\">1</span>,\n)\n\nmodel.fit(\n    X_train,\n    y_train,\n    eval_set=[(X_val, y_val)],\n    callbacks=[lgb.early_stopping(stopping_rounds=<span class=\"number\">200</span>), lgb.log_evaluation(<span class=\"number\">100</span>)],\n)\n\n<span class=\"comment\"># Validate</span>\nval_pred = model.predict(X_val)\nmae = mean_absolute_error(y_val, val_pred)\nprint(<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">Validation MAE: </span><span class=\"string\">{</span>mae<span class=\"string\">:</span><span class=\"string\">.4f</span><span class=\"string\">}</span><span class=\"string\">&quot;</span>)\n\n<span class=\"comment\"># Process test data</span>\nprint(<span class=\"string\">&quot;</span><span class=\"string\">\\n</span><span class=\"string\">Processing test files...</span><span class=\"string\">&quot;</span>)\ntest_files = list((input_path / <span class=\"string\">&quot;</span><span class=\"string\">test</span><span class=\"string\">&quot;</span>).glob(<span class=\"string\">&quot;</span><span class=\"string\">*.csv</span><span class=\"string\">&quot;</span>))\nsubmission = []\n<span class=\"keyword\">for</span> test_file in test_files:\n    seg_id = test_file.stem\n    features = extract_features(test_file)\n    features_df = pd.DataFrame([features])\n    pred = model.predict(features_df)[<span class=\"number\">0</span>]\n    submission.append({<span class=\"string\">&quot;</span><span class=\"string\">segment_id</span><span class=\"string\">&quot;</span>: seg_id, <span class=\"string\">&quot;</span><span class=\"string\">time_to_eruption</span><span class=\"string\">&quot;</span>: pred})\n\n<span class=\"comment\"># Save submission</span>\nsubmission_df = pd.DataFrame(submission)\nsubmission_df.to_csv(<span class=\"string\">&quot;</span><span class=\"string\">./submission/submission.csv</span><span class=\"string\">&quot;</span>, index=<span class=\"keyword\">False</span>)\nprint(<span class=\"string\">&quot;</span><span class=\"string\">Submission saved!</span><span class=\"string\">&quot;</span>)\n"
}