{
    "title": "champs-scalar-coupling",
    "steps": [
        {
            "text": "<span class='prompt'>ml-master@ai4ai:~$</span> python ml_master.py --task champs-scalar-coupling --time-limit 12h",
            "delay": 200
        },
        {
            "text": "<span class='info'>[INFO]</span>: Starting run \"champs-scalar-coupling\"",
            "delay": 200
        },
        {
            "text": "<span class='prompt'>ml-master@ai4ai:~$</span> ",
            "delay": 200
        }
    ],
    "code": "<span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n<span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd\n<span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> train_test_split\n<span class=\"keyword\">from</span> sklearn.preprocessing <span class=\"keyword\">import</span> LabelEncoder\n<span class=\"keyword\">import</span> lightgbm <span class=\"keyword\">as</span> lgb\n<span class=\"keyword\">import</span> os\n\n<span class=\"comment\"># Load data</span>\ntrain = pd.read_csv(<span class=\"string\">&quot;</span><span class=\"string\">input/train.csv</span><span class=\"string\">&quot;</span>)\ntest = pd.read_csv(<span class=\"string\">&quot;</span><span class=\"string\">input/test.csv</span><span class=\"string\">&quot;</span>)\nstructures = pd.read_csv(<span class=\"string\">&quot;</span><span class=\"string\">input/structures.csv</span><span class=\"string\">&quot;</span>)\nmulliken = pd.read_csv(<span class=\"string\">&quot;</span><span class=\"string\">input/mulliken_charges.csv</span><span class=\"string\">&quot;</span>)\ndipole = pd.read_csv(<span class=\"string\">&quot;</span><span class=\"string\">input/dipole_moments.csv</span><span class=\"string\">&quot;</span>)\npotential = pd.read_csv(<span class=\"string\">&quot;</span><span class=\"string\">input/potential_energy.csv</span><span class=\"string\">&quot;</span>)\nshielding = pd.read_csv(<span class=\"string\">&quot;</span><span class=\"string\">input/magnetic_shielding_tensors.csv</span><span class=\"string\">&quot;</span>)\n\n\n<span class=\"keyword\">def</span> <span class=\"function\">merge_atom_features</span>(df):\n    df = pd.merge(\n        df,\n        structures.add_suffix(<span class=\"string\">&quot;</span><span class=\"string\">0</span><span class=\"string\">&quot;</span>),\n        left_on=[<span class=\"string\">&quot;</span><span class=\"string\">molecule_name</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">atom_index_0</span><span class=\"string\">&quot;</span>],\n        right_on=[<span class=\"string\">&quot;</span><span class=\"string\">molecule_name0</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">atom_index0</span><span class=\"string\">&quot;</span>],\n        how=<span class=\"string\">&quot;</span><span class=\"string\">left</span><span class=\"string\">&quot;</span>,\n    ).drop([<span class=\"string\">&quot;</span><span class=\"string\">molecule_name0</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">atom_index0</span><span class=\"string\">&quot;</span>], axis=<span class=\"number\">1</span>)\n\n    df = pd.merge(\n        df,\n        structures.add_suffix(<span class=\"string\">&quot;</span><span class=\"string\">1</span><span class=\"string\">&quot;</span>),\n        left_on=[<span class=\"string\">&quot;</span><span class=\"string\">molecule_name</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">atom_index_1</span><span class=\"string\">&quot;</span>],\n        right_on=[<span class=\"string\">&quot;</span><span class=\"string\">molecule_name1</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">atom_index1</span><span class=\"string\">&quot;</span>],\n        how=<span class=\"string\">&quot;</span><span class=\"string\">left</span><span class=\"string\">&quot;</span>,\n    ).drop([<span class=\"string\">&quot;</span><span class=\"string\">molecule_name1</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">atom_index1</span><span class=\"string\">&quot;</span>], axis=<span class=\"number\">1</span>)\n\n    df[<span class=\"string\">&quot;</span><span class=\"string\">distance</span><span class=\"string\">&quot;</span>] = np.sqrt(\n        (df[<span class=\"string\">&quot;</span><span class=\"string\">x0</span><span class=\"string\">&quot;</span>] - df[<span class=\"string\">&quot;</span><span class=\"string\">x1</span><span class=\"string\">&quot;</span>]) ** <span class=\"number\">2</span>\n        + (df[<span class=\"string\">&quot;</span><span class=\"string\">y0</span><span class=\"string\">&quot;</span>] - df[<span class=\"string\">&quot;</span><span class=\"string\">y1</span><span class=\"string\">&quot;</span>]) ** <span class=\"number\">2</span>\n        + (df[<span class=\"string\">&quot;</span><span class=\"string\">z0</span><span class=\"string\">&quot;</span>] - df[<span class=\"string\">&quot;</span><span class=\"string\">z1</span><span class=\"string\">&quot;</span>]) ** <span class=\"number\">2</span>\n    )\n    <span class=\"keyword\">return</span> df\n\n\ntrain = merge_atom_features(train)\ntest = merge_atom_features(test)\n\n\n<span class=\"keyword\">def</span> <span class=\"function\">merge_quantum_features</span>(df):\n    df = pd.merge(\n        df,\n        mulliken.rename(\n            columns={<span class=\"string\">&quot;</span><span class=\"string\">atom_index</span><span class=\"string\">&quot;</span>: <span class=\"string\">&quot;</span><span class=\"string\">atom_index_0</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">mulliken_charge</span><span class=\"string\">&quot;</span>: <span class=\"string\">&quot;</span><span class=\"string\">mulliken_0</span><span class=\"string\">&quot;</span>}\n        ),\n        on=[<span class=\"string\">&quot;</span><span class=\"string\">molecule_name</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">atom_index_0</span><span class=\"string\">&quot;</span>],\n        how=<span class=\"string\">&quot;</span><span class=\"string\">left</span><span class=\"string\">&quot;</span>,\n    )\n    df = pd.merge(\n        df,\n        mulliken.rename(\n            columns={<span class=\"string\">&quot;</span><span class=\"string\">atom_index</span><span class=\"string\">&quot;</span>: <span class=\"string\">&quot;</span><span class=\"string\">atom_index_1</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">mulliken_charge</span><span class=\"string\">&quot;</span>: <span class=\"string\">&quot;</span><span class=\"string\">mulliken_1</span><span class=\"string\">&quot;</span>}\n        ),\n        on=[<span class=\"string\">&quot;</span><span class=\"string\">molecule_name</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">atom_index_1</span><span class=\"string\">&quot;</span>],\n        how=<span class=\"string\">&quot;</span><span class=\"string\">left</span><span class=\"string\">&quot;</span>,\n    )\n    df = pd.merge(df, dipole, on=<span class=\"string\">&quot;</span><span class=\"string\">molecule_name</span><span class=\"string\">&quot;</span>, how=<span class=\"string\">&quot;</span><span class=\"string\">left</span><span class=\"string\">&quot;</span>)\n    <span class=\"keyword\">return</span> pd.merge(df, potential, on=<span class=\"string\">&quot;</span><span class=\"string\">molecule_name</span><span class=\"string\">&quot;</span>, how=<span class=\"string\">&quot;</span><span class=\"string\">left</span><span class=\"string\">&quot;</span>)\n\n\ntrain = merge_quantum_features(train)\ntest = merge_quantum_features(test)\n\n\n<span class=\"keyword\">def</span> <span class=\"function\">merge_shielding</span>(df):\n    shield0 = shielding.add_suffix(<span class=\"string\">&quot;</span><span class=\"string\">0</span><span class=\"string\">&quot;</span>).rename(\n        columns={<span class=\"string\">&quot;</span><span class=\"string\">molecule_name0</span><span class=\"string\">&quot;</span>: <span class=\"string\">&quot;</span><span class=\"string\">molecule_name</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">atom_index0</span><span class=\"string\">&quot;</span>: <span class=\"string\">&quot;</span><span class=\"string\">atom_index_0</span><span class=\"string\">&quot;</span>}\n    )\n    shield1 = shielding.add_suffix(<span class=\"string\">&quot;</span><span class=\"string\">1</span><span class=\"string\">&quot;</span>).rename(\n        columns={<span class=\"string\">&quot;</span><span class=\"string\">molecule_name1</span><span class=\"string\">&quot;</span>: <span class=\"string\">&quot;</span><span class=\"string\">molecule_name</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">atom_index1</span><span class=\"string\">&quot;</span>: <span class=\"string\">&quot;</span><span class=\"string\">atom_index_1</span><span class=\"string\">&quot;</span>}\n    )\n    df = pd.merge(df, shield0, on=[<span class=\"string\">&quot;</span><span class=\"string\">molecule_name</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">atom_index_0</span><span class=\"string\">&quot;</span>], how=<span class=\"string\">&quot;</span><span class=\"string\">left</span><span class=\"string\">&quot;</span>)\n    <span class=\"keyword\">return</span> pd.merge(df, shield1, on=[<span class=\"string\">&quot;</span><span class=\"string\">molecule_name</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">atom_index_1</span><span class=\"string\">&quot;</span>], how=<span class=\"string\">&quot;</span><span class=\"string\">left</span><span class=\"string\">&quot;</span>)\n\n\ntrain = merge_shielding(train)\ntest = merge_shielding(test)\n\n<span class=\"comment\"># Feature engineering</span>\ncat_cols = [<span class=\"string\">&quot;</span><span class=\"string\">atom0</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">atom1</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">type</span><span class=\"string\">&quot;</span>]\nle = LabelEncoder()\n<span class=\"keyword\">for</span> col in cat_cols:\n    combined = pd.concat([train[col], test[col]]).astype(str)\n    le.fit(combined)\n    train[col] = le.transform(train[col].astype(str))\n    test[col] = le.transform(test[col].astype(str))\n\nfeatures = (\n    [\n        <span class=\"string\">&quot;</span><span class=\"string\">atom0</span><span class=\"string\">&quot;</span>,\n        <span class=\"string\">&quot;</span><span class=\"string\">atom1</span><span class=\"string\">&quot;</span>,\n        <span class=\"string\">&quot;</span><span class=\"string\">distance</span><span class=\"string\">&quot;</span>,\n        <span class=\"string\">&quot;</span><span class=\"string\">type</span><span class=\"string\">&quot;</span>,\n        <span class=\"string\">&quot;</span><span class=\"string\">mulliken_0</span><span class=\"string\">&quot;</span>,\n        <span class=\"string\">&quot;</span><span class=\"string\">mulliken_1</span><span class=\"string\">&quot;</span>,\n        <span class=\"string\">&quot;</span><span class=\"string\">X</span><span class=\"string\">&quot;</span>,\n        <span class=\"string\">&quot;</span><span class=\"string\">Y</span><span class=\"string\">&quot;</span>,\n        <span class=\"string\">&quot;</span><span class=\"string\">Z</span><span class=\"string\">&quot;</span>,\n        <span class=\"string\">&quot;</span><span class=\"string\">potential_energy</span><span class=\"string\">&quot;</span>,\n    ]\n    + [<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">{</span>c<span class=\"string\">}</span><span class=\"string\">0</span><span class=\"string\">&quot;</span> <span class=\"keyword\">for</span> c in shielding.columns[<span class=\"number\">2</span>:]]\n    + [<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">{</span>c<span class=\"string\">}</span><span class=\"string\">1</span><span class=\"string\">&quot;</span> <span class=\"keyword\">for</span> c in shielding.columns[<span class=\"number\">2</span>:]]\n)\n\nX = train[features]\ny = train[<span class=\"string\">&quot;</span><span class=\"string\">scalar_coupling_constant</span><span class=\"string\">&quot;</span>]\n\n<span class=\"comment\"># Split by molecules</span>\nmolecules = train[<span class=\"string\">&quot;</span><span class=\"string\">molecule_name</span><span class=\"string\">&quot;</span>].unique()\ntrain_mols, val_mols = train_test_split(molecules, test_size=<span class=\"number\">0.2</span>, random_state=<span class=\"number\">42</span>)\ntrain_mask = train[<span class=\"string\">&quot;</span><span class=\"string\">molecule_name</span><span class=\"string\">&quot;</span>].isin(train_mols)\nval_mask = train[<span class=\"string\">&quot;</span><span class=\"string\">molecule_name</span><span class=\"string\">&quot;</span>].isin(val_mols)\n\n<span class=\"comment\"># Train model</span>\nmodel = lgb.LGBMRegressor(\n    objective=<span class=\"string\">&quot;</span><span class=\"string\">regression_l1</span><span class=\"string\">&quot;</span>,\n    num_leaves=<span class=\"number\">127</span>,\n    learning_rate=<span class=\"number\">0.05</span>,\n    n_estimators=<span class=\"number\">1000</span>,\n    random_state=<span class=\"number\">42</span>,\n)\n\nmodel.fit(\n    X[train_mask],\n    y[train_mask],\n    eval_set=[(X[val_mask], y[val_mask])],\n    callbacks=[lgb.early_stopping(stopping_rounds=<span class=\"number\">20</span>), lgb.log_evaluation(<span class=\"number\">50</span>)],\n)\n\n<span class=\"comment\"># Validation metric</span>\nval_pred = model.predict(X[val_mask])\nval_df = train[val_mask][[<span class=\"string\">&quot;</span><span class=\"string\">type</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">scalar_coupling_constant</span><span class=\"string\">&quot;</span>]].copy()\nval_df[<span class=\"string\">&quot;</span><span class=\"string\">pred</span><span class=\"string\">&quot;</span>] = val_pred\n\nval_mae = np.log(\n    val_df.groupby(<span class=\"string\">&quot;</span><span class=\"string\">type</span><span class=\"string\">&quot;</span>).apply(\n        <span class=\"keyword\">lambda</span> x: np.mean(np.abs(x[<span class=\"string\">&quot;</span><span class=\"string\">scalar_coupling_constant</span><span class=\"string\">&quot;</span>] - x[<span class=\"string\">&quot;</span><span class=\"string\">pred</span><span class=\"string\">&quot;</span>])).clip(<span class=\"number\">1e-9</span>)\n    )\n).mean()\nprint(<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">Validation Score: </span><span class=\"string\">{</span>val_mae<span class=\"string\">:</span><span class=\"string\">.4f</span><span class=\"string\">}</span><span class=\"string\">&quot;</span>)\n\n<span class=\"comment\"># Generate submission</span>\ntest_pred = model.predict(test[features])\nos.makedirs(<span class=\"string\">&quot;</span><span class=\"string\">submission</span><span class=\"string\">&quot;</span>, exist_ok=<span class=\"keyword\">True</span>)\npd.DataFrame({<span class=\"string\">&quot;</span><span class=\"string\">id</span><span class=\"string\">&quot;</span>: test[<span class=\"string\">&quot;</span><span class=\"string\">id</span><span class=\"string\">&quot;</span>], <span class=\"string\">&quot;</span><span class=\"string\">scalar_coupling_constant</span><span class=\"string\">&quot;</span>: test_pred}).to_csv(\n    <span class=\"string\">&quot;</span><span class=\"string\">submission/submission.csv</span><span class=\"string\">&quot;</span>, index=<span class=\"keyword\">False</span>\n)\n"
}