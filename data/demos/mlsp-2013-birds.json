{
    "title": "mlsp-2013-birds",
    "steps": [
        {
            "text": "<span class='prompt'>ml-master@ai4ai:~$</span> python ml_master.py --task mlsp-2013-birds --time-limit 12h",
            "delay": 200
        },
        {
            "text": "<span class='info'>[INFO]</span>: Starting run \"mlsp-2013-birds\"",
            "delay": 200
        },
        {
            "text": "<span class='prompt'>ml-master@ai4ai:~$</span> ",
            "delay": 200
        }
    ],
    "code": "<span class=\"keyword\">import</span> os\n<span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd\n<span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n<span class=\"keyword\">from</span> sklearn.preprocessing <span class=\"keyword\">import</span> StandardScaler, MultiLabelBinarizer\n<span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> roc_auc_score\n<span class=\"keyword\">from</span> lightgbm <span class=\"keyword\">import</span> LGBMClassifier, early_stopping\n\nos.makedirs(<span class=\"string\">&quot;</span><span class=\"string\">submission</span><span class=\"string\">&quot;</span>, exist_ok=<span class=\"keyword\">True</span>)\n\n<span class=\"comment\"># Load data</span>\ndf_fold = pd.read_csv(\n    <span class=\"string\">&quot;</span><span class=\"string\">input/essential_data/CVfolds_2.txt</span><span class=\"string\">&quot;</span>, names=[<span class=\"string\">&quot;</span><span class=\"string\">rec_id</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">fold</span><span class=\"string\">&quot;</span>], skiprows=<span class=\"number\">1</span>\n)\ntrain_ids = df_fold[df_fold[<span class=\"string\">&quot;</span><span class=\"string\">fold</span><span class=\"string\">&quot;</span>] == <span class=\"number\">0</span>][<span class=\"string\">&quot;</span><span class=\"string\">rec_id</span><span class=\"string\">&quot;</span>]\ntest_ids = df_fold[df_fold[<span class=\"string\">&quot;</span><span class=\"string\">fold</span><span class=\"string\">&quot;</span>] == <span class=\"number\">1</span>][<span class=\"string\">&quot;</span><span class=\"string\">rec_id</span><span class=\"string\">&quot;</span>]\n\n<span class=\"comment\"># Load labels</span>\nlabels = {}\n<span class=\"keyword\">with</span> open(<span class=\"string\">&quot;</span><span class=\"string\">input/essential_data/rec_labels_test_hidden.txt</span><span class=\"string\">&quot;</span>) <span class=\"keyword\">as</span> f:\n    next(f)\n    <span class=\"keyword\">for</span> line in f:\n        parts = line.strip().split(<span class=\"string\">&quot;</span><span class=\"string\">,</span><span class=\"string\">&quot;</span>)\n        rec_id = int(parts[<span class=\"number\">0</span>])\n        labels[rec_id] = [int(x) <span class=\"keyword\">for</span> x in parts[<span class=\"number\">1</span>:] <span class=\"keyword\">if</span> x.isdigit()]\n\n\n<span class=\"comment\"># Prepare features</span>\n<span class=\"keyword\">def</span> <span class=\"function\">load_features</span>():\n    seg = pd.read_csv(\n        <span class=\"string\">&quot;</span><span class=\"string\">input/supplemental_data/segment_features.txt</span><span class=\"string\">&quot;</span>,\n        header=<span class=\"keyword\">None</span>,\n        skiprows=<span class=\"number\">1</span>,\n        names=[<span class=\"string\">&quot;</span><span class=\"string\">rec_id</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">seg_id</span><span class=\"string\">&quot;</span>] + [<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">sf_</span><span class=\"string\">{</span>i<span class=\"string\">}</span><span class=\"string\">&quot;</span> <span class=\"keyword\">for</span> i in range(<span class=\"number\">38</span>)],\n    )\n    seg_agg = seg.groupby(<span class=\"string\">&quot;</span><span class=\"string\">rec_id</span><span class=\"string\">&quot;</span>).agg([<span class=\"string\">&quot;</span><span class=\"string\">mean</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">std</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">min</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">max</span><span class=\"string\">&quot;</span>]).fillna(<span class=\"number\">0</span>)\n    seg_agg.columns = [<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">{</span>i<span class=\"string\">}</span><span class=\"string\">_</span><span class=\"string\">{</span>j<span class=\"string\">}</span><span class=\"string\">&quot;</span> <span class=\"keyword\">for</span> i, j in seg_agg.columns]\n\n    hist = pd.read_csv(\n        <span class=\"string\">&quot;</span><span class=\"string\">input/supplemental_data/histogram_of_segments.txt</span><span class=\"string\">&quot;</span>,\n        header=<span class=\"keyword\">None</span>,\n        skiprows=<span class=\"number\">1</span>,\n        names=[<span class=\"string\">&quot;</span><span class=\"string\">rec_id</span><span class=\"string\">&quot;</span>] + [<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">hist_</span><span class=\"string\">{</span>i<span class=\"string\">}</span><span class=\"string\">&quot;</span> <span class=\"keyword\">for</span> i in range(<span class=\"number\">100</span>)],\n    )\n\n    <span class=\"keyword\">return</span> hist.merge(seg_agg, on=<span class=\"string\">&quot;</span><span class=\"string\">rec_id</span><span class=\"string\">&quot;</span>, how=<span class=\"string\">&quot;</span><span class=\"string\">left</span><span class=\"string\">&quot;</span>).fillna(<span class=\"number\">0</span>)\n\n\nfeatures = load_features().set_index(<span class=\"string\">&quot;</span><span class=\"string\">rec_id</span><span class=\"string\">&quot;</span>)\nmlb = MultiLabelBinarizer(classes=range(<span class=\"number\">19</span>))\ny = pd.DataFrame(mlb.fit_transform(labels.values()), index=labels.keys())\n\n<span class=\"comment\"># Prepare data</span>\nX_train = features.loc[train_ids]\nX_test = features.loc[test_ids]\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X_train)\ntest_scaled = scaler.transform(X_test)\n\n<span class=\"comment\"># Train per-species models</span>\ntest_probs = np.zeros((len(test_ids), <span class=\"number\">19</span>))\nval_aucs = []\n\n<span class=\"keyword\">for</span> species in range(<span class=\"number\">19</span>):\n    print(<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">\\n</span><span class=\"string\">Training species </span><span class=\"string\">{</span>species<span class=\"string\">}</span><span class=\"string\">&quot;</span>)\n    y_species = y[species].loc[train_ids]\n\n    <span class=\"keyword\">if</span> y_species.sum() == <span class=\"number\">0</span>:\n        print(<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">Skipping species </span><span class=\"string\">{</span>species<span class=\"string\">}</span><span class=\"string\"> (no positives)</span><span class=\"string\">&quot;</span>)\n        test_probs[:, species] = <span class=\"number\">0</span>\n        val_aucs.append(np.nan)\n        <span class=\"keyword\">continue</span>\n\n    model = LGBMClassifier(\n        n_estimators=<span class=\"number\">2000</span>,\n        learning_rate=<span class=\"number\">0.05</span>,\n        num_leaves=<span class=\"number\">127</span>,\n        subsample=<span class=\"number\">0.8</span>,\n        colsample_bytree=<span class=\"number\">0.8</span>,\n        random_state=<span class=\"number\">42</span>,\n        n_jobs=-<span class=\"number\">1</span>,\n        verbose=-<span class=\"number\">1</span>,  <span class=\"comment\"># Move verbose here</span>\n    )\n\n    model.fit(X_scaled, y_species)\n\n    <span class=\"comment\"># Validation prediction</span>\n    val_preds = model.predict_proba(X_scaled)[:, <span class=\"number\">1</span>]\n    species_auc = roc_auc_score(y_species, val_preds)\n    val_aucs.append(species_auc)\n\n    <span class=\"comment\"># Test prediction</span>\n    test_probs[:, species] = model.predict_proba(test_scaled)[:, <span class=\"number\">1</span>]\n    print(<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">Species </span><span class=\"string\">{</span>species<span class=\"string\">}</span><span class=\"string\"> AUC: </span><span class=\"string\">{</span>species_auc<span class=\"string\">:</span><span class=\"string\">.4f</span><span class=\"string\">}</span><span class=\"string\">&quot;</span>)\n\n<span class=\"comment\"># Calculate overall validation AUC</span>\nmean_auc = np.nanmean(val_aucs)\nprint(<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">\\n</span><span class=\"string\">Overall Validation AUC: </span><span class=\"string\">{</span>mean_auc<span class=\"string\">:</span><span class=\"string\">.4f</span><span class=\"string\">}</span><span class=\"string\">&quot;</span>)\n\n<span class=\"comment\"># Create submission</span>\nsubmission = []\n<span class=\"keyword\">for</span> i, rec_id in enumerate(test_ids):\n    <span class=\"keyword\">for</span> species in range(<span class=\"number\">19</span>):\n        submission.append(\n            {<span class=\"string\">&quot;</span><span class=\"string\">Id</span><span class=\"string\">&quot;</span>: rec_id * <span class=\"number\">100</span> + species, <span class=\"string\">&quot;</span><span class=\"string\">Probability</span><span class=\"string\">&quot;</span>: test_probs[i, species]}\n        )\n\nsub_df = pd.DataFrame(submission)\nsub_df.to_csv(<span class=\"string\">&quot;</span><span class=\"string\">submission/submission.csv</span><span class=\"string\">&quot;</span>, index=<span class=\"keyword\">False</span>)\nprint(<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">Submission saved with </span><span class=\"string\">{</span>len(sub_df)<span class=\"string\">}</span><span class=\"string\"> rows</span><span class=\"string\">&quot;</span>)\n"
}