{
    "title": "dog-breed-identification",
    "steps": [
        {
            "text": "<span class='prompt'>ml-master@ai4ai:~$</span> python ml_master.py --task dog-breed-identification --time-limit 12h",
            "delay": 200
        },
        {
            "text": "<span class='info'>[INFO]</span>: Starting run \"dog-breed-identification\"",
            "delay": 200
        },
        {
            "text": "<span class='prompt'>ml-master@ai4ai:~$</span> ",
            "delay": 200
        }
    ],
    "code": "<span class=\"keyword\">import</span> os\n<span class=\"keyword\">import</span> torch\n<span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn, optim\n<span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> Dataset, DataLoader\n<span class=\"keyword\">import</span> torchvision.transforms <span class=\"keyword\">as</span> transforms\n<span class=\"keyword\">from</span> torchvision.models <span class=\"keyword\">import</span> efficientnet_b4\n<span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd\n<span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n<span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> train_test_split\n<span class=\"keyword\">from</span> sklearn.preprocessing <span class=\"keyword\">import</span> LabelEncoder\n<span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> log_loss\n<span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image\n<span class=\"keyword\">from</span> tqdm <span class=\"keyword\">import</span> tqdm\n<span class=\"keyword\">from</span> torch.cuda.amp <span class=\"keyword\">import</span> autocast, GradScaler\n\ndevice = torch.device(<span class=\"string\">&quot;</span><span class=\"string\">cuda</span><span class=\"string\">&quot;</span> <span class=\"keyword\">if</span> torch.cuda.is_available() <span class=\"keyword\">else</span> <span class=\"string\">&quot;</span><span class=\"string\">cpu</span><span class=\"string\">&quot;</span>)\n\n<span class=\"comment\"># Data loading and preprocessing</span>\nlabels_df = pd.read_csv(<span class=\"string\">&quot;</span><span class=\"string\">input/labels.csv</span><span class=\"string\">&quot;</span>)\nle = LabelEncoder()\nlabels_df[<span class=\"string\">&quot;</span><span class=\"string\">label</span><span class=\"string\">&quot;</span>] = le.fit_transform(labels_df[<span class=\"string\">&quot;</span><span class=\"string\">breed</span><span class=\"string\">&quot;</span>])\nimage_paths = [<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">input/train/</span><span class=\"string\">{</span>id<span class=\"string\">}</span><span class=\"string\">.jpg</span><span class=\"string\">&quot;</span> <span class=\"keyword\">for</span> id in labels_df[<span class=\"string\">&quot;</span><span class=\"string\">id</span><span class=\"string\">&quot;</span>]]\nlabels = labels_df[<span class=\"string\">&quot;</span><span class=\"string\">label</span><span class=\"string\">&quot;</span>].values\n\ntrain_paths, val_paths, train_labels, val_labels = train_test_split(\n    image_paths, labels, test_size=<span class=\"number\">0.2</span>, random_state=<span class=\"number\">42</span>, stratify=labels\n)\n\n\n<span class=\"keyword\">class</span> <span class=\"class\">DogDataset</span>(Dataset):\n    <span class=\"keyword\">def</span> <span class=\"function\">__init__</span>(self, paths, labels, transform=<span class=\"keyword\">None</span>):\n        self.paths = paths\n        self.labels = labels\n        self.transform = transform\n\n    <span class=\"keyword\">def</span> <span class=\"function\">__len__</span>(self):\n        <span class=\"keyword\">return</span> len(self.paths)\n\n    <span class=\"keyword\">def</span> <span class=\"function\">__getitem__</span>(self, idx):\n        img = Image.open(self.paths[idx]).convert(<span class=\"string\">&quot;</span><span class=\"string\">RGB</span><span class=\"string\">&quot;</span>)\n        <span class=\"keyword\">if</span> self.transform:\n            img = self.transform(img)\n        <span class=\"keyword\">return</span> img, self.labels[idx]\n\n\n<span class=\"keyword\">class</span> <span class=\"class\">TTADataset</span>(Dataset):\n    <span class=\"keyword\">def</span> <span class=\"function\">__init__</span>(self, paths, transform=<span class=\"keyword\">None</span>):\n        self.paths = paths\n        self.transform = transform\n\n    <span class=\"keyword\">def</span> <span class=\"function\">__len__</span>(self):\n        <span class=\"keyword\">return</span> len(self.paths)\n\n    <span class=\"keyword\">def</span> <span class=\"function\">__getitem__</span>(self, idx):\n        img = Image.open(self.paths[idx]).convert(<span class=\"string\">&quot;</span><span class=\"string\">RGB</span><span class=\"string\">&quot;</span>)\n        <span class=\"keyword\">return</span> self.transform(img)\n\n\ntrain_transform = transforms.Compose(\n    [\n        transforms.RandomResizedCrop(<span class=\"number\">380</span>),\n        transforms.RandomHorizontalFlip(),\n        transforms.ColorJitter(brightness=<span class=\"number\">0.2</span>, contrast=<span class=\"number\">0.2</span>, saturation=<span class=\"number\">0.2</span>),\n        transforms.RandomRotation(<span class=\"number\">15</span>),\n        transforms.ToTensor(),\n        transforms.Normalize([<span class=\"number\">0.485</span>, <span class=\"number\">0.456</span>, <span class=\"number\">0.406</span>], [<span class=\"number\">0.229</span>, <span class=\"number\">0.224</span>, <span class=\"number\">0.225</span>]),\n    ]\n)\n\nval_transform = transforms.Compose(\n    [\n        transforms.Resize(<span class=\"number\">456</span>),\n        transforms.CenterCrop(<span class=\"number\">380</span>),\n        transforms.ToTensor(),\n        transforms.Normalize([<span class=\"number\">0.485</span>, <span class=\"number\">0.456</span>, <span class=\"number\">0.406</span>], [<span class=\"number\">0.229</span>, <span class=\"number\">0.224</span>, <span class=\"number\">0.225</span>]),\n    ]\n)\n\ntta_transform = transforms.Compose(\n    [\n        transforms.Resize(<span class=\"number\">456</span>),\n        transforms.FiveCrop(<span class=\"number\">380</span>),\n        transforms.Lambda(\n            <span class=\"keyword\">lambda</span> crops: [transforms.functional.hflip(crop) <span class=\"keyword\">for</span> crop in crops]\n            + list(crops)\n        ),\n        transforms.Lambda(\n            <span class=\"keyword\">lambda</span> crops: [transforms.ToTensor()(crop) <span class=\"keyword\">for</span> crop in crops]\n        ),\n        transforms.Lambda(\n            <span class=\"keyword\">lambda</span> crops: torch.stack(\n                [\n                    transforms.Normalize([<span class=\"number\">0.485</span>, <span class=\"number\">0.456</span>, <span class=\"number\">0.406</span>], [<span class=\"number\">0.229</span>, <span class=\"number\">0.224</span>, <span class=\"number\">0.225</span>])(\n                        crop\n                    )\n                    <span class=\"keyword\">for</span> crop in crops\n                ]\n            )\n        ),\n    ]\n)\n\ntrain_ds = DogDataset(train_paths, train_labels, train_transform)\nval_ds = DogDataset(val_paths, val_labels, val_transform)\ntrain_loader = DataLoader(\n    train_ds, batch_size=<span class=\"number\">32</span>, shuffle=<span class=\"keyword\">True</span>, num_workers=<span class=\"number\">8</span>, pin_memory=<span class=\"keyword\">True</span>\n)\nval_loader = DataLoader(val_ds, batch_size=<span class=\"number\">64</span>, num_workers=<span class=\"number\">8</span>, pin_memory=<span class=\"keyword\">True</span>)\n\nmodel = efficientnet_b4(pretrained=<span class=\"keyword\">True</span>)\nmodel.classifier[<span class=\"number\">1</span>] = nn.Linear(model.classifier[<span class=\"number\">1</span>].in_features, <span class=\"number\">120</span>)\nmodel = model.to(device)\ncriterion = nn.CrossEntropyLoss()\noptimizer = optim.AdamW(model.parameters(), lr=<span class=\"number\">3e-4</span>, weight_decay=<span class=\"number\">0.01</span>)\nscaler = GradScaler()\n\n<span class=\"keyword\">for</span> epoch in range(<span class=\"number\">10</span>):\n    model.train()\n    <span class=\"keyword\">for</span> images, labels in tqdm(train_loader, desc=<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">Epoch </span><span class=\"string\">{</span>epoch+<span class=\"number\">1</span><span class=\"string\">}</span><span class=\"string\">&quot;</span>):\n        images, labels = images.to(device), labels.to(device)\n        optimizer.zero_grad()\n        <span class=\"keyword\">with</span> autocast():\n            outputs = model(images)\n            loss = criterion(outputs, labels)\n        scaler.scale(loss).backward()\n        scaler.step(optimizer)\n        scaler.update()\n\nmodel.eval()\nval_preds, val_true = [], []\n<span class=\"keyword\">with</span> torch.no_grad():\n    <span class=\"keyword\">for</span> images, labels in val_loader:\n        images = images.to(device)\n        outputs = model(images)\n        val_preds.append(torch.softmax(outputs, dim=<span class=\"number\">1</span>).cpu().numpy())\n        val_true.append(labels.numpy())\nval_preds = np.concatenate(val_preds)\nval_true = np.concatenate(val_true)\nprint(<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">Validation Log Loss: </span><span class=\"string\">{</span>log_loss(val_true, val_preds)<span class=\"string\">:</span><span class=\"string\">.4f</span><span class=\"string\">}</span><span class=\"string\">&quot;</span>)\n\ntest_paths = [<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">input/test/</span><span class=\"string\">{</span>f<span class=\"string\">}</span><span class=\"string\">&quot;</span> <span class=\"keyword\">for</span> f in os.listdir(<span class=\"string\">&quot;</span><span class=\"string\">input/test</span><span class=\"string\">&quot;</span>)]\ntest_ids = [os.path.splitext(f)[<span class=\"number\">0</span>] <span class=\"keyword\">for</span> f in os.listdir(<span class=\"string\">&quot;</span><span class=\"string\">input/test</span><span class=\"string\">&quot;</span>)]\n\ntta_ds = TTADataset(test_paths, tta_transform)\ntta_loader = DataLoader(tta_ds, batch_size=<span class=\"number\">8</span>, num_workers=<span class=\"number\">8</span>)\n\ntest_preds = []\n<span class=\"keyword\">with</span> torch.no_grad():\n    <span class=\"keyword\">for</span> batch in tqdm(tta_loader, desc=<span class=\"string\">&quot;</span><span class=\"string\">Running TTA</span><span class=\"string\">&quot;</span>):\n        batch = batch.view(-<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">380</span>, <span class=\"number\">380</span>).to(device)\n        outputs = model(batch)\n        outputs = outputs.view(batch.size(<span class=\"number\">0</span>) // <span class=\"number\">10</span>, <span class=\"number\">10</span>, -<span class=\"number\">1</span>)\n        probs = torch.softmax(outputs, dim=<span class=\"number\">2</span>).mean(dim=<span class=\"number\">1</span>)\n        test_preds.append(probs.cpu().numpy())\n\ntest_preds = np.concatenate(test_preds)\nsubmission = pd.DataFrame(test_preds, columns=le.classes_)\nsubmission.insert(<span class=\"number\">0</span>, <span class=\"string\">&quot;</span><span class=\"string\">id</span><span class=\"string\">&quot;</span>, test_ids)\nos.makedirs(<span class=\"string\">&quot;</span><span class=\"string\">submission</span><span class=\"string\">&quot;</span>, exist_ok=<span class=\"keyword\">True</span>)\nsubmission.to_csv(<span class=\"string\">&quot;</span><span class=\"string\">submission/submission.csv</span><span class=\"string\">&quot;</span>, index=<span class=\"keyword\">False</span>)\n"
}