{
    "title": "hms-harmful-brain-activity-classification",
    "steps": [
        {
            "text": "<span class='prompt'>ml-master@ai4ai:~$</span> python ml_master.py --task hms-harmful-brain-activity-classification --time-limit 12h",
            "delay": 200
        },
        {
            "text": "<span class='info'>[INFO]</span>: Starting run \"hms-harmful-brain-activity-classification\"",
            "delay": 200
        },
        {
            "text": "<span class='prompt'>ml-master@ai4ai:~$</span> ",
            "delay": 200
        }
    ],
    "code": "<span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd\n<span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n<span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> train_test_split\n<span class=\"keyword\">from</span> sklearn.multioutput <span class=\"keyword\">import</span> MultiOutputRegressor\n<span class=\"keyword\">import</span> lightgbm <span class=\"keyword\">as</span> lgb\n<span class=\"keyword\">import</span> os\n\n<span class=\"comment\"># Load data</span>\ntrain_df = pd.read_csv(<span class=\"string\">&quot;</span><span class=\"string\">input/train.csv</span><span class=\"string\">&quot;</span>)\ntest_df = pd.read_csv(<span class=\"string\">&quot;</span><span class=\"string\">input/test.csv</span><span class=\"string\">&quot;</span>)\n\n<span class=\"comment\"># Normalize votes to probabilities</span>\nvotes = [<span class=\"string\">&quot;</span><span class=\"string\">seizure_vote</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">lpd_vote</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">gpd_vote</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">lrda_vote</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">grda_vote</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">other_vote</span><span class=\"string\">&quot;</span>]\ntrain_df[votes] = train_df[votes].div(train_df[votes].sum(axis=<span class=\"number\">1</span>), axis=<span class=\"number\">0</span>)\n\n\n<span class=\"keyword\">def</span> <span class=\"function\">process_spectrogram</span>(spectrogram_id, split=<span class=\"string\">&quot;</span><span class=\"string\">train</span><span class=\"string\">&quot;</span>):\n    <span class=\"keyword\">try</span>:\n        path = <span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">input/</span><span class=\"string\">{</span>split<span class=\"string\">}</span><span class=\"string\">_spectrograms/</span><span class=\"string\">{</span>spectrogram_id<span class=\"string\">}</span><span class=\"string\">.parquet</span><span class=\"string\">&quot;</span>\n        df = pd.read_parquet(path)\n        mid = len(df) // <span class=\"number\">2</span>\n        features = df.iloc[mid - <span class=\"number\">5</span> : mid + <span class=\"number\">5</span>].mean().to_dict()\n        <span class=\"keyword\">return</span> features\n    <span class=\"keyword\">except</span>:\n        <span class=\"keyword\">return</span> {\n            col: <span class=\"number\">0</span>\n            <span class=\"keyword\">for</span> col in pd.read_parquet(\n                <span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">input/train_spectrograms/1000086677.parquet</span><span class=\"string\">&quot;</span>\n            ).columns\n        }\n\n\n<span class=\"comment\"># Feature extraction</span>\nprint(<span class=\"string\">&quot;</span><span class=\"string\">Processing training data...</span><span class=\"string\">&quot;</span>)\ntrain_features = [\n    process_spectrogram(sid, <span class=\"string\">&quot;</span><span class=\"string\">train</span><span class=\"string\">&quot;</span>) <span class=\"keyword\">for</span> sid in train_df[<span class=\"string\">&quot;</span><span class=\"string\">spectrogram_id</span><span class=\"string\">&quot;</span>]\n]\nX = pd.DataFrame(train_features).fillna(<span class=\"number\">0</span>)\ny = train_df[votes]\n\n<span class=\"comment\"># Train-validation split</span>\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=<span class=\"number\">0.2</span>, random_state=<span class=\"number\">42</span>)\n\n<span class=\"comment\"># Train model</span>\nmodel = MultiOutputRegressor(\n    lgb.LGBMRegressor(\n        objective=<span class=\"string\">&quot;</span><span class=\"string\">regression</span><span class=\"string\">&quot;</span>,\n        n_estimators=<span class=\"number\">200</span>,\n        random_state=<span class=\"number\">42</span>,\n        num_leaves=<span class=\"number\">31</span>,\n        learning_rate=<span class=\"number\">0.05</span>,\n    )\n)\nmodel.fit(X_train, y_train)\n\n<span class=\"comment\"># Validate</span>\nval_preds = pd.DataFrame(model.predict(X_val), columns=votes)\nval_preds = val_preds.div(val_preds.sum(axis=<span class=\"number\">1</span>), axis=<span class=\"number\">0</span>)\nkl = (y_val * (np.log(y_val + <span class=\"number\">1e-10</span>) - np.log(val_preds + <span class=\"number\">1e-10</span>))).sum(axis=<span class=\"number\">1</span>).mean()\nprint(<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">Validation KL Divergence: </span><span class=\"string\">{</span>kl<span class=\"string\">:</span><span class=\"string\">.4f</span><span class=\"string\">}</span><span class=\"string\">&quot;</span>)\n\n<span class=\"comment\"># Process test data</span>\nprint(<span class=\"string\">&quot;</span><span class=\"string\">Processing test data...</span><span class=\"string\">&quot;</span>)\ntest_features = [process_spectrogram(sid, <span class=\"string\">&quot;</span><span class=\"string\">test</span><span class=\"string\">&quot;</span>) <span class=\"keyword\">for</span> sid in test_df[<span class=\"string\">&quot;</span><span class=\"string\">spectrogram_id</span><span class=\"string\">&quot;</span>]]\nX_test = pd.DataFrame(test_features).fillna(<span class=\"number\">0</span>)\n\n<span class=\"comment\"># Predict and format submission</span>\ntest_preds = pd.DataFrame(model.predict(X_test), columns=votes)\ntest_preds = test_preds.div(test_preds.sum(axis=<span class=\"number\">1</span>), axis=<span class=\"number\">0</span>)\nsubmission = test_df[[<span class=\"string\">&quot;</span><span class=\"string\">eeg_id</span><span class=\"string\">&quot;</span>]].join(test_preds)\n\nos.makedirs(<span class=\"string\">&quot;</span><span class=\"string\">submission</span><span class=\"string\">&quot;</span>, exist_ok=<span class=\"keyword\">True</span>)\nsubmission.to_csv(<span class=\"string\">&quot;</span><span class=\"string\">submission/submission.csv</span><span class=\"string\">&quot;</span>, index=<span class=\"keyword\">False</span>)\nprint(<span class=\"string\">&quot;</span><span class=\"string\">Submission saved!</span><span class=\"string\">&quot;</span>)\n"
}