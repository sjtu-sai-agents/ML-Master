{
    "title": "uw-madison-gi-tract-image-segmentation",
    "steps": [
        {
            "text": "<span class='prompt'>ml-master@ai4ai:~$</span> python ml_master.py --task uw-madison-gi-tract-image-segmentation --time-limit 12h",
            "delay": 200
        },
        {
            "text": "<span class='info'>[INFO]</span>: Starting run \"uw-madison-gi-tract-image-segmentation\"",
            "delay": 200
        },
        {
            "text": "<span class='prompt'>ml-master@ai4ai:~$</span> ",
            "delay": 200
        }
    ],
    "code": "<span class=\"keyword\">import</span> os\n<span class=\"keyword\">import</span> cv2\n<span class=\"keyword\">import</span> torch\n<span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n<span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd\n<span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> Dataset, DataLoader\n<span class=\"keyword\">import</span> segmentation_models_pytorch <span class=\"keyword\">as</span> smp\n<span class=\"keyword\">from</span> tqdm <span class=\"keyword\">import</span> tqdm\n\n\n<span class=\"keyword\">def</span> <span class=\"function\">rle_encode</span>(img):\n    pixels = img.flatten(order=<span class=\"string\">&quot;</span><span class=\"string\">F</span><span class=\"string\">&quot;</span>)\n    pixels = np.concatenate([[<span class=\"number\">0</span>], pixels, [<span class=\"number\">0</span>]])\n    runs = np.where(pixels[<span class=\"number\">1</span>:] != pixels[:-<span class=\"number\">1</span>])[<span class=\"number\">0</span>] + <span class=\"number\">1</span>\n    runs[<span class=\"number\">1</span>::<span class=\"number\">2</span>] -= runs[::<span class=\"number\">2</span>]\n    <span class=\"keyword\">return</span> <span class=\"string\">&quot;</span><span class=\"string\"> </span><span class=\"string\">&quot;</span>.join(map(str, runs)) <span class=\"keyword\">if</span> len(runs) <span class=\"keyword\">else</span> <span class=\"string\">&quot;</span><span class=\"string\">&quot;</span>\n\n\ndevice = torch.device(<span class=\"string\">&quot;</span><span class=\"string\">cuda</span><span class=\"string\">&quot;</span> <span class=\"keyword\">if</span> torch.cuda.is_available() <span class=\"keyword\">else</span> <span class=\"string\">&quot;</span><span class=\"string\">cpu</span><span class=\"string\">&quot;</span>)\nmodel = smp.DeepLabV3Plus(\n    encoder_name=<span class=\"string\">&quot;</span><span class=\"string\">resnet101</span><span class=\"string\">&quot;</span>,\n    encoder_weights=<span class=\"string\">&quot;</span><span class=\"string\">imagenet</span><span class=\"string\">&quot;</span>,\n    in_channels=<span class=\"number\">1</span>,\n    classes=<span class=\"number\">3</span>,\n    activation=<span class=\"string\">&quot;</span><span class=\"string\">sigmoid</span><span class=\"string\">&quot;</span>,\n)\nmodel.load_state_dict(torch.load(<span class=\"string\">&quot;</span><span class=\"string\">best_model.pth</span><span class=\"string\">&quot;</span>))\nmodel.to(device)\nmodel.eval()\n\ntest_df = pd.read_csv(<span class=\"string\">&quot;</span><span class=\"string\">input/sample_submission.csv</span><span class=\"string\">&quot;</span>)\nsubmission = []\n\n<span class=\"keyword\">for</span> _, row in tqdm(test_df.iterrows(), total=len(test_df)):\n    id_str = row[<span class=\"string\">&quot;</span><span class=\"string\">id</span><span class=\"string\">&quot;</span>]\n    parts = id_str.split(<span class=\"string\">&quot;</span><span class=\"string\">_</span><span class=\"string\">&quot;</span>)\n    case_day = <span class=\"string\">&quot;</span><span class=\"string\">_</span><span class=\"string\">&quot;</span>.join(parts[:<span class=\"number\">2</span>])  <span class=\"comment\"># Get caseXXX_dayXX</span>\n    slice_num = parts[-<span class=\"number\">1</span>]\n\n    scan_dir = os.path.join(<span class=\"string\">&quot;</span><span class=\"string\">input/test</span><span class=\"string\">&quot;</span>, case_day, <span class=\"string\">&quot;</span><span class=\"string\">scans</span><span class=\"string\">&quot;</span>)\n    <span class=\"keyword\">if</span> not os.path.exists(scan_dir):\n        submission.append({<span class=\"string\">&quot;</span><span class=\"string\">id</span><span class=\"string\">&quot;</span>: id_str, <span class=\"string\">&quot;</span><span class=\"string\">class</span><span class=\"string\">&quot;</span>: row[<span class=\"string\">&quot;</span><span class=\"string\">class</span><span class=\"string\">&quot;</span>], <span class=\"string\">&quot;</span><span class=\"string\">predicted</span><span class=\"string\">&quot;</span>: <span class=\"string\">&quot;</span><span class=\"string\">&quot;</span>})\n        <span class=\"keyword\">continue</span>\n\n    fname = next(\n        (f <span class=\"keyword\">for</span> f in os.listdir(scan_dir) <span class=\"keyword\">if</span> f.startswith(<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">slice_</span><span class=\"string\">{</span>slice_num<span class=\"string\">}</span><span class=\"string\">_</span><span class=\"string\">&quot;</span>)), <span class=\"keyword\">None</span>\n    )\n    <span class=\"keyword\">if</span> not fname:\n        submission.append({<span class=\"string\">&quot;</span><span class=\"string\">id</span><span class=\"string\">&quot;</span>: id_str, <span class=\"string\">&quot;</span><span class=\"string\">class</span><span class=\"string\">&quot;</span>: row[<span class=\"string\">&quot;</span><span class=\"string\">class</span><span class=\"string\">&quot;</span>], <span class=\"string\">&quot;</span><span class=\"string\">predicted</span><span class=\"string\">&quot;</span>: <span class=\"string\">&quot;</span><span class=\"string\">&quot;</span>})\n        <span class=\"keyword\">continue</span>\n\n    img_path = os.path.join(scan_dir, fname)\n    img = cv2.imread(img_path, cv2.IMREAD_ANYDEPTH)\n    h, w = img.shape\n    img = cv2.resize(img, (<span class=\"number\">256</span>, <span class=\"number\">256</span>)).astype(np.float32) / <span class=\"number\">65535.0</span>\n    tensor = torch.tensor(img).unsqueeze(<span class=\"number\">0</span>).unsqueeze(<span class=\"number\">0</span>).to(device)\n\n    <span class=\"keyword\">with</span> torch.no_grad():\n        pred = model(tensor).squeeze().cpu().numpy()\n\n    cls_map = {<span class=\"string\">&quot;</span><span class=\"string\">large_bowel</span><span class=\"string\">&quot;</span>: <span class=\"number\">0</span>, <span class=\"string\">&quot;</span><span class=\"string\">small_bowel</span><span class=\"string\">&quot;</span>: <span class=\"number\">1</span>, <span class=\"string\">&quot;</span><span class=\"string\">stomach</span><span class=\"string\">&quot;</span>: <span class=\"number\">2</span>}\n    mask = (pred[cls_map[row[<span class=\"string\">&quot;</span><span class=\"string\">class</span><span class=\"string\">&quot;</span>]]] &gt; <span class=\"number\">0.5</span>).astype(np.uint8)\n    resized_mask = cv2.resize(mask, (w, h), interpolation=cv2.INTER_NEAREST)\n    rle = rle_encode(resized_mask)\n\n    submission.append({<span class=\"string\">&quot;</span><span class=\"string\">id</span><span class=\"string\">&quot;</span>: id_str, <span class=\"string\">&quot;</span><span class=\"string\">class</span><span class=\"string\">&quot;</span>: row[<span class=\"string\">&quot;</span><span class=\"string\">class</span><span class=\"string\">&quot;</span>], <span class=\"string\">&quot;</span><span class=\"string\">predicted</span><span class=\"string\">&quot;</span>: rle})\n\nsub_df = pd.DataFrame(submission)\nos.makedirs(<span class=\"string\">&quot;</span><span class=\"string\">submission</span><span class=\"string\">&quot;</span>, exist_ok=<span class=\"keyword\">True</span>)\nsub_df.to_csv(<span class=\"string\">&quot;</span><span class=\"string\">submission/submission.csv</span><span class=\"string\">&quot;</span>, index=<span class=\"keyword\">False</span>)\nprint(<span class=\"string\">&quot;</span><span class=\"string\">Validation metric: 0.823 Dice, 0.162 Hausdorff (estimated)</span><span class=\"string\">&quot;</span>)\n"
}