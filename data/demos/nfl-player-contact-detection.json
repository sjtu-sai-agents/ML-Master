{
    "title": "nfl-player-contact-detection",
    "steps": [
        {
            "text": "<span class='prompt'>ml-master@ai4ai:~$</span> python ml_master.py --task nfl-player-contact-detection --time-limit 12h",
            "delay": 200
        },
        {
            "text": "<span class='info'>[INFO]</span>: Starting run \"nfl-player-contact-detection\"",
            "delay": 200
        },
        {
            "text": "<span class='prompt'>ml-master@ai4ai:~$</span> ",
            "delay": 200
        }
    ],
    "code": "<span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd\n<span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n<span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> GroupKFold\n<span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> matthews_corrcoef\n<span class=\"keyword\">import</span> xgboost <span class=\"keyword\">as</span> xgb\n\n<span class=\"comment\"># Load data</span>\ntrain_labels = pd.read_csv(<span class=\"string\">&quot;</span><span class=\"string\">input/train_labels.csv</span><span class=\"string\">&quot;</span>)\ntrain_tracking = pd.read_csv(<span class=\"string\">&quot;</span><span class=\"string\">input/train_player_tracking.csv</span><span class=\"string\">&quot;</span>)\ntest_tracking = pd.read_csv(<span class=\"string\">&quot;</span><span class=\"string\">input/test_player_tracking.csv</span><span class=\"string\">&quot;</span>)\nsample_sub = pd.read_csv(<span class=\"string\">&quot;</span><span class=\"string\">input/sample_submission.csv</span><span class=\"string\">&quot;</span>)\n\n\n<span class=\"comment\"># Process contact IDs with proper type conversion</span>\n<span class=\"keyword\">def</span> <span class=\"function\">process_contact_id</span>(df):\n    split = df[<span class=\"string\">&quot;</span><span class=\"string\">contact_id</span><span class=\"string\">&quot;</span>].str.split(<span class=\"string\">&quot;</span><span class=\"string\">_</span><span class=\"string\">&quot;</span>, n=<span class=\"number\">4</span>, expand=<span class=\"keyword\">True</span>)\n    df[<span class=\"string\">&quot;</span><span class=\"string\">game_play</span><span class=\"string\">&quot;</span>] = split[<span class=\"number\">0</span>] + <span class=\"string\">&quot;</span><span class=\"string\">_</span><span class=\"string\">&quot;</span> + split[<span class=\"number\">1</span>]\n    df[<span class=\"string\">&quot;</span><span class=\"string\">step</span><span class=\"string\">&quot;</span>] = split[<span class=\"number\">2</span>].astype(int)\n    df[<span class=\"string\">&quot;</span><span class=\"string\">player1</span><span class=\"string\">&quot;</span>] = split[<span class=\"number\">3</span>].astype(int)\n    df[<span class=\"string\">&quot;</span><span class=\"string\">player2</span><span class=\"string\">&quot;</span>] = split[<span class=\"number\">4</span>].apply(<span class=\"keyword\">lambda</span> x: int(x) <span class=\"keyword\">if</span> x != <span class=\"string\">&quot;</span><span class=\"string\">G</span><span class=\"string\">&quot;</span> <span class=\"keyword\">else</span> x)\n    <span class=\"keyword\">return</span> df\n\n\ntrain_labels = process_contact_id(train_labels)\ntrain_labels[<span class=\"string\">&quot;</span><span class=\"string\">is_ground</span><span class=\"string\">&quot;</span>] = (train_labels[<span class=\"string\">&quot;</span><span class=\"string\">player2</span><span class=\"string\">&quot;</span>] == <span class=\"string\">&quot;</span><span class=\"string\">G</span><span class=\"string\">&quot;</span>).astype(int)\n\n\n<span class=\"comment\"># Feature merging with fixed data types</span>\n<span class=\"keyword\">def</span> <span class=\"function\">merge_features</span>(labels_df, tracking_df):\n    <span class=\"comment\"># Player1 features</span>\n    merged = labels_df.merge(\n        tracking_df.add_suffix(<span class=\"string\">&quot;</span><span class=\"string\">_1</span><span class=\"string\">&quot;</span>),\n        how=<span class=\"string\">&quot;</span><span class=\"string\">left</span><span class=\"string\">&quot;</span>,\n        left_on=[<span class=\"string\">&quot;</span><span class=\"string\">game_play</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">step</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">player1</span><span class=\"string\">&quot;</span>],\n        right_on=[<span class=\"string\">&quot;</span><span class=\"string\">game_play_1</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">step_1</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">nfl_player_id_1</span><span class=\"string\">&quot;</span>],\n    )\n\n    <span class=\"comment\"># Player2 features for non-ground</span>\n    merged_pp = merged[merged[<span class=\"string\">&quot;</span><span class=\"string\">is_ground</span><span class=\"string\">&quot;</span>] == <span class=\"number\">0</span>].copy()\n    merged_pp = merged_pp.merge(\n        tracking_df.add_suffix(<span class=\"string\">&quot;</span><span class=\"string\">_2</span><span class=\"string\">&quot;</span>),\n        how=<span class=\"string\">&quot;</span><span class=\"string\">left</span><span class=\"string\">&quot;</span>,\n        left_on=[<span class=\"string\">&quot;</span><span class=\"string\">game_play</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">step</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">player2</span><span class=\"string\">&quot;</span>],\n        right_on=[<span class=\"string\">&quot;</span><span class=\"string\">game_play_2</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">step_2</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">nfl_player_id_2</span><span class=\"string\">&quot;</span>],\n    )\n\n    <span class=\"comment\"># Ground contact features</span>\n    merged_g = merged[merged[<span class=\"string\">&quot;</span><span class=\"string\">is_ground</span><span class=\"string\">&quot;</span>] == <span class=\"number\">1</span>].copy()\n\n    <span class=\"comment\"># Feature engineering</span>\n    merged_pp[<span class=\"string\">&quot;</span><span class=\"string\">distance</span><span class=\"string\">&quot;</span>] = np.sqrt(\n        (merged_pp[<span class=\"string\">&quot;</span><span class=\"string\">x_position_1</span><span class=\"string\">&quot;</span>] - merged_pp[<span class=\"string\">&quot;</span><span class=\"string\">x_position_2</span><span class=\"string\">&quot;</span>]) ** <span class=\"number\">2</span>\n        + (merged_pp[<span class=\"string\">&quot;</span><span class=\"string\">y_position_1</span><span class=\"string\">&quot;</span>] - merged_pp[<span class=\"string\">&quot;</span><span class=\"string\">y_position_2</span><span class=\"string\">&quot;</span>]) ** <span class=\"number\">2</span>\n    )\n    merged_pp[<span class=\"string\">&quot;</span><span class=\"string\">speed_diff</span><span class=\"string\">&quot;</span>] = merged_pp[<span class=\"string\">&quot;</span><span class=\"string\">speed_1</span><span class=\"string\">&quot;</span>] - merged_pp[<span class=\"string\">&quot;</span><span class=\"string\">speed_2</span><span class=\"string\">&quot;</span>]\n    merged_pp[<span class=\"string\">&quot;</span><span class=\"string\">accel_diff</span><span class=\"string\">&quot;</span>] = merged_pp[<span class=\"string\">&quot;</span><span class=\"string\">acceleration_1</span><span class=\"string\">&quot;</span>] - merged_pp[<span class=\"string\">&quot;</span><span class=\"string\">acceleration_2</span><span class=\"string\">&quot;</span>]\n\n    merged_g[<span class=\"string\">&quot;</span><span class=\"string\">speed</span><span class=\"string\">&quot;</span>] = merged_g[<span class=\"string\">&quot;</span><span class=\"string\">speed_1</span><span class=\"string\">&quot;</span>]\n    merged_g[<span class=\"string\">&quot;</span><span class=\"string\">accel</span><span class=\"string\">&quot;</span>] = merged_g[<span class=\"string\">&quot;</span><span class=\"string\">acceleration_1</span><span class=\"string\">&quot;</span>]\n    merged_g[<span class=\"string\">&quot;</span><span class=\"string\">orientation</span><span class=\"string\">&quot;</span>] = merged_g[<span class=\"string\">&quot;</span><span class=\"string\">orientation_1</span><span class=\"string\">&quot;</span>]\n    features_g = merged_g[[<span class=\"string\">&quot;</span><span class=\"string\">speed</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">accel</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">orientation</span><span class=\"string\">&quot;</span>]]\n    features_g.columns = [<span class=\"string\">&quot;</span><span class=\"string\">distance</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">speed_diff</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">accel_diff</span><span class=\"string\">&quot;</span>]\n\n    <span class=\"keyword\">return</span> pd.concat(\n        [merged_pp[[<span class=\"string\">&quot;</span><span class=\"string\">distance</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">speed_diff</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">accel_diff</span><span class=\"string\">&quot;</span>]], features_g]\n    ), pd.concat([merged_pp[<span class=\"string\">&quot;</span><span class=\"string\">contact</span><span class=\"string\">&quot;</span>], merged_g[<span class=\"string\">&quot;</span><span class=\"string\">contact</span><span class=\"string\">&quot;</span>]])\n\n\nX, y = merge_features(train_labels, train_tracking)\n\n<span class=\"comment\"># Temporal validation</span>\ngames = train_labels[<span class=\"string\">&quot;</span><span class=\"string\">game_play</span><span class=\"string\">&quot;</span>].unique()\ntrain_games = games[: int(len(games) * <span class=\"number\">0.8</span>)]\nval_mask = train_labels[<span class=\"string\">&quot;</span><span class=\"string\">game_play</span><span class=\"string\">&quot;</span>].isin(train_games)\n\nX_train, X_val = X[val_mask], X[~val_mask]\ny_train, y_val = y[val_mask], y[~val_mask]\n\n<span class=\"comment\"># Model training</span>\nmodel = xgb.XGBClassifier(\n    objective=<span class=\"string\">&quot;</span><span class=\"string\">binary:logistic</span><span class=\"string\">&quot;</span>,\n    n_estimators=<span class=\"number\">1000</span>,\n    learning_rate=<span class=\"number\">0.1</span>,\n    max_depth=<span class=\"number\">7</span>,\n    subsample=<span class=\"number\">0.8</span>,\n    colsample_bytree=<span class=\"number\">0.8</span>,\n    eval_metric=<span class=\"string\">&quot;</span><span class=\"string\">logloss</span><span class=\"string\">&quot;</span>,\n)\nmodel.fit(\n    X_train, y_train, eval_set=[(X_val, y_val)], early_stopping_rounds=<span class=\"number\">20</span>, verbose=<span class=\"keyword\">False</span>\n)\n\n<span class=\"comment\"># Validation metric</span>\nval_pred = model.predict(X_val)\nprint(<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">Validation MCC: </span><span class=\"string\">{</span>matthews_corrcoef(y_val, val_pred)<span class=\"string\">:</span><span class=\"string\">.4f</span><span class=\"string\">}</span><span class=\"string\">&quot;</span>)\n\n<span class=\"comment\"># Generate submission</span>\ntest_df = process_contact_id(sample_sub)\ntest_df[<span class=\"string\">&quot;</span><span class=\"string\">is_ground</span><span class=\"string\">&quot;</span>] = (test_df[<span class=\"string\">&quot;</span><span class=\"string\">player2</span><span class=\"string\">&quot;</span>] == <span class=\"string\">&quot;</span><span class=\"string\">G</span><span class=\"string\">&quot;</span>).astype(int)\nX_test, _ = merge_features(test_df, test_tracking)\ntest_df[<span class=\"string\">&quot;</span><span class=\"string\">contact</span><span class=\"string\">&quot;</span>] = model.predict(X_test)\ntest_df[[<span class=\"string\">&quot;</span><span class=\"string\">contact_id</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">contact</span><span class=\"string\">&quot;</span>]].to_csv(<span class=\"string\">&quot;</span><span class=\"string\">submission/submission.csv</span><span class=\"string\">&quot;</span>, index=<span class=\"keyword\">False</span>)\n"
}