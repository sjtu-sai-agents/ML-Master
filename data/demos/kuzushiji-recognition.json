{
    "title": "kuzushiji-recognition",
    "steps": [
        {
            "text": "<span class='prompt'>ml-master@ai4ai:~$</span> python ml_master.py --task kuzushiji-recognition --time-limit 12h",
            "delay": 200
        },
        {
            "text": "<span class='info'>[INFO]</span>: Starting run \"kuzushiji-recognition\"",
            "delay": 200
        },
        {
            "text": "<span class='prompt'>ml-master@ai4ai:~$</span> ",
            "delay": 200
        }
    ],
    "code": "<span class=\"keyword\">import</span> os\n<span class=\"keyword\">import</span> torch\n<span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> Dataset, DataLoader\n<span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd\n<span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image\n<span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n<span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> train_test_split\n<span class=\"keyword\">import</span> torchvision\n<span class=\"keyword\">from</span> torchvision.models.detection <span class=\"keyword\">import</span> fasterrcnn_resnet50_fpn\n<span class=\"keyword\">from</span> torchvision.models.detection.faster_rcnn <span class=\"keyword\">import</span> FastRCNNPredictor\n<span class=\"keyword\">from</span> torchvision.transforms <span class=\"keyword\">import</span> v2 <span class=\"keyword\">as</span> T\n\n\n<span class=\"comment\"># Data augmentation transform for training</span>\n<span class=\"keyword\">def</span> <span class=\"function\">train_transform</span>(img, boxes):\n    <span class=\"keyword\">if</span> torch.rand(<span class=\"number\">1</span>) &lt; <span class=\"number\">0.5</span>:  <span class=\"comment\"># Horizontal flip</span>\n        img = T.functional.hflip(img)\n        width = img.shape[-<span class=\"number\">1</span>]\n        boxes[:, [<span class=\"number\">0</span>, <span class=\"number\">2</span>]] = width - boxes[:, [<span class=\"number\">2</span>, <span class=\"number\">0</span>]]\n    <span class=\"keyword\">return</span> img, boxes\n\n\n<span class=\"keyword\">class</span> <span class=\"class\">KuzushijiDataset</span>(Dataset):\n    <span class=\"keyword\">def</span> <span class=\"function\">__init__</span>(self, img_ids, annotations, class_map, transform=<span class=\"keyword\">None</span>):\n        self.img_ids = img_ids\n        self.annotations = annotations\n        self.class_map = class_map\n        self.transform = transform\n\n    <span class=\"keyword\">def</span> <span class=\"function\">__len__</span>(self):\n        <span class=\"keyword\">return</span> len(self.img_ids)\n\n    <span class=\"keyword\">def</span> <span class=\"function\">__getitem__</span>(self, idx):\n        img_id = self.img_ids[idx]\n        img = Image.open(<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">input/train_images/</span><span class=\"string\">{</span>img_id<span class=\"string\">}</span><span class=\"string\">.jpg</span><span class=\"string\">&quot;</span>).convert(<span class=\"string\">&quot;</span><span class=\"string\">RGB</span><span class=\"string\">&quot;</span>)\n        orig_size = img.size\n\n        annos = self.annotations.get(img_id, [])\n        boxes = []\n        labels = []\n        <span class=\"keyword\">for</span> u, x, y, w, h in annos:\n            boxes.append([x, y, x + w, y + h])\n            labels.append(self.class_map[u])\n\n        img = T.ToTensor()(img)\n        boxes = torch.tensor(boxes, dtype=torch.float32)\n        labels = torch.tensor(labels, dtype=torch.int64)\n\n        <span class=\"keyword\">if</span> self.transform:\n            img, boxes = self.transform(img, boxes)\n\n        <span class=\"keyword\">return</span> img, {<span class=\"string\">&quot;</span><span class=\"string\">boxes</span><span class=\"string\">&quot;</span>: boxes, <span class=\"string\">&quot;</span><span class=\"string\">labels</span><span class=\"string\">&quot;</span>: labels}, img_id\n\n\n<span class=\"comment\"># Load data</span>\ntrain_df = pd.read_csv(<span class=\"string\">&quot;</span><span class=\"string\">input/train.csv</span><span class=\"string\">&quot;</span>)\nimage_ids = train_df[<span class=\"string\">&quot;</span><span class=\"string\">image_id</span><span class=\"string\">&quot;</span>].tolist()\nall_annotations = {}\n<span class=\"keyword\">for</span> idx, row in train_df.iterrows():\n    labels = row[<span class=\"string\">&quot;</span><span class=\"string\">labels</span><span class=\"string\">&quot;</span>].split()\n    annos = [\n        (labels[i], *map(int, labels[i + <span class=\"number\">1</span> : i + <span class=\"number\">5</span>])) <span class=\"keyword\">for</span> i in range(<span class=\"number\">0</span>, len(labels), <span class=\"number\">5</span>)\n    ]\n    all_annotations[row[<span class=\"string\">&quot;</span><span class=\"string\">image_id</span><span class=\"string\">&quot;</span>]] = annos\n\n<span class=\"comment\"># Create class mapping</span>\nunique_unicodes = sorted({a[<span class=\"number\">0</span>] <span class=\"keyword\">for</span> annos in all_annotations.values() <span class=\"keyword\">for</span> a in annos})\nclass_map = {u: i + <span class=\"number\">1</span> <span class=\"keyword\">for</span> i, u in enumerate(unique_unicodes)}\nnum_classes = len(unique_unicodes)\n\n<span class=\"comment\"># Split data</span>\ntrain_ids, val_ids = train_test_split(image_ids, test_size=<span class=\"number\">0.2</span>, random_state=<span class=\"number\">42</span>)\ntrain_annos = {k: v <span class=\"keyword\">for</span> k, v in all_annotations.items() <span class=\"keyword\">if</span> k in train_ids}\nval_annos = {k: v <span class=\"keyword\">for</span> k, v in all_annotations.items() <span class=\"keyword\">if</span> k in val_ids}\n\n<span class=\"comment\"># Initialize model</span>\ndevice = torch.device(<span class=\"string\">&quot;</span><span class=\"string\">cuda</span><span class=\"string\">&quot;</span> <span class=\"keyword\">if</span> torch.cuda.is_available() <span class=\"keyword\">else</span> <span class=\"string\">&quot;</span><span class=\"string\">cpu</span><span class=\"string\">&quot;</span>)\nmodel = fasterrcnn_resnet50_fpn(pretrained=<span class=\"keyword\">True</span>)\nin_features = model.roi_heads.box_predictor.cls_score.in_features\nmodel.roi_heads.box_predictor = FastRCNNPredictor(in_features, num_classes + <span class=\"number\">1</span>)\nmodel.to(device)\n\n<span class=\"comment\"># Create datasets</span>\ntrain_ds = KuzushijiDataset(train_ids, train_annos, class_map, train_transform)\ntrain_loader = DataLoader(\n    train_ds,\n    batch_size=<span class=\"number\">4</span>,\n    shuffle=<span class=\"keyword\">True</span>,\n    collate_fn=<span class=\"keyword\">lambda</span> x: list(zip(*x)),\n    num_workers=<span class=\"number\">4</span>,\n)\n\n<span class=\"comment\"># Training loop</span>\noptimizer = torch.optim.AdamW(model.parameters(), lr=<span class=\"number\">1e-4</span>)\n<span class=\"keyword\">for</span> epoch in range(<span class=\"number\">5</span>):\n    model.train()\n    total_loss = <span class=\"number\">0</span>\n    <span class=\"keyword\">for</span> images, targets, _ in train_loader:\n        images = [img.to(device) <span class=\"keyword\">for</span> img in images]\n        targets = [{k: v.to(device) <span class=\"keyword\">for</span> k, v in t.items()} <span class=\"keyword\">for</span> t in targets]\n\n        loss_dict = model(images, targets)\n        losses = sum(loss <span class=\"keyword\">for</span> loss in loss_dict.values())\n\n        optimizer.zero_grad()\n        losses.backward()\n        optimizer.step()\n        total_loss += losses.item()\n    print(<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">Epoch </span><span class=\"string\">{</span>epoch+<span class=\"number\">1</span><span class=\"string\">}</span><span class=\"string\"> Loss: </span><span class=\"string\">{</span>total_loss/len(train_loader)<span class=\"string\">:</span><span class=\"string\">.4f</span><span class=\"string\">}</span><span class=\"string\">&quot;</span>)\n\n<span class=\"comment\"># Generate test predictions</span>\ntest_ids = [f.split(<span class=\"string\">&quot;</span><span class=\"string\">.</span><span class=\"string\">&quot;</span>)[<span class=\"number\">0</span>] <span class=\"keyword\">for</span> f in os.listdir(<span class=\"string\">&quot;</span><span class=\"string\">input/test_images</span><span class=\"string\">&quot;</span>)]\nsubmission = []\n\n\n<span class=\"keyword\">class</span> <span class=\"class\">TestDataset</span>(Dataset):\n    <span class=\"keyword\">def</span> <span class=\"function\">__init__</span>(self, img_ids):\n        self.img_ids = img_ids\n\n    <span class=\"keyword\">def</span> <span class=\"function\">__len__</span>(self):\n        <span class=\"keyword\">return</span> len(self.img_ids)\n\n    <span class=\"keyword\">def</span> <span class=\"function\">__getitem__</span>(self, idx):\n        img_id = self.img_ids[idx]\n        img = Image.open(<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">input/test_images/</span><span class=\"string\">{</span>img_id<span class=\"string\">}</span><span class=\"string\">.jpg</span><span class=\"string\">&quot;</span>).convert(<span class=\"string\">&quot;</span><span class=\"string\">RGB</span><span class=\"string\">&quot;</span>)\n        <span class=\"keyword\">return</span> T.ToTensor()(img), img_id\n\n\ntest_loader = DataLoader(\n    TestDataset(test_ids),\n    batch_size=<span class=\"number\">4</span>,\n    collate_fn=<span class=\"keyword\">lambda</span> x: list(zip(*x)),\n    num_workers=<span class=\"number\">4</span>,\n)\n\nmodel.eval()\n<span class=\"keyword\">with</span> torch.no_grad():\n    <span class=\"keyword\">for</span> images, img_ids in test_loader:\n        images = [img.to(device) <span class=\"keyword\">for</span> img in images]\n        outputs = model(images)\n\n        <span class=\"keyword\">for</span> i, output in enumerate(outputs):\n            img_id = img_ids[i]\n            keep = output[<span class=\"string\">&quot;</span><span class=\"string\">scores</span><span class=\"string\">&quot;</span>] &gt; <span class=\"number\">0.5</span>\n            boxes = output[<span class=\"string\">&quot;</span><span class=\"string\">boxes</span><span class=\"string\">&quot;</span>][keep].cpu().numpy()\n            labels = output[<span class=\"string\">&quot;</span><span class=\"string\">labels</span><span class=\"string\">&quot;</span>][keep].cpu().numpy()\n\n            inv_map = {v: k <span class=\"keyword\">for</span> k, v in class_map.items()}\n            points = []\n            <span class=\"keyword\">for</span> b, l in zip(boxes, labels):\n                x_center = int((b[<span class=\"number\">0</span>] + b[<span class=\"number\">2</span>]) / <span class=\"number\">2</span>)\n                y_center = int((b[<span class=\"number\">1</span>] + b[<span class=\"number\">3</span>]) / <span class=\"number\">2</span>)\n                points.append(<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">{</span>inv_map[l]<span class=\"string\">}</span><span class=\"string\"> </span><span class=\"string\">{</span>x_center<span class=\"string\">}</span><span class=\"string\"> </span><span class=\"string\">{</span>y_center<span class=\"string\">}</span><span class=\"string\">&quot;</span>)\n\n            submission.append(\n                {\n                    <span class=\"string\">&quot;</span><span class=\"string\">image_id</span><span class=\"string\">&quot;</span>: img_id,\n                    <span class=\"string\">&quot;</span><span class=\"string\">labels</span><span class=\"string\">&quot;</span>: <span class=\"string\">&quot;</span><span class=\"string\"> </span><span class=\"string\">&quot;</span>.join(points[:<span class=\"number\">1200</span>]) <span class=\"keyword\">if</span> points <span class=\"keyword\">else</span> <span class=\"string\">&quot;</span><span class=\"string\">&quot;</span>,\n                }\n            )\n\n<span class=\"comment\"># Ensure submission directory exists</span>\nos.makedirs(<span class=\"string\">&quot;</span><span class=\"string\">submission</span><span class=\"string\">&quot;</span>, exist_ok=<span class=\"keyword\">True</span>)\nsub_df = pd.DataFrame(submission)\nsub_df.to_csv(<span class=\"string\">&quot;</span><span class=\"string\">submission/submission.csv</span><span class=\"string\">&quot;</span>, index=<span class=\"keyword\">False</span>)\nprint(<span class=\"string\">&quot;</span><span class=\"string\">Submission file saved successfully!</span><span class=\"string\">&quot;</span>)\n"
}