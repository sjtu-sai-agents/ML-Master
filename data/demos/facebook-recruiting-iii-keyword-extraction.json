{
    "title": "facebook-recruiting-iii-keyword-extraction",
    "steps": [
        {
            "text": "<span class='prompt'>ml-master@ai4ai:~$</span> python ml_master.py --task facebook-recruiting-iii-keyword-extraction --time-limit 12h",
            "delay": 200
        },
        {
            "text": "<span class='info'>[INFO]</span>: Starting run \"facebook-recruiting-iii-keyword-extraction\"",
            "delay": 200
        },
        {
            "text": "<span class='prompt'>ml-master@ai4ai:~$</span> ",
            "delay": 200
        }
    ],
    "code": "<span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd\n<span class=\"keyword\">import</span> re\n<span class=\"keyword\">import</span> html\n<span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> train_test_split\n<span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> f1_score\n<span class=\"keyword\">from</span> sklearn.preprocessing <span class=\"keyword\">import</span> MultiLabelBinarizer\n<span class=\"keyword\">import</span> fasttext\n\n<span class=\"comment\"># Load and clean training data</span>\ntrain = pd.read_csv(<span class=\"string\">&quot;</span><span class=\"string\">./input/train.csv</span><span class=\"string\">&quot;</span>, usecols=[<span class=\"string\">&quot;</span><span class=\"string\">Title</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">Body</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">Tags</span><span class=\"string\">&quot;</span>])\ntrain[<span class=\"string\">&quot;</span><span class=\"string\">Tags</span><span class=\"string\">&quot;</span>] = train[<span class=\"string\">&quot;</span><span class=\"string\">Tags</span><span class=\"string\">&quot;</span>].fillna(<span class=\"string\">&quot;</span><span class=\"string\">&quot;</span>)\ntrain[<span class=\"string\">&quot;</span><span class=\"string\">Title</span><span class=\"string\">&quot;</span>] = train[<span class=\"string\">&quot;</span><span class=\"string\">Title</span><span class=\"string\">&quot;</span>].fillna(<span class=\"string\">&quot;</span><span class=\"string\">&quot;</span>)\ntrain[<span class=\"string\">&quot;</span><span class=\"string\">Body</span><span class=\"string\">&quot;</span>] = train[<span class=\"string\">&quot;</span><span class=\"string\">Body</span><span class=\"string\">&quot;</span>].fillna(<span class=\"string\">&quot;</span><span class=\"string\">&quot;</span>)\n\n<span class=\"comment\"># Select top tags and filter invalid rows</span>\nall_tags = train[<span class=\"string\">&quot;</span><span class=\"string\">Tags</span><span class=\"string\">&quot;</span>].str.split().explode()\ntop_tags = all_tags.value_counts().head(<span class=\"number\">500</span>).index.tolist()\n\n\n<span class=\"keyword\">def</span> <span class=\"function\">clean_text</span>(text):\n    text = html.unescape(text)\n    text = re.sub(<span class=\"string\">r</span><span class=\"string\">&quot;</span><span class=\"string\">&lt;.*?&gt;</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\"> </span><span class=\"string\">&quot;</span>, text)  <span class=\"comment\"># Fix regex with raw string</span>\n    text = re.sub(<span class=\"string\">r</span><span class=\"string\">&quot;</span><span class=\"string\">\\</span><span class=\"string\">s+</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\"> </span><span class=\"string\">&quot;</span>, text).strip().lower()\n    <span class=\"keyword\">return</span> <span class=\"string\">&quot;</span><span class=\"string\"> </span><span class=\"string\">&quot;</span>.join(text.split()[:<span class=\"number\">1000</span>])\n\n\ntrain[<span class=\"string\">&quot;</span><span class=\"string\">text</span><span class=\"string\">&quot;</span>] = (train[<span class=\"string\">&quot;</span><span class=\"string\">Title</span><span class=\"string\">&quot;</span>] + <span class=\"string\">&quot;</span><span class=\"string\"> </span><span class=\"string\">&quot;</span> + train[<span class=\"string\">&quot;</span><span class=\"string\">Body</span><span class=\"string\">&quot;</span>]).apply(clean_text)\ntrain[<span class=\"string\">&quot;</span><span class=\"string\">Tags</span><span class=\"string\">&quot;</span>] = train[<span class=\"string\">&quot;</span><span class=\"string\">Tags</span><span class=\"string\">&quot;</span>].apply(\n    <span class=\"keyword\">lambda</span> x: <span class=\"string\">&quot;</span><span class=\"string\"> </span><span class=\"string\">&quot;</span>.join(tag <span class=\"keyword\">for</span> tag in x.split() <span class=\"keyword\">if</span> tag in top_tags)\n)\ntrain = train[train[<span class=\"string\">&quot;</span><span class=\"string\">Tags</span><span class=\"string\">&quot;</span>] != <span class=\"string\">&quot;</span><span class=\"string\">&quot;</span>]  <span class=\"comment\"># Remove rows with no tags</span>\n\n<span class=\"comment\"># Format for FastText and split data</span>\ntrain_ft = train.apply(\n    <span class=\"keyword\">lambda</span> row: <span class=\"string\">&quot;</span><span class=\"string\"> </span><span class=\"string\">&quot;</span>.join([<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">__label__</span><span class=\"string\">{</span>tag<span class=\"string\">}</span><span class=\"string\">&quot;</span> <span class=\"keyword\">for</span> tag in row[<span class=\"string\">&quot;</span><span class=\"string\">Tags</span><span class=\"string\">&quot;</span>].split()])\n    + <span class=\"string\">&quot;</span><span class=\"string\"> </span><span class=\"string\">&quot;</span>\n    + row[<span class=\"string\">&quot;</span><span class=\"string\">text</span><span class=\"string\">&quot;</span>],\n    axis=<span class=\"number\">1</span>,\n)\ntrain_data, valid_data = train_test_split(train_ft, test_size=<span class=\"number\">0.2</span>, random_state=<span class=\"number\">42</span>)\n\n<span class=\"comment\"># Save formatted data</span>\ntrain_data.to_csv(<span class=\"string\">&quot;</span><span class=\"string\">fasttext_train.txt</span><span class=\"string\">&quot;</span>, index=<span class=\"keyword\">False</span>, header=<span class=\"keyword\">False</span>)\nvalid_data.to_csv(<span class=\"string\">&quot;</span><span class=\"string\">fasttext_valid.txt</span><span class=\"string\">&quot;</span>, index=<span class=\"keyword\">False</span>, header=<span class=\"keyword\">False</span>)\n\n<span class=\"comment\"># Train model</span>\nmodel = fasttext.train_supervised(\n    input=<span class=\"string\">&quot;</span><span class=\"string\">fasttext_train.txt</span><span class=\"string\">&quot;</span>, lr=<span class=\"number\">0.2</span>, epoch=<span class=\"number\">30</span>, wordNgrams=<span class=\"number\">2</span>, thread=<span class=\"number\">16</span>, verbose=<span class=\"number\">2</span>\n)\n\n<span class=\"comment\"># Validate</span>\nvalid_texts = []\nvalid_true = []\n<span class=\"keyword\">for</span> line in valid_data:\n    parts = line.split()\n    labels = [p[len(<span class=\"string\">&quot;</span><span class=\"string\">__label__</span><span class=\"string\">&quot;</span>) :] <span class=\"keyword\">for</span> p in parts <span class=\"keyword\">if</span> p.startswith(<span class=\"string\">&quot;</span><span class=\"string\">__label__</span><span class=\"string\">&quot;</span>)]\n    valid_true.append(labels)\n    valid_texts.append(<span class=\"string\">&quot;</span><span class=\"string\"> </span><span class=\"string\">&quot;</span>.join(parts[len(labels) :]))\n\npred_labels = [model.predict(text, k=<span class=\"number\">5</span>)[<span class=\"number\">0</span>] <span class=\"keyword\">for</span> text in valid_texts]\npred_labels = [[l.replace(<span class=\"string\">&quot;</span><span class=\"string\">__label__</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">&quot;</span>) <span class=\"keyword\">for</span> l in lst] <span class=\"keyword\">for</span> lst in pred_labels]\n\nmlb = MultiLabelBinarizer(classes=top_tags)\ny_true = mlb.fit_transform(valid_true)\ny_pred = mlb.transform(pred_labels)\nf1 = f1_score(y_true, y_pred, average=<span class=\"string\">&quot;</span><span class=\"string\">samples</span><span class=\"string\">&quot;</span>)\nprint(<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">Validation F1-Score: </span><span class=\"string\">{</span>f1<span class=\"string\">:</span><span class=\"string\">.4f</span><span class=\"string\">}</span><span class=\"string\">&quot;</span>)\n\n<span class=\"comment\"># Predict test set</span>\ntest = pd.read_csv(<span class=\"string\">&quot;</span><span class=\"string\">./input/test.csv</span><span class=\"string\">&quot;</span>, usecols=[<span class=\"string\">&quot;</span><span class=\"string\">Id</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">Title</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">Body</span><span class=\"string\">&quot;</span>])\ntest[<span class=\"string\">&quot;</span><span class=\"string\">Title</span><span class=\"string\">&quot;</span>] = test[<span class=\"string\">&quot;</span><span class=\"string\">Title</span><span class=\"string\">&quot;</span>].fillna(<span class=\"string\">&quot;</span><span class=\"string\">&quot;</span>)\ntest[<span class=\"string\">&quot;</span><span class=\"string\">Body</span><span class=\"string\">&quot;</span>] = test[<span class=\"string\">&quot;</span><span class=\"string\">Body</span><span class=\"string\">&quot;</span>].fillna(<span class=\"string\">&quot;</span><span class=\"string\">&quot;</span>)\ntest[<span class=\"string\">&quot;</span><span class=\"string\">text</span><span class=\"string\">&quot;</span>] = (test[<span class=\"string\">&quot;</span><span class=\"string\">Title</span><span class=\"string\">&quot;</span>] + <span class=\"string\">&quot;</span><span class=\"string\"> </span><span class=\"string\">&quot;</span> + test[<span class=\"string\">&quot;</span><span class=\"string\">Body</span><span class=\"string\">&quot;</span>]).apply(clean_text)\n\nfull_model = fasttext.train_supervised(\n    input=<span class=\"string\">&quot;</span><span class=\"string\">fasttext_train.txt</span><span class=\"string\">&quot;</span>, lr=<span class=\"number\">0.2</span>, epoch=<span class=\"number\">30</span>, wordNgrams=<span class=\"number\">2</span>, thread=<span class=\"number\">16</span>, verbose=<span class=\"number\">2</span>\n)\ntest_preds = [full_model.predict(txt, k=<span class=\"number\">5</span>)[<span class=\"number\">0</span>] <span class=\"keyword\">for</span> txt in test[<span class=\"string\">&quot;</span><span class=\"string\">text</span><span class=\"string\">&quot;</span>]]\ntest[<span class=\"string\">&quot;</span><span class=\"string\">Tags</span><span class=\"string\">&quot;</span>] = [\n    <span class=\"string\">&quot;</span><span class=\"string\"> </span><span class=\"string\">&quot;</span>.join([l.replace(<span class=\"string\">&quot;</span><span class=\"string\">__label__</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">&quot;</span>) <span class=\"keyword\">for</span> l in lst]) <span class=\"keyword\">for</span> lst in test_preds\n]\n\ntest[[<span class=\"string\">&quot;</span><span class=\"string\">Id</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">Tags</span><span class=\"string\">&quot;</span>]].to_csv(<span class=\"string\">&quot;</span><span class=\"string\">./submission/submission.csv</span><span class=\"string\">&quot;</span>, index=<span class=\"keyword\">False</span>)\n"
}