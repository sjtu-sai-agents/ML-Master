{
    "title": "petfinder-pawpularity-score",
    "steps": [
        {
            "text": "<span class='prompt'>ml-master@ai4ai:~$</span> python ml_master.py --task petfinder-pawpularity-score --time-limit 12h",
            "delay": 200
        },
        {
            "text": "<span class='info'>[INFO]</span>: Starting run \"petfinder-pawpularity-score\"",
            "delay": 200
        },
        {
            "text": "<span class='prompt'>ml-master@ai4ai:~$</span> ",
            "delay": 200
        }
    ],
    "code": "<span class=\"keyword\">import</span> os\n<span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd\n<span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n<span class=\"keyword\">import</span> torch\n<span class=\"keyword\">import</span> torchvision.models <span class=\"keyword\">as</span> models\n<span class=\"keyword\">import</span> torchvision.transforms <span class=\"keyword\">as</span> transforms\n<span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image\n<span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> train_test_split\n<span class=\"keyword\">import</span> lightgbm <span class=\"keyword\">as</span> lgb\n\nos.makedirs(<span class=\"string\">&quot;</span><span class=\"string\">./submission</span><span class=\"string\">&quot;</span>, exist_ok=<span class=\"keyword\">True</span>)\n\n<span class=\"comment\"># Load data</span>\ntrain_df = pd.read_csv(<span class=\"string\">&quot;</span><span class=\"string\">./input/train.csv</span><span class=\"string\">&quot;</span>)\ntest_df = pd.read_csv(<span class=\"string\">&quot;</span><span class=\"string\">./input/test.csv</span><span class=\"string\">&quot;</span>)\nmeta_cols = [\n    <span class=\"string\">&quot;</span><span class=\"string\">Subject Focus</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">Eyes</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">Face</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">Near</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">Action</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">Accessory</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">Group</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">Collage</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">Human</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">Occlusion</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">Info</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">Blur</span><span class=\"string\">&quot;</span>,\n]\n\n<span class=\"comment\"># Image feature extraction with EfficientNet-B7</span>\ndevice = torch.device(<span class=\"string\">&quot;</span><span class=\"string\">cuda</span><span class=\"string\">&quot;</span> <span class=\"keyword\">if</span> torch.cuda.is_available() <span class=\"keyword\">else</span> <span class=\"string\">&quot;</span><span class=\"string\">cpu</span><span class=\"string\">&quot;</span>)\nmodel = models.efficientnet_b7(pretrained=<span class=\"keyword\">True</span>)\nmodel = (\n    torch.nn.Sequential(\n        model.features, torch.nn.AdaptiveAvgPool2d(<span class=\"number\">1</span>), torch.nn.Flatten()\n    )\n    .to(device)\n    .eval()\n)\n\npreprocess = transforms.Compose(\n    [\n        transforms.Resize((<span class=\"number\">600</span>, <span class=\"number\">600</span>)),\n        transforms.ToTensor(),\n        transforms.Normalize(mean=[<span class=\"number\">0.485</span>, <span class=\"number\">0.456</span>, <span class=\"number\">0.406</span>], std=[<span class=\"number\">0.229</span>, <span class=\"number\">0.224</span>, <span class=\"number\">0.225</span>]),\n    ]\n)\n\n\n<span class=\"keyword\">def</span> <span class=\"function\">extract_features</span>(df, folder):\n    features = []\n    <span class=\"keyword\">for</span> img_id in df[<span class=\"string\">&quot;</span><span class=\"string\">Id</span><span class=\"string\">&quot;</span>]:\n        img_path = <span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">./input/</span><span class=\"string\">{</span>folder<span class=\"string\">}</span><span class=\"string\">/</span><span class=\"string\">{</span>img_id<span class=\"string\">}</span><span class=\"string\">.jpg</span><span class=\"string\">&quot;</span>\n        <span class=\"keyword\">if</span> not os.path.exists(img_path):\n            <span class=\"keyword\">raise</span> FileNotFoundError(<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">Missing image: </span><span class=\"string\">{</span>img_path<span class=\"string\">}</span><span class=\"string\">&quot;</span>)\n        img = Image.open(img_path).convert(<span class=\"string\">&quot;</span><span class=\"string\">RGB</span><span class=\"string\">&quot;</span>)\n        img_tensor = preprocess(img).unsqueeze(<span class=\"number\">0</span>).to(device)\n        <span class=\"keyword\">with</span> torch.no_grad():\n            feat = model(img_tensor).cpu().numpy()\n        features.append(feat)\n    <span class=\"keyword\">return</span> np.vstack(features)\n\n\n<span class=\"comment\"># Process images and combine with metadata</span>\ntrain_feats = extract_features(train_df, <span class=\"string\">&quot;</span><span class=\"string\">train</span><span class=\"string\">&quot;</span>)\ntest_feats = extract_features(test_df, <span class=\"string\">&quot;</span><span class=\"string\">test</span><span class=\"string\">&quot;</span>)\nX = np.hstack([train_feats, train_df[meta_cols]])\ny = train_df[<span class=\"string\">&quot;</span><span class=\"string\">Pawpularity</span><span class=\"string\">&quot;</span>].values\nX_test = np.hstack([test_feats, test_df[meta_cols]])\n\n<span class=\"comment\"># Train-validation split</span>\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=<span class=\"number\">0.2</span>, random_state=<span class=\"number\">42</span>)\n\n<span class=\"comment\"># LightGBM parameters</span>\nparams = {\n    <span class=\"string\">&quot;</span><span class=\"string\">objective</span><span class=\"string\">&quot;</span>: <span class=\"string\">&quot;</span><span class=\"string\">regression</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">metric</span><span class=\"string\">&quot;</span>: <span class=\"string\">&quot;</span><span class=\"string\">rmse</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">num_leaves</span><span class=\"string\">&quot;</span>: <span class=\"number\">511</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">learning_rate</span><span class=\"string\">&quot;</span>: <span class=\"number\">0.02</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">feature_fraction</span><span class=\"string\">&quot;</span>: <span class=\"number\">0.8</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">max_depth</span><span class=\"string\">&quot;</span>: -<span class=\"number\">1</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">min_data_in_leaf</span><span class=\"string\">&quot;</span>: <span class=\"number\">20</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">n_estimators</span><span class=\"string\">&quot;</span>: <span class=\"number\">10000</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">reg_alpha</span><span class=\"string\">&quot;</span>: <span class=\"number\">0.5</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">reg_lambda</span><span class=\"string\">&quot;</span>: <span class=\"number\">0.7</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">random_state</span><span class=\"string\">&quot;</span>: <span class=\"number\">42</span>,\n}\n\nlgb_train = lgb.Dataset(X_train, y_train)\nlgb_val = lgb.Dataset(X_val, y_val)\n\n<span class=\"comment\"># Train with validation-based early stopping</span>\nmodel = lgb.train(\n    params,\n    lgb_train,\n    valid_sets=[lgb_val],\n    callbacks=[lgb.early_stopping(<span class=\"number\">200</span>, verbose=<span class=\"keyword\">False</span>), lgb.log_evaluation(<span class=\"number\">200</span>)],\n)\n\n<span class=\"comment\"># Get best iteration and retrain on full data</span>\nbest_iter = model.best_iteration\nfull_data = lgb.Dataset(X, y)\nfinal_model = lgb.train(params, full_data, num_boost_round=best_iter)\n\n<span class=\"comment\"># Generate predictions</span>\nval_pred = final_model.predict(X_val)\nrmse = np.sqrt(np.mean((val_pred - y_val) ** <span class=\"number\">2</span>))\nprint(<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">Validation RMSE: </span><span class=\"string\">{</span>rmse<span class=\"string\">:</span><span class=\"string\">.4f</span><span class=\"string\">}</span><span class=\"string\">&quot;</span>)\n\ntest_pred = final_model.predict(X_test)\nsubmission = pd.DataFrame({<span class=\"string\">&quot;</span><span class=\"string\">Id</span><span class=\"string\">&quot;</span>: test_df[<span class=\"string\">&quot;</span><span class=\"string\">Id</span><span class=\"string\">&quot;</span>], <span class=\"string\">&quot;</span><span class=\"string\">Pawpularity</span><span class=\"string\">&quot;</span>: test_pred})\nsubmission.to_csv(<span class=\"string\">&quot;</span><span class=\"string\">./submission/submission.csv</span><span class=\"string\">&quot;</span>, index=<span class=\"keyword\">False</span>)\nprint(<span class=\"string\">&quot;</span><span class=\"string\">Submission file saved successfully</span><span class=\"string\">&quot;</span>)\n"
}