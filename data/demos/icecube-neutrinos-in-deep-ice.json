{
    "title": "icecube-neutrinos-in-deep-ice",
    "steps": [
        {
            "text": "<span class='prompt'>ml-master@ai4ai:~$</span> python ml_master.py --task icecube-neutrinos-in-deep-ice --time-limit 12h",
            "delay": 200
        },
        {
            "text": "<span class='info'>[INFO]</span>: Starting run \"icecube-neutrinos-in-deep-ice\"",
            "delay": 200
        },
        {
            "text": "<span class='prompt'>ml-master@ai4ai:~$</span> ",
            "delay": 200
        }
    ],
    "code": "<span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd\n<span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n<span class=\"keyword\">from</span> pathlib <span class=\"keyword\">import</span> Path\n<span class=\"keyword\">import</span> glob\n\n<span class=\"comment\"># Load sensor geometry</span>\nsensor_geo = pd.read_csv(<span class=\"string\">&quot;</span><span class=\"string\">input/sensor_geometry.csv</span><span class=\"string\">&quot;</span>)\n\n\n<span class=\"keyword\">def</span> <span class=\"function\">vector_to_angles</span>(x, y, z):\n    norm = np.sqrt(x**<span class=\"number\">2</span> + y**<span class=\"number\">2</span> + z**<span class=\"number\">2</span>)\n    <span class=\"keyword\">if</span> norm == <span class=\"number\">0</span>:\n        <span class=\"keyword\">return</span> <span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>\n    x, y, z = x / norm, y / norm, z / norm\n    azimuth = np.arctan2(y, x) % (<span class=\"number\">2</span> * np.pi)\n    zenith = np.arccos(z)\n    <span class=\"keyword\">return</span> azimuth, zenith\n\n\n<span class=\"keyword\">def</span> <span class=\"function\">process_event</span>(pulses, n=<span class=\"number\">10</span>):\n    main_pulses = pulses[~pulses[<span class=\"string\">&quot;</span><span class=\"string\">auxiliary</span><span class=\"string\">&quot;</span>]]\n    <span class=\"keyword\">if</span> len(main_pulses) == <span class=\"number\">0</span>:\n        main_pulses = pulses\n    main_pulses = (\n        main_pulses.merge(sensor_geo, on=<span class=\"string\">&quot;</span><span class=\"string\">sensor_id</span><span class=\"string\">&quot;</span>).sort_values(<span class=\"string\">&quot;</span><span class=\"string\">time</span><span class=\"string\">&quot;</span>).head(n)\n    )\n    <span class=\"keyword\">if</span> len(main_pulses) == <span class=\"number\">0</span>:\n        <span class=\"keyword\">return</span> <span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>\n    sum_charge = main_pulses[<span class=\"string\">&quot;</span><span class=\"string\">charge</span><span class=\"string\">&quot;</span>].sum()\n    <span class=\"keyword\">if</span> sum_charge == <span class=\"number\">0</span>:\n        avg_x, avg_y, avg_z = main_pulses[[<span class=\"string\">&quot;</span><span class=\"string\">x</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">y</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">z</span><span class=\"string\">&quot;</span>]].mean()\n    <span class=\"keyword\">else</span>:\n        weights = main_pulses[<span class=\"string\">&quot;</span><span class=\"string\">charge</span><span class=\"string\">&quot;</span>] / sum_charge\n        avg_x = (main_pulses[<span class=\"string\">&quot;</span><span class=\"string\">x</span><span class=\"string\">&quot;</span>] * weights).sum()\n        avg_y = (main_pulses[<span class=\"string\">&quot;</span><span class=\"string\">y</span><span class=\"string\">&quot;</span>] * weights).sum()\n        avg_z = (main_pulses[<span class=\"string\">&quot;</span><span class=\"string\">z</span><span class=\"string\">&quot;</span>] * weights).sum()\n    <span class=\"keyword\">return</span> vector_to_angles(avg_x, avg_y, avg_z)\n\n\n<span class=\"comment\"># Validation on sample training data</span>\ntrain_meta = pd.read_parquet(<span class=\"string\">&quot;</span><span class=\"string\">input/train_meta.parquet</span><span class=\"string\">&quot;</span>).sample(<span class=\"number\">1000</span>, random_state=<span class=\"number\">42</span>)\nval_preds, val_true = [], []\n<span class=\"keyword\">for</span> batch_id in train_meta[<span class=\"string\">&quot;</span><span class=\"string\">batch_id</span><span class=\"string\">&quot;</span>].unique():\n    batch_path = <span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">input/train/batch_</span><span class=\"string\">{</span>batch_id<span class=\"string\">}</span><span class=\"string\">.parquet</span><span class=\"string\">&quot;</span>\n    <span class=\"keyword\">if</span> not Path(batch_path).exists():\n        <span class=\"keyword\">continue</span>\n    batch_pulses = pd.read_parquet(batch_path)\n    <span class=\"keyword\">for</span> event_id in train_meta[train_meta[<span class=\"string\">&quot;</span><span class=\"string\">batch_id</span><span class=\"string\">&quot;</span>] == batch_id][<span class=\"string\">&quot;</span><span class=\"string\">event_id</span><span class=\"string\">&quot;</span>]:\n        <span class=\"keyword\">if</span> event_id not in batch_pulses.index:\n            <span class=\"keyword\">continue</span>\n        az_pred, zen_pred = process_event(batch_pulses.loc[event_id])\n        val_preds.append((az_pred, zen_pred))\n        true = train_meta[train_meta[<span class=\"string\">&quot;</span><span class=\"string\">event_id</span><span class=\"string\">&quot;</span>] == event_id][\n            [<span class=\"string\">&quot;</span><span class=\"string\">azimuth</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">zenith</span><span class=\"string\">&quot;</span>]\n        ].iloc[<span class=\"number\">0</span>]\n        val_true.append((true[<span class=\"string\">&quot;</span><span class=\"string\">azimuth</span><span class=\"string\">&quot;</span>], true[<span class=\"string\">&quot;</span><span class=\"string\">zenith</span><span class=\"string\">&quot;</span>]))\n\n<span class=\"comment\"># Calculate validation metric (FIXED HERE)</span>\nvec_true = np.array(\n    [\n        [np.cos(az) * np.sin(zen), np.sin(az) * np.sin(zen), np.cos(zen)]\n        <span class=\"keyword\">for</span> az, zen in val_true\n    ]\n).T\nvec_pred = np.array(\n    [\n        [np.cos(az) * np.sin(zen), np.sin(az) * np.sin(zen), np.cos(zen)]\n        <span class=\"keyword\">for</span> az, zen in val_preds\n    ]\n).T\ndot_prod = np.sum(vec_true * vec_pred, axis=<span class=\"number\">0</span>)\nmae = np.mean(np.degrees(np.arccos(np.clip(dot_prod, -<span class=\"number\">1</span>, <span class=\"number\">1</span>))))\nprint(<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">Validation MAE: </span><span class=\"string\">{</span>mae<span class=\"string\">:</span><span class=\"string\">.2f</span><span class=\"string\">}</span><span class=\"string\">Â°</span><span class=\"string\">&quot;</span>)\n\n<span class=\"comment\"># Generate test predictions</span>\ntest_meta = pd.read_parquet(<span class=\"string\">&quot;</span><span class=\"string\">input/test_meta.parquet</span><span class=\"string\">&quot;</span>)\nsubmission = []\n<span class=\"keyword\">for</span> batch_path in glob.glob(<span class=\"string\">&quot;</span><span class=\"string\">input/test/batch_*.parquet</span><span class=\"string\">&quot;</span>):\n    batch_id = int(Path(batch_path).stem.split(<span class=\"string\">&quot;</span><span class=\"string\">_</span><span class=\"string\">&quot;</span>)[<span class=\"number\">1</span>])\n    batch_pulses = pd.read_parquet(batch_path)\n    batch_events = test_meta[test_meta[<span class=\"string\">&quot;</span><span class=\"string\">batch_id</span><span class=\"string\">&quot;</span>] == batch_id]\n    <span class=\"keyword\">for</span> event_id in batch_events[<span class=\"string\">&quot;</span><span class=\"string\">event_id</span><span class=\"string\">&quot;</span>]:\n        <span class=\"keyword\">if</span> event_id not in batch_pulses.index:\n            az, zen = <span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>\n        <span class=\"keyword\">else</span>:\n            az, zen = process_event(batch_pulses.loc[event_id])\n        submission.append({<span class=\"string\">&quot;</span><span class=\"string\">event_id</span><span class=\"string\">&quot;</span>: event_id, <span class=\"string\">&quot;</span><span class=\"string\">azimuth</span><span class=\"string\">&quot;</span>: az, <span class=\"string\">&quot;</span><span class=\"string\">zenith</span><span class=\"string\">&quot;</span>: zen})\n\n<span class=\"comment\"># Ensure all test events are included</span>\nsubmission_df = pd.DataFrame(submission)\nmissing_events = set(test_meta[<span class=\"string\">&quot;</span><span class=\"string\">event_id</span><span class=\"string\">&quot;</span>]) - set(submission_df[<span class=\"string\">&quot;</span><span class=\"string\">event_id</span><span class=\"string\">&quot;</span>])\n<span class=\"keyword\">for</span> event_id in missing_events:\n    submission_df = pd.concat(\n        [\n            submission_df,\n            pd.DataFrame([{<span class=\"string\">&quot;</span><span class=\"string\">event_id</span><span class=\"string\">&quot;</span>: event_id, <span class=\"string\">&quot;</span><span class=\"string\">azimuth</span><span class=\"string\">&quot;</span>: <span class=\"number\">0.0</span>, <span class=\"string\">&quot;</span><span class=\"string\">zenith</span><span class=\"string\">&quot;</span>: <span class=\"number\">0.0</span>}]),\n        ],\n        ignore_index=<span class=\"keyword\">True</span>,\n    )\n\nsubmission_df.to_csv(<span class=\"string\">&quot;</span><span class=\"string\">submission/submission.csv</span><span class=\"string\">&quot;</span>, index=<span class=\"keyword\">False</span>)\n"
}