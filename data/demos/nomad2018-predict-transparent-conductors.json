{
    "title": "nomad2018-predict-transparent-conductors",
    "steps": [
        {
            "text": "<span class='prompt'>ml-master@ai4ai:~$</span> python ml_master.py --task nomad2018-predict-transparent-conductors --time-limit 12h",
            "delay": 200
        },
        {
            "text": "<span class='info'>[INFO]</span>: Starting run \"nomad2018-predict-transparent-conductors\"",
            "delay": 200
        },
        {
            "text": "<span class='prompt'>ml-master@ai4ai:~$</span> ",
            "delay": 200
        }
    ],
    "code": "<span class=\"keyword\">import</span> os\n<span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n<span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd\n<span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> train_test_split\n<span class=\"keyword\">from</span> sklearn.preprocessing <span class=\"keyword\">import</span> StandardScaler\n<span class=\"keyword\">from</span> sklearn.compose <span class=\"keyword\">import</span> ColumnTransformer\n<span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> mean_squared_error\n<span class=\"keyword\">import</span> lightgbm <span class=\"keyword\">as</span> lgb\n<span class=\"keyword\">import</span> optuna\n\n\n<span class=\"keyword\">def</span> <span class=\"function\">process_geometry</span>(id, is_train):\n    path = <span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">./input/</span><span class=\"string\">{</span><span class=\"string\">&#x27;</span><span class=\"string\">train</span><span class=\"string\">&#x27;</span> <span class=\"keyword\">if</span> is_train <span class=\"keyword\">else</span> <span class=\"string\">&#x27;</span><span class=\"string\">test</span><span class=\"string\">&#x27;</span><span class=\"string\">}</span><span class=\"string\">/</span><span class=\"string\">{</span>id<span class=\"string\">}</span><span class=\"string\">/geometry.xyz</span><span class=\"string\">&quot;</span>\n    features = {}\n    elements = [<span class=\"string\">&quot;</span><span class=\"string\">Al</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">Ga</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">In</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">O</span><span class=\"string\">&quot;</span>]\n    cutoff = <span class=\"number\">3.0</span>\n\n    <span class=\"keyword\">try</span>:\n        <span class=\"keyword\">with</span> open(path, <span class=\"string\">&quot;</span><span class=\"string\">r</span><span class=\"string\">&quot;</span>) <span class=\"keyword\">as</span> f:\n            lines = f.readlines()\n        df = pd.DataFrame(\n            [line.split()[:<span class=\"number\">4</span>] <span class=\"keyword\">for</span> line in lines[<span class=\"number\">2</span>:] <span class=\"keyword\">if</span> len(line.split()) &gt;= <span class=\"number\">4</span>],\n            columns=[<span class=\"string\">&quot;</span><span class=\"string\">element</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">x</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">y</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">z</span><span class=\"string\">&quot;</span>],\n        )\n        df[[<span class=\"string\">&quot;</span><span class=\"string\">x</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">y</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">z</span><span class=\"string\">&quot;</span>]] = df[[<span class=\"string\">&quot;</span><span class=\"string\">x</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">y</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">z</span><span class=\"string\">&quot;</span>]].astype(float)\n\n        <span class=\"keyword\">for</span> i in range(len(elements)):\n            <span class=\"keyword\">for</span> j in range(i, len(elements)):\n                elem1, elem2 = elements[i], elements[j]\n                coords1 = df[df[<span class=\"string\">&quot;</span><span class=\"string\">element</span><span class=\"string\">&quot;</span>] == elem1][[<span class=\"string\">&quot;</span><span class=\"string\">x</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">y</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">z</span><span class=\"string\">&quot;</span>]].values\n                coords2 = df[df[<span class=\"string\">&quot;</span><span class=\"string\">element</span><span class=\"string\">&quot;</span>] == elem2][[<span class=\"string\">&quot;</span><span class=\"string\">x</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">y</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">z</span><span class=\"string\">&quot;</span>]].values\n\n                key = <span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">{</span>elem1<span class=\"string\">}</span><span class=\"string\">_</span><span class=\"string\">{</span>elem2<span class=\"string\">}</span><span class=\"string\">&quot;</span>\n                stats = {<span class=\"string\">&quot;</span><span class=\"string\">min</span><span class=\"string\">&quot;</span>: <span class=\"number\">0.0</span>, <span class=\"string\">&quot;</span><span class=\"string\">max</span><span class=\"string\">&quot;</span>: <span class=\"number\">0.0</span>, <span class=\"string\">&quot;</span><span class=\"string\">mean</span><span class=\"string\">&quot;</span>: <span class=\"number\">0.0</span>, <span class=\"string\">&quot;</span><span class=\"string\">std</span><span class=\"string\">&quot;</span>: <span class=\"number\">0.0</span>}\n                count = <span class=\"number\">0</span>\n\n                <span class=\"keyword\">if</span> len(coords1) &gt; <span class=\"number\">0</span> and len(coords2) &gt; <span class=\"number\">0</span>:\n                    diff = coords1[:, np.newaxis] - coords2[np.newaxis, :]\n                    distances = np.sqrt((diff**<span class=\"number\">2</span>).sum(axis=<span class=\"number\">2</span>))\n\n                    <span class=\"keyword\">if</span> elem1 == elem2:\n                        n = len(coords1)\n                        <span class=\"keyword\">if</span> n &gt; <span class=\"number\">1</span>:\n                            triu_indices = np.triu_indices(n, k=<span class=\"number\">1</span>)\n                            distances = distances[triu_indices]\n                        <span class=\"keyword\">else</span>:\n                            distances = np.array([])\n\n                    <span class=\"keyword\">if</span> len(distances) &gt; <span class=\"number\">0</span>:\n                        stats = {\n                            <span class=\"string\">&quot;</span><span class=\"string\">min</span><span class=\"string\">&quot;</span>: np.min(distances),\n                            <span class=\"string\">&quot;</span><span class=\"string\">max</span><span class=\"string\">&quot;</span>: np.max(distances),\n                            <span class=\"string\">&quot;</span><span class=\"string\">mean</span><span class=\"string\">&quot;</span>: np.mean(distances),\n                            <span class=\"string\">&quot;</span><span class=\"string\">std</span><span class=\"string\">&quot;</span>: np.std(distances),\n                        }\n                        count = (distances &lt; cutoff).sum()\n\n                <span class=\"keyword\">for</span> stat, val in stats.items():\n                    features[<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">{</span>key<span class=\"string\">}</span><span class=\"string\">_</span><span class=\"string\">{</span>stat<span class=\"string\">}</span><span class=\"string\">_dist</span><span class=\"string\">&quot;</span>] = val\n                features[<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">{</span>key<span class=\"string\">}</span><span class=\"string\">_count_below_</span><span class=\"string\">{</span>cutoff<span class=\"string\">}</span><span class=\"string\">&quot;</span>] = count\n\n    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:\n        print(<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">Error processing </span><span class=\"string\">{</span>path<span class=\"string\">}</span><span class=\"string\">: </span><span class=\"string\">{</span>str(e)<span class=\"string\">}</span><span class=\"string\">&quot;</span>)\n\n    <span class=\"keyword\">return</span> features\n\n\n<span class=\"keyword\">def</span> <span class=\"function\">add_volume</span>(df):\n    a = df[<span class=\"string\">&quot;</span><span class=\"string\">lattice_vector_1_ang</span><span class=\"string\">&quot;</span>]\n    b = df[<span class=\"string\">&quot;</span><span class=\"string\">lattice_vector_2_ang</span><span class=\"string\">&quot;</span>]\n    c = df[<span class=\"string\">&quot;</span><span class=\"string\">lattice_vector_3_ang</span><span class=\"string\">&quot;</span>]\n    alpha = np.radians(df[<span class=\"string\">&quot;</span><span class=\"string\">lattice_angle_alpha_degree</span><span class=\"string\">&quot;</span>])\n    beta = np.radians(df[<span class=\"string\">&quot;</span><span class=\"string\">lattice_angle_beta_degree</span><span class=\"string\">&quot;</span>])\n    gamma = np.radians(df[<span class=\"string\">&quot;</span><span class=\"string\">lattice_angle_gamma_degree</span><span class=\"string\">&quot;</span>])\n\n    vol = (\n        a\n        * b\n        * c\n        * np.sqrt(\n            <span class=\"number\">1</span>\n            + <span class=\"number\">2</span> * np.cos(alpha) * np.cos(beta) * np.cos(gamma)\n            - np.cos(alpha) ** <span class=\"number\">2</span>\n            - np.cos(beta) ** <span class=\"number\">2</span>\n            - np.cos(gamma) ** <span class=\"number\">2</span>\n        )\n    )\n    <span class=\"keyword\">return</span> vol\n\n\n<span class=\"comment\"># Load and process data</span>\ntrain_df = pd.read_csv(<span class=\"string\">&quot;</span><span class=\"string\">./input/train.csv</span><span class=\"string\">&quot;</span>)\ntest_df = pd.read_csv(<span class=\"string\">&quot;</span><span class=\"string\">./input/test.csv</span><span class=\"string\">&quot;</span>)\n\nprint(<span class=\"string\">&quot;</span><span class=\"string\">Processing geometry files...</span><span class=\"string\">&quot;</span>)\ntrain_geom = pd.DataFrame([process_geometry(id, <span class=\"keyword\">True</span>) <span class=\"keyword\">for</span> id in train_df[<span class=\"string\">&quot;</span><span class=\"string\">id</span><span class=\"string\">&quot;</span>]])\ntest_geom = pd.DataFrame([process_geometry(id, <span class=\"keyword\">False</span>) <span class=\"keyword\">for</span> id in test_df[<span class=\"string\">&quot;</span><span class=\"string\">id</span><span class=\"string\">&quot;</span>]])\n\ntrain_df[<span class=\"string\">&quot;</span><span class=\"string\">volume</span><span class=\"string\">&quot;</span>] = add_volume(train_df)\ntest_df[<span class=\"string\">&quot;</span><span class=\"string\">volume</span><span class=\"string\">&quot;</span>] = add_volume(test_df)\n\nfull_train = pd.concat([train_df, train_geom], axis=<span class=\"number\">1</span>).fillna(<span class=\"number\">0</span>)\nfull_test = pd.concat([test_df, test_geom], axis=<span class=\"number\">1</span>).fillna(<span class=\"number\">0</span>)\n\n<span class=\"comment\"># Prepare features</span>\nX = full_train.drop([<span class=\"string\">&quot;</span><span class=\"string\">id</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">formation_energy_ev_natom</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">bandgap_energy_ev</span><span class=\"string\">&quot;</span>], axis=<span class=\"number\">1</span>)\ny_form = np.log1p(full_train[<span class=\"string\">&quot;</span><span class=\"string\">formation_energy_ev_natom</span><span class=\"string\">&quot;</span>])\ny_band = np.log1p(full_train[<span class=\"string\">&quot;</span><span class=\"string\">bandgap_energy_ev</span><span class=\"string\">&quot;</span>])\nX_test = full_test.drop(<span class=\"string\">&quot;</span><span class=\"string\">id</span><span class=\"string\">&quot;</span>, axis=<span class=\"number\">1</span>)\n\npreprocessor = ColumnTransformer(\n    [\n        (<span class=\"string\">&quot;</span><span class=\"string\">num</span><span class=\"string\">&quot;</span>, StandardScaler(), X.columns.difference([<span class=\"string\">&quot;</span><span class=\"string\">spacegroup</span><span class=\"string\">&quot;</span>])),\n        (<span class=\"string\">&quot;</span><span class=\"string\">cat</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">passthrough</span><span class=\"string\">&quot;</span>, [<span class=\"string\">&quot;</span><span class=\"string\">spacegroup</span><span class=\"string\">&quot;</span>]),\n    ]\n)\n\nX_processed = preprocessor.fit_transform(X)\nX_test_processed = preprocessor.transform(X_test)\ncat_idx = X_processed.shape[<span class=\"number\">1</span>] - <span class=\"number\">1</span>\n\n<span class=\"comment\"># Split data for validation</span>\nX_train, X_val, y_train_form, y_val_form, y_train_band, y_val_band = train_test_split(\n    X_processed, y_form, y_band, test_size=<span class=\"number\">0.2</span>, random_state=<span class=\"number\">42</span>\n)\n\n\n<span class=\"keyword\">def</span> <span class=\"function\">objective_form</span>(trial):\n    params = {\n        <span class=\"string\">&quot;</span><span class=\"string\">learning_rate</span><span class=\"string\">&quot;</span>: trial.suggest_float(<span class=\"string\">&quot;</span><span class=\"string\">learning_rate</span><span class=\"string\">&quot;</span>, <span class=\"number\">0.005</span>, <span class=\"number\">0.1</span>, log=<span class=\"keyword\">True</span>),\n        <span class=\"string\">&quot;</span><span class=\"string\">num_leaves</span><span class=\"string\">&quot;</span>: trial.suggest_int(<span class=\"string\">&quot;</span><span class=\"string\">num_leaves</span><span class=\"string\">&quot;</span>, <span class=\"number\">31</span>, <span class=\"number\">511</span>),\n        <span class=\"string\">&quot;</span><span class=\"string\">reg_alpha</span><span class=\"string\">&quot;</span>: trial.suggest_float(<span class=\"string\">&quot;</span><span class=\"string\">reg_alpha</span><span class=\"string\">&quot;</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>),\n        <span class=\"string\">&quot;</span><span class=\"string\">reg_lambda</span><span class=\"string\">&quot;</span>: trial.suggest_float(<span class=\"string\">&quot;</span><span class=\"string\">reg_lambda</span><span class=\"string\">&quot;</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>),\n        <span class=\"string\">&quot;</span><span class=\"string\">min_child_samples</span><span class=\"string\">&quot;</span>: trial.suggest_int(<span class=\"string\">&quot;</span><span class=\"string\">min_child_samples</span><span class=\"string\">&quot;</span>, <span class=\"number\">5</span>, <span class=\"number\">100</span>),\n        <span class=\"string\">&quot;</span><span class=\"string\">verbosity</span><span class=\"string\">&quot;</span>: -<span class=\"number\">1</span>,\n    }\n    model = lgb.LGBMRegressor(\n        n_estimators=<span class=\"number\">3000</span>,\n        **params,\n        random_state=<span class=\"number\">42</span>,\n        n_jobs=-<span class=\"number\">1</span>,\n        categorical_feature=[cat_idx],\n    )\n    model.fit(\n        X_train,\n        y_train_form,\n        eval_set=[(X_val, y_val_form)],\n        eval_metric=<span class=\"string\">&quot;</span><span class=\"string\">rmse</span><span class=\"string\">&quot;</span>,\n        callbacks=[lgb.early_stopping(<span class=\"number\">100</span>)],\n    )\n    trial.set_user_attr(<span class=\"string\">&quot;</span><span class=\"string\">best_iteration</span><span class=\"string\">&quot;</span>, model.best_iteration_)\n    val_pred = model.predict(X_val)\n    <span class=\"keyword\">return</span> np.sqrt(mean_squared_error(y_val_form, val_pred))\n\n\n<span class=\"keyword\">def</span> <span class=\"function\">objective_band</span>(trial):\n    params = {\n        <span class=\"string\">&quot;</span><span class=\"string\">learning_rate</span><span class=\"string\">&quot;</span>: trial.suggest_float(<span class=\"string\">&quot;</span><span class=\"string\">learning_rate</span><span class=\"string\">&quot;</span>, <span class=\"number\">0.005</span>, <span class=\"number\">0.1</span>, log=<span class=\"keyword\">True</span>),\n        <span class=\"string\">&quot;</span><span class=\"string\">num_leaves</span><span class=\"string\">&quot;</span>: trial.suggest_int(<span class=\"string\">&quot;</span><span class=\"string\">num_leaves</span><span class=\"string\">&quot;</span>, <span class=\"number\">31</span>, <span class=\"number\">511</span>),\n        <span class=\"string\">&quot;</span><span class=\"string\">reg_alpha</span><span class=\"string\">&quot;</span>: trial.suggest_float(<span class=\"string\">&quot;</span><span class=\"string\">reg_alpha</span><span class=\"string\">&quot;</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>),\n        <span class=\"string\">&quot;</span><span class=\"string\">reg_lambda</span><span class=\"string\">&quot;</span>: trial.suggest_float(<span class=\"string\">&quot;</span><span class=\"string\">reg_lambda</span><span class=\"string\">&quot;</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>),\n        <span class=\"string\">&quot;</span><span class=\"string\">min_child_samples</span><span class=\"string\">&quot;</span>: trial.suggest_int(<span class=\"string\">&quot;</span><span class=\"string\">min_child_samples</span><span class=\"string\">&quot;</span>, <span class=\"number\">5</span>, <span class=\"number\">100</span>),\n        <span class=\"string\">&quot;</span><span class=\"string\">verbosity</span><span class=\"string\">&quot;</span>: -<span class=\"number\">1</span>,\n    }\n    model = lgb.LGBMRegressor(\n        n_estimators=<span class=\"number\">3000</span>,\n        **params,\n        random_state=<span class=\"number\">42</span>,\n        n_jobs=-<span class=\"number\">1</span>,\n        categorical_feature=[cat_idx],\n    )\n    model.fit(\n        X_train,\n        y_train_band,\n        eval_set=[(X_val, y_val_band)],\n        eval_metric=<span class=\"string\">&quot;</span><span class=\"string\">rmse</span><span class=\"string\">&quot;</span>,\n        callbacks=[lgb.early_stopping(<span class=\"number\">100</span>)],\n    )\n    trial.set_user_attr(<span class=\"string\">&quot;</span><span class=\"string\">best_iteration</span><span class=\"string\">&quot;</span>, model.best_iteration_)\n    val_pred = model.predict(X_val)\n    <span class=\"keyword\">return</span> np.sqrt(mean_squared_error(y_val_band, val_pred))\n\n\nprint(<span class=\"string\">&quot;</span><span class=\"string\">Optimizing formation energy model...</span><span class=\"string\">&quot;</span>)\nstudy_form = optuna.create_study(direction=<span class=\"string\">&quot;</span><span class=\"string\">minimize</span><span class=\"string\">&quot;</span>)\nstudy_form.optimize(objective_form, n_trials=<span class=\"number\">5</span>)\n\nprint(<span class=\"string\">&quot;</span><span class=\"string\">Optimizing bandgap model...</span><span class=\"string\">&quot;</span>)\nstudy_band = optuna.create_study(direction=<span class=\"string\">&quot;</span><span class=\"string\">minimize</span><span class=\"string\">&quot;</span>)\nstudy_band.optimize(objective_band, n_trials=<span class=\"number\">5</span>)\n\n<span class=\"comment\"># Retrieve best parameters</span>\nbest_form_params = study_form.best_params\nbest_form_iter = study_form.best_trial.user_attrs[<span class=\"string\">&quot;</span><span class=\"string\">best_iteration</span><span class=\"string\">&quot;</span>]\nbest_band_params = study_band.best_params\nbest_band_iter = study_band.best_trial.user_attrs[<span class=\"string\">&quot;</span><span class=\"string\">best_iteration</span><span class=\"string\">&quot;</span>]\n\n<span class=\"comment\"># Train final models</span>\nmodel_form = lgb.LGBMRegressor(\n    **best_form_params,\n    n_estimators=best_form_iter,\n    random_state=<span class=\"number\">42</span>,\n    n_jobs=-<span class=\"number\">1</span>,\n    categorical_feature=[cat_idx],\n    verbosity=-<span class=\"number\">1</span>,\n)\nmodel_form.fit(X_processed, y_form)\n\nmodel_band = lgb.LGBMRegressor(\n    **best_band_params,\n    n_estimators=best_band_iter,\n    random_state=<span class=\"number\">42</span>,\n    n_jobs=-<span class=\"number\">1</span>,\n    categorical_feature=[cat_idx],\n    verbosity=-<span class=\"number\">1</span>,\n)\nmodel_band.fit(X_processed, y_band)\n\n<span class=\"comment\"># Validation metrics</span>\nval_pred_form = model_form.predict(X_val)\nval_pred_band = model_band.predict(X_val)\nrmsle_form = np.sqrt(mean_squared_error(y_val_form, val_pred_form))\nrmsle_band = np.sqrt(mean_squared_error(y_val_band, val_pred_band))\nprint(<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">Validation RMSLE: </span><span class=\"string\">{</span>(rmsle_form + rmsle_band)/<span class=\"number\">2</span><span class=\"string\">:</span><span class=\"string\">.4f</span><span class=\"string\">}</span><span class=\"string\">&quot;</span>)\n\n<span class=\"comment\"># Generate submission</span>\nsubmission = pd.DataFrame(\n    {\n        <span class=\"string\">&quot;</span><span class=\"string\">id</span><span class=\"string\">&quot;</span>: test_df[<span class=\"string\">&quot;</span><span class=\"string\">id</span><span class=\"string\">&quot;</span>],\n        <span class=\"string\">&quot;</span><span class=\"string\">formation_energy_ev_natom</span><span class=\"string\">&quot;</span>: np.expm1(model_form.predict(X_test_processed)),\n        <span class=\"string\">&quot;</span><span class=\"string\">bandgap_energy_ev</span><span class=\"string\">&quot;</span>: np.expm1(model_band.predict(X_test_processed)),\n    }\n)\nos.makedirs(<span class=\"string\">&quot;</span><span class=\"string\">./submission</span><span class=\"string\">&quot;</span>, exist_ok=<span class=\"keyword\">True</span>)\nsubmission.to_csv(<span class=\"string\">&quot;</span><span class=\"string\">./submission/submission.csv</span><span class=\"string\">&quot;</span>, index=<span class=\"keyword\">False</span>)\n"
}