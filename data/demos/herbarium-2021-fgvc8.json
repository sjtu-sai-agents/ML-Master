{
    "title": "herbarium-2021-fgvc8",
    "steps": [
        {
            "text": "<span class='prompt'>ml-master@ai4ai:~$</span> python ml_master.py --task herbarium-2021-fgvc8 --time-limit 12h",
            "delay": 200
        },
        {
            "text": "<span class='info'>[INFO]</span>: Starting run \"herbarium-2021-fgvc8\"",
            "delay": 200
        },
        {
            "text": "<span class='prompt'>ml-master@ai4ai:~$</span> ",
            "delay": 200
        }
    ],
    "code": "<span class=\"keyword\">import</span> json\n<span class=\"keyword\">import</span> os\n<span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd\n<span class=\"keyword\">import</span> torch\n<span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> Dataset, DataLoader\n<span class=\"keyword\">from</span> torchvision <span class=\"keyword\">import</span> transforms\n<span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image\n<span class=\"keyword\">import</span> timm\n<span class=\"keyword\">import</span> torch.nn <span class=\"keyword\">as</span> nn\n<span class=\"keyword\">import</span> torch.optim <span class=\"keyword\">as</span> optim\n<span class=\"keyword\">from</span> tqdm <span class=\"keyword\">import</span> tqdm\n<span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> f1_score\n\n<span class=\"comment\"># Load training metadata</span>\n<span class=\"keyword\">with</span> open(<span class=\"string\">&quot;</span><span class=\"string\">input/train/metadata.json</span><span class=\"string\">&quot;</span>) <span class=\"keyword\">as</span> f:\n    train_meta = json.load(f)\n\n<span class=\"comment\"># Create dataframe with corrected paths and labels</span>\npaths = [os.path.join(<span class=\"string\">&quot;</span><span class=\"string\">input/train</span><span class=\"string\">&quot;</span>, img[<span class=\"string\">&quot;</span><span class=\"string\">file_name</span><span class=\"string\">&quot;</span>]) <span class=\"keyword\">for</span> img in train_meta[<span class=\"string\">&quot;</span><span class=\"string\">images</span><span class=\"string\">&quot;</span>]]\nimg_to_label = {a[<span class=\"string\">&quot;</span><span class=\"string\">image_id</span><span class=\"string\">&quot;</span>]: a[<span class=\"string\">&quot;</span><span class=\"string\">category_id</span><span class=\"string\">&quot;</span>] <span class=\"keyword\">for</span> a in train_meta[<span class=\"string\">&quot;</span><span class=\"string\">annotations</span><span class=\"string\">&quot;</span>]}\nlabels = [img_to_label[img[<span class=\"string\">&quot;</span><span class=\"string\">id</span><span class=\"string\">&quot;</span>]] <span class=\"keyword\">for</span> img in train_meta[<span class=\"string\">&quot;</span><span class=\"string\">images</span><span class=\"string\">&quot;</span>]]\ndf = pd.DataFrame({<span class=\"string\">&quot;</span><span class=\"string\">path</span><span class=\"string\">&quot;</span>: paths, <span class=\"string\">&quot;</span><span class=\"string\">label</span><span class=\"string\">&quot;</span>: labels})\n\n<span class=\"comment\"># Fixed validation split creation</span>\nval_dfs = []\n<span class=\"keyword\">for</span> label, group in df.groupby(<span class=\"string\">&quot;</span><span class=\"string\">label</span><span class=\"string\">&quot;</span>):\n    n_samples = min(<span class=\"number\">5</span>, len(group))\n    val_dfs.append(group.sample(n=n_samples, random_state=<span class=\"number\">42</span>))\nval_df = pd.concat(val_dfs)\ntrain_df = df.drop(val_df.index)\n\n\n<span class=\"keyword\">class</span> <span class=\"class\">HerbariumDataset</span>(Dataset):\n    <span class=\"keyword\">def</span> <span class=\"function\">__init__</span>(self, df, transform=<span class=\"keyword\">None</span>):\n        self.df = df.reset_index(drop=<span class=\"keyword\">True</span>)\n        self.transform = transform\n\n    <span class=\"keyword\">def</span> <span class=\"function\">__len__</span>(self):\n        <span class=\"keyword\">return</span> len(self.df)\n\n    <span class=\"keyword\">def</span> <span class=\"function\">__getitem__</span>(self, idx):\n        img = Image.open(self.df.iloc[idx][<span class=\"string\">&quot;</span><span class=\"string\">path</span><span class=\"string\">&quot;</span>]).convert(<span class=\"string\">&quot;</span><span class=\"string\">RGB</span><span class=\"string\">&quot;</span>)\n        <span class=\"keyword\">return</span> self.transform(img), self.df.iloc[idx][<span class=\"string\">&quot;</span><span class=\"string\">label</span><span class=\"string\">&quot;</span>]\n\n\n<span class=\"comment\"># Augmentations</span>\ntrain_tfms = transforms.Compose(\n    [\n        transforms.RandomResizedCrop(<span class=\"number\">224</span>),\n        transforms.RandomHorizontalFlip(),\n        transforms.ToTensor(),\n        transforms.Normalize([<span class=\"number\">0.485</span>, <span class=\"number\">0.456</span>, <span class=\"number\">0.406</span>], [<span class=\"number\">0.229</span>, <span class=\"number\">0.224</span>, <span class=\"number\">0.225</span>]),\n    ]\n)\n\nval_tfms = transforms.Compose(\n    [\n        transforms.Resize(<span class=\"number\">256</span>),\n        transforms.CenterCrop(<span class=\"number\">224</span>),\n        transforms.ToTensor(),\n        transforms.Normalize([<span class=\"number\">0.485</span>, <span class=\"number\">0.456</span>, <span class=\"number\">0.406</span>], [<span class=\"number\">0.229</span>, <span class=\"number\">0.224</span>, <span class=\"number\">0.225</span>]),\n    ]\n)\n\ntrain_ds = HerbariumDataset(train_df, train_tfms)\nval_ds = HerbariumDataset(val_df, val_tfms)\n\ntrain_loader = DataLoader(\n    train_ds, batch_size=<span class=\"number\">128</span>, shuffle=<span class=\"keyword\">True</span>, num_workers=<span class=\"number\">8</span>, pin_memory=<span class=\"keyword\">True</span>\n)\nval_loader = DataLoader(val_ds, batch_size=<span class=\"number\">256</span>, num_workers=<span class=\"number\">8</span>)\n\n<span class=\"comment\"># Model setup</span>\ndevice = torch.device(<span class=\"string\">&quot;</span><span class=\"string\">cuda</span><span class=\"string\">&quot;</span>)\nmodel = timm.create_model(\n    <span class=\"string\">&quot;</span><span class=\"string\">tf_efficientnet_b4</span><span class=\"string\">&quot;</span>, pretrained=<span class=\"keyword\">True</span>, num_classes=len(train_meta[<span class=\"string\">&quot;</span><span class=\"string\">categories</span><span class=\"string\">&quot;</span>])\n)\nmodel = nn.DataParallel(model).to(device)\n\ncriterion = nn.CrossEntropyLoss()\noptimizer = optim.AdamW(model.parameters(), lr=<span class=\"number\">3e-4</span>)\nscaler = torch.cuda.amp.GradScaler()\n\nbest_f1 = <span class=\"number\">0</span>\n<span class=\"keyword\">for</span> epoch in range(<span class=\"number\">3</span>):\n    model.train()\n    <span class=\"keyword\">for</span> x, y in tqdm(train_loader, desc=<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">Epoch </span><span class=\"string\">{</span>epoch+<span class=\"number\">1</span><span class=\"string\">}</span><span class=\"string\">&quot;</span>):\n        x, y = x.to(device), y.to(device)\n        optimizer.zero_grad()\n\n        <span class=\"keyword\">with</span> torch.cuda.amp.autocast():\n            out = model(x)\n            loss = criterion(out, y)\n\n        scaler.scale(loss).backward()\n        scaler.step(optimizer)\n        scaler.update()\n\n    <span class=\"comment\"># Validation</span>\n    model.eval()\n    all_preds, all_true = [], []\n    <span class=\"keyword\">with</span> torch.no_grad():\n        <span class=\"keyword\">for</span> x, y in val_loader:\n            x, y = x.to(device), y.to(device)\n            preds = model(x).argmax(<span class=\"number\">1</span>)\n            all_preds.extend(preds.cpu().numpy())\n            all_true.extend(y.cpu().numpy())\n\n    val_f1 = f1_score(all_true, all_preds, average=<span class=\"string\">&quot;</span><span class=\"string\">macro</span><span class=\"string\">&quot;</span>)\n    print(<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">Val F1: </span><span class=\"string\">{</span>val_f1<span class=\"string\">:</span><span class=\"string\">.4f</span><span class=\"string\">}</span><span class=\"string\">&quot;</span>)\n    <span class=\"keyword\">if</span> val_f1 &gt; best_f1:\n        best_f1 = val_f1\n        torch.save(model.module.state_dict(), <span class=\"string\">&quot;</span><span class=\"string\">best_model.pth</span><span class=\"string\">&quot;</span>)\n\n<span class=\"comment\"># Load best model</span>\nmodel.module.load_state_dict(torch.load(<span class=\"string\">&quot;</span><span class=\"string\">best_model.pth</span><span class=\"string\">&quot;</span>))\nmodel.eval()\n\n\n<span class=\"comment\"># Test dataset class</span>\n<span class=\"keyword\">class</span> <span class=\"class\">TestDataset</span>(Dataset):\n    <span class=\"keyword\">def</span> <span class=\"function\">__init__</span>(self, paths, transform=<span class=\"keyword\">None</span>):\n        self.paths = paths\n        self.transform = transform\n\n    <span class=\"keyword\">def</span> <span class=\"function\">__len__</span>(self):\n        <span class=\"keyword\">return</span> len(self.paths)\n\n    <span class=\"keyword\">def</span> <span class=\"function\">__getitem__</span>(self, idx):\n        img = Image.open(self.paths[idx]).convert(<span class=\"string\">&quot;</span><span class=\"string\">RGB</span><span class=\"string\">&quot;</span>)\n        <span class=\"keyword\">return</span> self.transform(img)\n\n\n<span class=\"comment\"># Test inference</span>\n<span class=\"keyword\">with</span> open(<span class=\"string\">&quot;</span><span class=\"string\">input/test/metadata.json</span><span class=\"string\">&quot;</span>) <span class=\"keyword\">as</span> f:\n    test_meta = json.load(f)\n\ntest_paths = [\n    os.path.join(<span class=\"string\">&quot;</span><span class=\"string\">input/test</span><span class=\"string\">&quot;</span>, img[<span class=\"string\">&quot;</span><span class=\"string\">file_name</span><span class=\"string\">&quot;</span>]) <span class=\"keyword\">for</span> img in test_meta[<span class=\"string\">&quot;</span><span class=\"string\">images</span><span class=\"string\">&quot;</span>]\n]\ntest_ids = [img[<span class=\"string\">&quot;</span><span class=\"string\">id</span><span class=\"string\">&quot;</span>] <span class=\"keyword\">for</span> img in test_meta[<span class=\"string\">&quot;</span><span class=\"string\">images</span><span class=\"string\">&quot;</span>]]\n\ntest_ds = TestDataset(test_paths, val_tfms)\ntest_loader = DataLoader(test_ds, batch_size=<span class=\"number\">256</span>, num_workers=<span class=\"number\">8</span>)\n\npreds = []\n<span class=\"keyword\">with</span> torch.no_grad():\n    <span class=\"keyword\">for</span> x in tqdm(test_loader):\n        preds.extend(model(x.to(device)).argmax(<span class=\"number\">1</span>).cpu().numpy())\n\n<span class=\"comment\"># Save submission</span>\nos.makedirs(<span class=\"string\">&quot;</span><span class=\"string\">submission</span><span class=\"string\">&quot;</span>, exist_ok=<span class=\"keyword\">True</span>)\npd.DataFrame({<span class=\"string\">&quot;</span><span class=\"string\">Id</span><span class=\"string\">&quot;</span>: test_ids, <span class=\"string\">&quot;</span><span class=\"string\">Predicted</span><span class=\"string\">&quot;</span>: preds}).to_csv(\n    <span class=\"string\">&quot;</span><span class=\"string\">submission/submission.csv</span><span class=\"string\">&quot;</span>, index=<span class=\"keyword\">False</span>\n)\n\nprint(<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">Best Validation F1: </span><span class=\"string\">{</span>best_f1<span class=\"string\">:</span><span class=\"string\">.4f</span><span class=\"string\">}</span><span class=\"string\">&quot;</span>)\n"
}