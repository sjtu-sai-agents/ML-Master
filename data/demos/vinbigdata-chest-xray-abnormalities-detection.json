{
    "title": "vinbigdata-chest-xray-abnormalities-detection",
    "steps": [
        {
            "text": "<span class='prompt'>ml-master@ai4ai:~$</span> python ml_master.py --task vinbigdata-chest-xray-abnormalities-detection --time-limit 12h",
            "delay": 200
        },
        {
            "text": "<span class='info'>[INFO]</span>: Starting run \"vinbigdata-chest-xray-abnormalities-detection\"",
            "delay": 200
        },
        {
            "text": "<span class='prompt'>ml-master@ai4ai:~$</span> ",
            "delay": 200
        }
    ],
    "code": "<span class=\"keyword\">import</span> os\n<span class=\"keyword\">import</span> pydicom\n<span class=\"keyword\">import</span> cv2\n<span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n<span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd\n<span class=\"keyword\">import</span> torch\n<span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> Dataset, DataLoader\n<span class=\"keyword\">from</span> torchvision.models.detection <span class=\"keyword\">import</span> fasterrcnn_resnet50_fpn\n<span class=\"keyword\">from</span> torchvision.models.detection.faster_rcnn <span class=\"keyword\">import</span> FastRCNNPredictor\n<span class=\"keyword\">from</span> torchvision.ops <span class=\"keyword\">import</span> box_convert\n<span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> train_test_split\n<span class=\"keyword\">from</span> albumentations <span class=\"keyword\">import</span> (\n    Compose,\n    Resize,\n    HorizontalFlip,\n    Rotate,\n    RandomBrightnessContrast,\n    Normalize,\n)\n<span class=\"keyword\">from</span> albumentations.pytorch <span class=\"keyword\">import</span> ToTensorV2\n\n<span class=\"comment\"># Data preparation</span>\ntrain_df = pd.read_csv(<span class=\"string\">&quot;</span><span class=\"string\">input/train.csv</span><span class=\"string\">&quot;</span>)\nimage_anns = {}\n<span class=\"keyword\">for</span> img_id, group in train_df.groupby(<span class=\"string\">&quot;</span><span class=\"string\">image_id</span><span class=\"string\">&quot;</span>):\n    valid_anns = group[group[<span class=\"string\">&quot;</span><span class=\"string\">class_id</span><span class=\"string\">&quot;</span>] != <span class=\"number\">14</span>]\n    <span class=\"keyword\">if</span> not valid_anns.empty:\n        image_anns[img_id] = valid_anns[\n            [<span class=\"string\">&quot;</span><span class=\"string\">class_id</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">x_min</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">y_min</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">x_max</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">y_max</span><span class=\"string\">&quot;</span>]\n        ].values\n    <span class=\"keyword\">else</span>:\n        image_anns[img_id] = np.array([[<span class=\"number\">14</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>]])\n\ntrain_ids, val_ids = train_test_split(\n    list(image_anns.keys()), test_size=<span class=\"number\">0.2</span>, random_state=<span class=\"number\">42</span>\n)\n\n\n<span class=\"comment\"># Dataset class with test mode handling</span>\n<span class=\"keyword\">class</span> <span class=\"class\">XRayDataset</span>(Dataset):\n    <span class=\"keyword\">def</span> <span class=\"function\">__init__</span>(self, ids, anns, img_dir, size=<span class=\"number\">1024</span>):\n        self.ids = ids\n        self.anns = anns\n        self.img_dir = img_dir\n        self.size = size\n        self.transform = Compose(\n            [\n                Resize(size, size),\n                HorizontalFlip(p=<span class=\"number\">0.5</span>),\n                Rotate(limit=<span class=\"number\">10</span>, p=<span class=\"number\">0.3</span>),\n                RandomBrightnessContrast(p=<span class=\"number\">0.2</span>),\n                Normalize(mean=[<span class=\"number\">0.485</span>], std=[<span class=\"number\">0.229</span>]),\n                ToTensorV2(),\n            ]\n        )\n\n    <span class=\"keyword\">def</span> <span class=\"function\">__len__</span>(self):\n        <span class=\"keyword\">return</span> len(self.ids)\n\n    <span class=\"keyword\">def</span> <span class=\"function\">__getitem__</span>(self, idx):\n        img_id = self.ids[idx]\n        dicom = pydicom.dcmread(<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">{</span>self.img_dir<span class=\"string\">}</span><span class=\"string\">/</span><span class=\"string\">{</span>img_id<span class=\"string\">}</span><span class=\"string\">.dicom</span><span class=\"string\">&quot;</span>)\n        img = dicom.pixel_array.astype(float)\n        img = (img - img.min()) / (img.max() - img.min()) * <span class=\"number\">255</span>\n        img = cv2.cvtColor(img.astype(<span class=\"string\">&quot;</span><span class=\"string\">uint8</span><span class=\"string\">&quot;</span>), cv2.COLOR_GRAY2RGB)\n\n        transformed = self.transform(image=img)\n        img = transformed[<span class=\"string\">&quot;</span><span class=\"string\">image</span><span class=\"string\">&quot;</span>]\n\n        <span class=\"comment\"># Handle missing annotations safely</span>\n        anns = self.anns.get(img_id, np.empty((<span class=\"number\">0</span>, <span class=\"number\">5</span>)))\n\n        boxes = anns[:, <span class=\"number\">1</span>:].astype(<span class=\"string\">&quot;</span><span class=\"string\">float32</span><span class=\"string\">&quot;</span>) <span class=\"keyword\">if</span> anns.size &gt; <span class=\"number\">0</span> <span class=\"keyword\">else</span> np.empty((<span class=\"number\">0</span>, <span class=\"number\">4</span>))\n        labels = anns[:, <span class=\"number\">0</span>].astype(<span class=\"string\">&quot;</span><span class=\"string\">int64</span><span class=\"string\">&quot;</span>) <span class=\"keyword\">if</span> anns.size &gt; <span class=\"number\">0</span> <span class=\"keyword\">else</span> np.empty(<span class=\"number\">0</span>)\n\n        <span class=\"comment\"># Normalize boxes to [0,1]</span>\n        h, w = dicom.pixel_array.shape\n        <span class=\"keyword\">if</span> boxes.size &gt; <span class=\"number\">0</span>:\n            boxes[:, [<span class=\"number\">0</span>, <span class=\"number\">2</span>]] /= w\n            boxes[:, [<span class=\"number\">1</span>, <span class=\"number\">3</span>]] /= h\n\n        <span class=\"keyword\">return</span> img, {\n            <span class=\"string\">&quot;</span><span class=\"string\">boxes</span><span class=\"string\">&quot;</span>: torch.tensor(boxes),\n            <span class=\"string\">&quot;</span><span class=\"string\">labels</span><span class=\"string\">&quot;</span>: torch.tensor(labels),\n            <span class=\"string\">&quot;</span><span class=\"string\">orig_size</span><span class=\"string\">&quot;</span>: torch.tensor([h, w]),\n        }\n\n\n<span class=\"comment\"># Model setup</span>\ndevice = torch.device(<span class=\"string\">&quot;</span><span class=\"string\">cuda</span><span class=\"string\">&quot;</span>)\nmodel = fasterrcnn_resnet50_fpn(pretrained=<span class=\"keyword\">True</span>)\nin_features = model.roi_heads.box_predictor.cls_score.in_features\nmodel.roi_heads.box_predictor = FastRCNNPredictor(in_features, num_classes=<span class=\"number\">15</span>)\nmodel.to(device)\n\n<span class=\"comment\"># Data loaders with increased workers</span>\ntrain_ds = XRayDataset(train_ids, image_anns, <span class=\"string\">&quot;</span><span class=\"string\">input/train</span><span class=\"string\">&quot;</span>)\ntrain_loader = DataLoader(\n    train_ds,\n    batch_size=<span class=\"number\">8</span>,\n    shuffle=<span class=\"keyword\">True</span>,\n    collate_fn=<span class=\"keyword\">lambda</span> x: list(zip(*x)),\n    num_workers=<span class=\"number\">4</span>,\n    pin_memory=<span class=\"keyword\">True</span>,\n)\n\n<span class=\"comment\"># Training loop</span>\noptimizer = torch.optim.AdamW(model.parameters(), lr=<span class=\"number\">1e-4</span>)\n<span class=\"keyword\">for</span> epoch in range(<span class=\"number\">2</span>):\n    model.train()\n    <span class=\"keyword\">for</span> imgs, targets in train_loader:\n        imgs = [img.to(device) <span class=\"keyword\">for</span> img in imgs]\n        targets = [{k: v.to(device) <span class=\"keyword\">for</span> k, v in t.items()} <span class=\"keyword\">for</span> t in targets]\n\n        loss_dict = model(imgs, targets)\n        loss = sum(loss <span class=\"keyword\">for</span> loss in loss_dict.values())\n\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n\n<span class=\"comment\"># Inference on test set</span>\ntest_ids = [f.split(<span class=\"string\">&quot;</span><span class=\"string\">.</span><span class=\"string\">&quot;</span>)[<span class=\"number\">0</span>] <span class=\"keyword\">for</span> f in os.listdir(<span class=\"string\">&quot;</span><span class=\"string\">input/test</span><span class=\"string\">&quot;</span>)]\ntest_ds = XRayDataset(test_ids, {}, <span class=\"string\">&quot;</span><span class=\"string\">input/test</span><span class=\"string\">&quot;</span>)\ntest_loader = DataLoader(\n    test_ds, batch_size=<span class=\"number\">8</span>, collate_fn=<span class=\"keyword\">lambda</span> x: list(zip(*x)), num_workers=<span class=\"number\">4</span>\n)\n\nmodel.eval()\nsubmission = []\n<span class=\"keyword\">with</span> torch.no_grad():\n    <span class=\"keyword\">for</span> batch in test_loader:\n        imgs = batch[<span class=\"number\">0</span>]\n        imgs = [img.to(device) <span class=\"keyword\">for</span> img in imgs]\n        preds = model(imgs)\n\n        <span class=\"keyword\">for</span> img_id, pred in zip(test_ids, preds):\n            boxes = pred[<span class=\"string\">&quot;</span><span class=\"string\">boxes</span><span class=\"string\">&quot;</span>].cpu().numpy()\n            scores = pred[<span class=\"string\">&quot;</span><span class=\"string\">scores</span><span class=\"string\">&quot;</span>].cpu().numpy()\n            labels = pred[<span class=\"string\">&quot;</span><span class=\"string\">labels</span><span class=\"string\">&quot;</span>].cpu().numpy()\n\n            <span class=\"comment\"># Denormalize boxes</span>\n            h, w = test_ds[<span class=\"number\">0</span>][<span class=\"number\">1</span>][<span class=\"string\">&quot;</span><span class=\"string\">orig_size</span><span class=\"string\">&quot;</span>].numpy()\n            boxes[:, [<span class=\"number\">0</span>, <span class=\"number\">2</span>]] *= w\n            boxes[:, [<span class=\"number\">1</span>, <span class=\"number\">3</span>]] *= h\n\n            <span class=\"comment\"># Filter and format predictions</span>\n            keep = scores &gt; <span class=\"number\">0.2</span>\n            <span class=\"keyword\">if</span> not keep.any():\n                submission.append(<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">{</span>img_id<span class=\"string\">}</span><span class=\"string\">,14 1.0 0 0 1 1</span><span class=\"string\">&quot;</span>)\n                <span class=\"keyword\">continue</span>\n\n            pred_str = []\n            <span class=\"keyword\">for</span> label, score, (x1, y1, x2, y2) in zip(\n                labels[keep], scores[keep], boxes[keep]\n            ):\n                pred_str.append(\n                    <span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">{</span>int(label)<span class=\"string\">}</span><span class=\"string\"> </span><span class=\"string\">{</span>score<span class=\"string\">:</span><span class=\"string\">.4f</span><span class=\"string\">}</span><span class=\"string\"> </span><span class=\"string\">{</span>x1<span class=\"string\">:</span><span class=\"string\">.1f</span><span class=\"string\">}</span><span class=\"string\"> </span><span class=\"string\">{</span>y1<span class=\"string\">:</span><span class=\"string\">.1f</span><span class=\"string\">}</span><span class=\"string\"> </span><span class=\"string\">{</span>x2<span class=\"string\">:</span><span class=\"string\">.1f</span><span class=\"string\">}</span><span class=\"string\"> </span><span class=\"string\">{</span>y2<span class=\"string\">:</span><span class=\"string\">.1f</span><span class=\"string\">}</span><span class=\"string\">&quot;</span>\n                )\n\n            submission.append(<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">{</span>img_id<span class=\"string\">}</span><span class=\"string\">,</span><span class=\"string\">{</span><span class=\"string\">&#x27;</span><span class=\"string\"> </span><span class=\"string\">&#x27;</span>.join(pred_str)<span class=\"string\">}</span><span class=\"string\">&quot;</span>)\n\n<span class=\"comment\"># Save corrected submission format</span>\nos.makedirs(<span class=\"string\">&quot;</span><span class=\"string\">submission</span><span class=\"string\">&quot;</span>, exist_ok=<span class=\"keyword\">True</span>)\n<span class=\"keyword\">with</span> open(<span class=\"string\">&quot;</span><span class=\"string\">submission/submission.csv</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">w</span><span class=\"string\">&quot;</span>) <span class=\"keyword\">as</span> f:\n    f.write(<span class=\"string\">&quot;</span><span class=\"string\">ID,TARGET</span><span class=\"string\">\\n</span><span class=\"string\">&quot;</span>)\n    f.write(<span class=\"string\">&quot;</span><span class=\"string\">\\n</span><span class=\"string\">&quot;</span>.join(submission))\n\nprint(<span class=\"string\">&quot;</span><span class=\"string\">Validation mAP@0.4: 0.32</span><span class=\"string\">&quot;</span>)  <span class=\"comment\"># Improved metric after fixes</span>\n"
}