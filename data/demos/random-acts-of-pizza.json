{
    "title": "random-acts-of-pizza",
    "steps": [
        {
            "text": "<span class='prompt'>ml-master@ai4ai:~$</span> python ml_master.py --task random-acts-of-pizza --time-limit 12h",
            "delay": 200
        },
        {
            "text": "<span class='info'>[INFO]</span>: Starting run \"random-acts-of-pizza\"",
            "delay": 200
        },
        {
            "text": "<span class='prompt'>ml-master@ai4ai:~$</span> ",
            "delay": 200
        }
    ],
    "code": "<span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd\n<span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n<span class=\"keyword\">from</span> sklearn.feature_extraction.text <span class=\"keyword\">import</span> TfidfVectorizer\n<span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> KFold\n<span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> roc_auc_score\n<span class=\"keyword\">import</span> lightgbm <span class=\"keyword\">as</span> lgb\n<span class=\"keyword\">from</span> scipy.sparse <span class=\"keyword\">import</span> hstack, csr_matrix, vstack\n<span class=\"keyword\">import</span> json\n<span class=\"keyword\">from</span> sentence_transformers <span class=\"keyword\">import</span> SentenceTransformer\n<span class=\"keyword\">from</span> textstat <span class=\"keyword\">import</span> flesch_kincaid_grade\n<span class=\"keyword\">from</span> nltk.sentiment <span class=\"keyword\">import</span> SentimentIntensityAnalyzer\n<span class=\"keyword\">import</span> nltk\n<span class=\"keyword\">import</span> optuna\n\nnltk.download(<span class=\"string\">&quot;</span><span class=\"string\">vader_lexicon</span><span class=\"string\">&quot;</span>)\n\n<span class=\"comment\"># Load and preprocess data</span>\n<span class=\"keyword\">with</span> open(<span class=\"string\">&quot;</span><span class=\"string\">input/train.json</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">r</span><span class=\"string\">&quot;</span>) <span class=\"keyword\">as</span> f:\n    train_data = json.load(f)\ntrain_df = pd.DataFrame(train_data)\n\n<span class=\"keyword\">with</span> open(<span class=\"string\">&quot;</span><span class=\"string\">input/test.json</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">r</span><span class=\"string\">&quot;</span>) <span class=\"keyword\">as</span> f:\n    test_data = json.load(f)\ntest_df = pd.DataFrame(test_data)\n\n<span class=\"comment\"># Precompute time-based features</span>\n<span class=\"keyword\">for</span> df in [train_df, test_df]:\n    df[<span class=\"string\">&quot;</span><span class=\"string\">timestamp</span><span class=\"string\">&quot;</span>] = pd.to_datetime(df[<span class=\"string\">&quot;</span><span class=\"string\">unix_timestamp_of_request_utc</span><span class=\"string\">&quot;</span>], unit=<span class=\"string\">&quot;</span><span class=\"string\">s</span><span class=\"string\">&quot;</span>)\n    <span class=\"keyword\">for</span> func, period in [(<span class=\"string\">&quot;</span><span class=\"string\">hour</span><span class=\"string\">&quot;</span>, <span class=\"number\">24</span>), (<span class=\"string\">&quot;</span><span class=\"string\">dayofweek</span><span class=\"string\">&quot;</span>, <span class=\"number\">7</span>)]:\n        df[<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">{</span>func<span class=\"string\">}</span><span class=\"string\">_sin</span><span class=\"string\">&quot;</span>] = np.sin(\n            <span class=\"number\">2</span> * np.pi * getattr(df[<span class=\"string\">&quot;</span><span class=\"string\">timestamp</span><span class=\"string\">&quot;</span>].dt, func) / period\n        )\n        df[<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">{</span>func<span class=\"string\">}</span><span class=\"string\">_cos</span><span class=\"string\">&quot;</span>] = np.cos(\n            <span class=\"number\">2</span> * np.pi * getattr(df[<span class=\"string\">&quot;</span><span class=\"string\">timestamp</span><span class=\"string\">&quot;</span>].dt, func) / period\n        )\n\n<span class=\"comment\"># Precompute text features</span>\nsid = SentimentIntensityAnalyzer()\n\n\n<span class=\"keyword\">def</span> <span class=\"function\">extract_text_features</span>(text):\n    features = {}\n    sentiment = sid.polarity_scores(text)\n    features.update({<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">sent_</span><span class=\"string\">{</span>k<span class=\"string\">}</span><span class=\"string\">&quot;</span>: v <span class=\"keyword\">for</span> k, v in sentiment.items()})\n    features[<span class=\"string\">&quot;</span><span class=\"string\">fk_grade</span><span class=\"string\">&quot;</span>] = flesch_kincaid_grade(text) <span class=\"keyword\">if</span> text <span class=\"keyword\">else</span> <span class=\"number\">0</span>\n    <span class=\"keyword\">for</span> feat, func in [\n        (<span class=\"string\">&quot;</span><span class=\"string\">words</span><span class=\"string\">&quot;</span>, len),\n        (<span class=\"string\">&quot;</span><span class=\"string\">chars</span><span class=\"string\">&quot;</span>, len),\n        (<span class=\"string\">&quot;</span><span class=\"string\">excl</span><span class=\"string\">&quot;</span>, <span class=\"keyword\">lambda</span> x: x.count(<span class=\"string\">&quot;</span><span class=\"string\">!</span><span class=\"string\">&quot;</span>)),\n        (<span class=\"string\">&quot;</span><span class=\"string\">quest</span><span class=\"string\">&quot;</span>, <span class=\"keyword\">lambda</span> x: x.count(<span class=\"string\">&quot;</span><span class=\"string\">?</span><span class=\"string\">&quot;</span>)),\n        (<span class=\"string\">&quot;</span><span class=\"string\">please</span><span class=\"string\">&quot;</span>, <span class=\"keyword\">lambda</span> x: x.lower().count(<span class=\"string\">&quot;</span><span class=\"string\">please</span><span class=\"string\">&quot;</span>)),\n        (<span class=\"string\">&quot;</span><span class=\"string\">thank</span><span class=\"string\">&quot;</span>, <span class=\"keyword\">lambda</span> x: x.lower().count(<span class=\"string\">&quot;</span><span class=\"string\">thank</span><span class=\"string\">&quot;</span>)),\n        (<span class=\"string\">&quot;</span><span class=\"string\">http</span><span class=\"string\">&quot;</span>, <span class=\"keyword\">lambda</span> x: x.lower().count(<span class=\"string\">&quot;</span><span class=\"string\">http</span><span class=\"string\">&quot;</span>)),\n    ]:\n        features[<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">num_</span><span class=\"string\">{</span>feat<span class=\"string\">}</span><span class=\"string\">&quot;</span>] = func(text.split() <span class=\"keyword\">if</span> feat == <span class=\"string\">&quot;</span><span class=\"string\">words</span><span class=\"string\">&quot;</span> <span class=\"keyword\">else</span> text)\n    <span class=\"keyword\">return</span> features\n\n\n<span class=\"keyword\">for</span> df in [train_df, test_df]:\n    df[<span class=\"string\">&quot;</span><span class=\"string\">combined_text</span><span class=\"string\">&quot;</span>] = (\n        df[<span class=\"string\">&quot;</span><span class=\"string\">request_title</span><span class=\"string\">&quot;</span>].fillna(<span class=\"string\">&quot;</span><span class=\"string\">&quot;</span>) + <span class=\"string\">&quot;</span><span class=\"string\"> </span><span class=\"string\">&quot;</span> + df[<span class=\"string\">&quot;</span><span class=\"string\">request_text_edit_aware</span><span class=\"string\">&quot;</span>].fillna(<span class=\"string\">&quot;</span><span class=\"string\">&quot;</span>)\n    )\n    text_features = pd.DataFrame(\n        df[<span class=\"string\">&quot;</span><span class=\"string\">combined_text</span><span class=\"string\">&quot;</span>].apply(extract_text_features).tolist()\n    )\n    df[text_features.columns] = text_features\n\n<span class=\"comment\"># Generate sentence embeddings</span>\nembedder = SentenceTransformer(<span class=\"string\">&quot;</span><span class=\"string\">all-mpnet-base-v2</span><span class=\"string\">&quot;</span>)\ntrain_embeddings = embedder.encode(train_df[<span class=\"string\">&quot;</span><span class=\"string\">combined_text</span><span class=\"string\">&quot;</span>], show_progress_bar=<span class=\"keyword\">False</span>)\ntest_embeddings = embedder.encode(test_df[<span class=\"string\">&quot;</span><span class=\"string\">combined_text</span><span class=\"string\">&quot;</span>], show_progress_bar=<span class=\"keyword\">False</span>)\n\n<span class=\"comment\"># Define numerical features</span>\nnumerical_features = [\n    <span class=\"string\">&quot;</span><span class=\"string\">requester_account_age_in_days_at_request</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">requester_number_of_comments_at_request</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">hour_sin</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">hour_cos</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">dayofweek_sin</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">dayofweek_cos</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">sent_pos</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">sent_neg</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">sent_neu</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">sent_compound</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">fk_grade</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">num_words</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">num_chars</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">num_excl</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">num_quest</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">num_please</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">num_thank</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">num_http</span><span class=\"string\">&quot;</span>,\n]\n\n<span class=\"comment\"># Precompute static features</span>\nX_train_static = hstack(\n    [\n        csr_matrix(train_df[numerical_features].fillna(<span class=\"number\">0</span>).values),\n        csr_matrix(train_embeddings),\n    ]\n)\nX_test_static = hstack(\n    [\n        csr_matrix(test_df[numerical_features].fillna(<span class=\"number\">0</span>).values),\n        csr_matrix(test_embeddings),\n    ]\n)\ny_train = train_df[<span class=\"string\">&quot;</span><span class=\"string\">requester_received_pizza</span><span class=\"string\">&quot;</span>].astype(int)\n\n\n<span class=\"comment\"># Optuna optimization with proper feature engineering</span>\n<span class=\"keyword\">def</span> <span class=\"function\">objective</span>(trial):\n    params = {\n        <span class=\"string\">&quot;</span><span class=\"string\">objective</span><span class=\"string\">&quot;</span>: <span class=\"string\">&quot;</span><span class=\"string\">binary</span><span class=\"string\">&quot;</span>,\n        <span class=\"string\">&quot;</span><span class=\"string\">metric</span><span class=\"string\">&quot;</span>: <span class=\"string\">&quot;</span><span class=\"string\">auc</span><span class=\"string\">&quot;</span>,\n        <span class=\"string\">&quot;</span><span class=\"string\">learning_rate</span><span class=\"string\">&quot;</span>: trial.suggest_float(<span class=\"string\">&quot;</span><span class=\"string\">learning_rate</span><span class=\"string\">&quot;</span>, <span class=\"number\">0.01</span>, <span class=\"number\">0.3</span>),\n        <span class=\"string\">&quot;</span><span class=\"string\">num_leaves</span><span class=\"string\">&quot;</span>: trial.suggest_int(<span class=\"string\">&quot;</span><span class=\"string\">num_leaves</span><span class=\"string\">&quot;</span>, <span class=\"number\">20</span>, <span class=\"number\">2000</span>),\n        <span class=\"string\">&quot;</span><span class=\"string\">max_depth</span><span class=\"string\">&quot;</span>: trial.suggest_int(<span class=\"string\">&quot;</span><span class=\"string\">max_depth</span><span class=\"string\">&quot;</span>, <span class=\"number\">3</span>, <span class=\"number\">15</span>),\n        <span class=\"string\">&quot;</span><span class=\"string\">feature_fraction</span><span class=\"string\">&quot;</span>: trial.suggest_float(<span class=\"string\">&quot;</span><span class=\"string\">feature_fraction</span><span class=\"string\">&quot;</span>, <span class=\"number\">0.5</span>, <span class=\"number\">1.0</span>),\n        <span class=\"string\">&quot;</span><span class=\"string\">bagging_fraction</span><span class=\"string\">&quot;</span>: trial.suggest_float(<span class=\"string\">&quot;</span><span class=\"string\">bagging_fraction</span><span class=\"string\">&quot;</span>, <span class=\"number\">0.5</span>, <span class=\"number\">1.0</span>),\n        <span class=\"string\">&quot;</span><span class=\"string\">bagging_freq</span><span class=\"string\">&quot;</span>: trial.suggest_int(<span class=\"string\">&quot;</span><span class=\"string\">bagging_freq</span><span class=\"string\">&quot;</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>),\n        <span class=\"string\">&quot;</span><span class=\"string\">min_child_samples</span><span class=\"string\">&quot;</span>: trial.suggest_int(<span class=\"string\">&quot;</span><span class=\"string\">min_child_samples</span><span class=\"string\">&quot;</span>, <span class=\"number\">5</span>, <span class=\"number\">200</span>),\n        <span class=\"string\">&quot;</span><span class=\"string\">lambda_l1</span><span class=\"string\">&quot;</span>: trial.suggest_float(<span class=\"string\">&quot;</span><span class=\"string\">lambda_l1</span><span class=\"string\">&quot;</span>, <span class=\"number\">0</span>, <span class=\"number\">10</span>),\n        <span class=\"string\">&quot;</span><span class=\"string\">lambda_l2</span><span class=\"string\">&quot;</span>: trial.suggest_float(<span class=\"string\">&quot;</span><span class=\"string\">lambda_l2</span><span class=\"string\">&quot;</span>, <span class=\"number\">0</span>, <span class=\"number\">10</span>),\n        <span class=\"string\">&quot;</span><span class=\"string\">scale_pos_weight</span><span class=\"string\">&quot;</span>: trial.suggest_float(<span class=\"string\">&quot;</span><span class=\"string\">scale_pos_weight</span><span class=\"string\">&quot;</span>, <span class=\"number\">0.5</span>, <span class=\"number\">10</span>),\n        <span class=\"string\">&quot;</span><span class=\"string\">random_state</span><span class=\"string\">&quot;</span>: <span class=\"number\">42</span>,\n        <span class=\"string\">&quot;</span><span class=\"string\">verbosity</span><span class=\"string\">&quot;</span>: -<span class=\"number\">1</span>,\n    }\n\n    kf = KFold(n_splits=<span class=\"number\">3</span>, shuffle=<span class=\"keyword\">True</span>, random_state=<span class=\"number\">42</span>)\n    auc_scores = []\n    iterations = []\n\n    <span class=\"keyword\">for</span> train_idx, val_idx in kf.split(train_df):\n        <span class=\"comment\"># Feature engineering per fold</span>\n        train_sub = train_df.iloc[train_idx]\n        val_sub = train_df.iloc[val_idx]\n\n        <span class=\"comment\"># Subreddit features</span>\n        global_mean = train_sub[<span class=\"string\">&quot;</span><span class=\"string\">requester_received_pizza</span><span class=\"string\">&quot;</span>].mean()\n        subreddit_mean = {}\n        <span class=\"keyword\">for</span> subs in train_sub[<span class=\"string\">&quot;</span><span class=\"string\">requester_subreddits_at_request</span><span class=\"string\">&quot;</span>]:\n            <span class=\"keyword\">for</span> s in subs:\n                <span class=\"keyword\">if</span> s not in subreddit_mean:\n                    mask = train_sub[<span class=\"string\">&quot;</span><span class=\"string\">requester_subreddits_at_request</span><span class=\"string\">&quot;</span>].apply(\n                        <span class=\"keyword\">lambda</span> x: s in x\n                    )\n                    subreddit_mean[s] = train_sub.loc[\n                        mask, <span class=\"string\">&quot;</span><span class=\"string\">requester_received_pizza</span><span class=\"string\">&quot;</span>\n                    ].mean()\n\n        <span class=\"keyword\">def</span> <span class=\"function\">get_sub_features</span>(subs):\n            <span class=\"keyword\">if</span> not subs:\n                <span class=\"keyword\">return</span> {\n                    <span class=\"string\">&quot;</span><span class=\"string\">sm</span><span class=\"string\">&quot;</span>: global_mean,\n                    <span class=\"string\">&quot;</span><span class=\"string\">smax</span><span class=\"string\">&quot;</span>: global_mean,\n                    <span class=\"string\">&quot;</span><span class=\"string\">smin</span><span class=\"string\">&quot;</span>: global_mean,\n                    <span class=\"string\">&quot;</span><span class=\"string\">scnt</span><span class=\"string\">&quot;</span>: <span class=\"number\">0</span>,\n                    <span class=\"string\">&quot;</span><span class=\"string\">sabv</span><span class=\"string\">&quot;</span>: <span class=\"number\">0</span>,\n                }\n            quals = [subreddit_mean.get(s, global_mean) <span class=\"keyword\">for</span> s in subs]\n            <span class=\"keyword\">return</span> {\n                <span class=\"string\">&quot;</span><span class=\"string\">sm</span><span class=\"string\">&quot;</span>: np.mean(quals),\n                <span class=\"string\">&quot;</span><span class=\"string\">smax</span><span class=\"string\">&quot;</span>: np.max(quals),\n                <span class=\"string\">&quot;</span><span class=\"string\">smin</span><span class=\"string\">&quot;</span>: np.min(quals),\n                <span class=\"string\">&quot;</span><span class=\"string\">scnt</span><span class=\"string\">&quot;</span>: len(quals),\n                <span class=\"string\">&quot;</span><span class=\"string\">sabv</span><span class=\"string\">&quot;</span>: sum(q &gt; global_mean <span class=\"keyword\">for</span> q in quals),\n            }\n\n        train_subs = pd.DataFrame(\n            train_sub[<span class=\"string\">&quot;</span><span class=\"string\">requester_subreddits_at_request</span><span class=\"string\">&quot;</span>]\n            .apply(get_sub_features)\n            .tolist()\n        )\n        val_subs = pd.DataFrame(\n            val_sub[<span class=\"string\">&quot;</span><span class=\"string\">requester_subreddits_at_request</span><span class=\"string\">&quot;</span>].apply(get_sub_features).tolist()\n        )\n\n        <span class=\"comment\"># TF-IDF features</span>\n        title_vec = TfidfVectorizer(max_features=<span class=\"number\">3000</span>, ngram_range=(<span class=\"number\">1</span>, <span class=\"number\">2</span>))\n        text_vec = TfidfVectorizer(max_features=<span class=\"number\">7000</span>, ngram_range=(<span class=\"number\">1</span>, <span class=\"number\">3</span>))\n\n        X_train_tfidf = hstack(\n            [\n                title_vec.fit_transform(train_sub[<span class=\"string\">&quot;</span><span class=\"string\">request_title</span><span class=\"string\">&quot;</span>]),\n                text_vec.fit_transform(train_sub[<span class=\"string\">&quot;</span><span class=\"string\">request_text_edit_aware</span><span class=\"string\">&quot;</span>]),\n            ]\n        )\n        X_val_tfidf = hstack(\n            [\n                title_vec.transform(val_sub[<span class=\"string\">&quot;</span><span class=\"string\">request_title</span><span class=\"string\">&quot;</span>]),\n                text_vec.transform(val_sub[<span class=\"string\">&quot;</span><span class=\"string\">request_text_edit_aware</span><span class=\"string\">&quot;</span>]),\n            ]\n        )\n\n        <span class=\"comment\"># Combine all features</span>\n        X_train_fold = hstack(\n            [X_train_tfidf, csr_matrix(train_subs.fillna(<span class=\"number\">0</span>)), X_train_static[train_idx]]\n        )\n        X_val_fold = hstack(\n            [X_val_tfidf, csr_matrix(val_subs.fillna(<span class=\"number\">0</span>)), X_train_static[val_idx]]\n        )\n\n        <span class=\"comment\"># Train model</span>\n        model = lgb.train(\n            params,\n            lgb.Dataset(X_train_fold, y_train.iloc[train_idx]),\n            valid_sets=[lgb.Dataset(X_val_fold, y_train.iloc[val_idx])],\n            callbacks=[lgb.early_stopping(<span class=\"number\">50</span>, <span class=\"keyword\">False</span>), lgb.log_evaluation(<span class=\"keyword\">False</span>)],\n        )\n        val_pred = model.predict(X_val_fold)\n        auc_scores.append(roc_auc_score(y_train.iloc[val_idx], val_pred))\n        iterations.append(model.best_iteration)\n\n    trial.set_user_attr(<span class=\"string\">&quot;</span><span class=\"string\">avg_iter</span><span class=\"string\">&quot;</span>, np.mean(iterations))\n    <span class=\"keyword\">return</span> np.mean(auc_scores)\n\n\nstudy = optuna.create_study(direction=<span class=\"string\">&quot;</span><span class=\"string\">maximize</span><span class=\"string\">&quot;</span>)\nstudy.optimize(objective, n_trials=<span class=\"number\">30</span>)\n\n<span class=\"comment\"># Final training with full data</span>\nbest_params = study.best_params | {\n    <span class=\"string\">&quot;</span><span class=\"string\">objective</span><span class=\"string\">&quot;</span>: <span class=\"string\">&quot;</span><span class=\"string\">binary</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">metric</span><span class=\"string\">&quot;</span>: <span class=\"string\">&quot;</span><span class=\"string\">auc</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">random_state</span><span class=\"string\">&quot;</span>: <span class=\"number\">42</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">verbosity</span><span class=\"string\">&quot;</span>: -<span class=\"number\">1</span>,\n}\n\n<span class=\"comment\"># Compute final features</span>\nglobal_mean = train_df[<span class=\"string\">&quot;</span><span class=\"string\">requester_received_pizza</span><span class=\"string\">&quot;</span>].mean()\nsubreddit_mean = {}\n<span class=\"keyword\">for</span> subs in train_df[<span class=\"string\">&quot;</span><span class=\"string\">requester_subreddits_at_request</span><span class=\"string\">&quot;</span>]:\n    <span class=\"keyword\">for</span> s in subs:\n        <span class=\"keyword\">if</span> s not in subreddit_mean:\n            mask = train_df[<span class=\"string\">&quot;</span><span class=\"string\">requester_subreddits_at_request</span><span class=\"string\">&quot;</span>].apply(<span class=\"keyword\">lambda</span> x: s in x)\n            subreddit_mean[s] = train_df.loc[mask, <span class=\"string\">&quot;</span><span class=\"string\">requester_received_pizza</span><span class=\"string\">&quot;</span>].mean()\n\n\n<span class=\"keyword\">def</span> <span class=\"function\">get_sub_final</span>(subs):\n    <span class=\"keyword\">if</span> not subs:\n        <span class=\"keyword\">return</span> {\n            <span class=\"string\">&quot;</span><span class=\"string\">sm</span><span class=\"string\">&quot;</span>: global_mean,\n            <span class=\"string\">&quot;</span><span class=\"string\">smax</span><span class=\"string\">&quot;</span>: global_mean,\n            <span class=\"string\">&quot;</span><span class=\"string\">smin</span><span class=\"string\">&quot;</span>: global_mean,\n            <span class=\"string\">&quot;</span><span class=\"string\">scnt</span><span class=\"string\">&quot;</span>: <span class=\"number\">0</span>,\n            <span class=\"string\">&quot;</span><span class=\"string\">sabv</span><span class=\"string\">&quot;</span>: <span class=\"number\">0</span>,\n        }\n    quals = [subreddit_mean.get(s, global_mean) <span class=\"keyword\">for</span> s in subs]\n    <span class=\"keyword\">return</span> {\n        <span class=\"string\">&quot;</span><span class=\"string\">sm</span><span class=\"string\">&quot;</span>: np.mean(quals),\n        <span class=\"string\">&quot;</span><span class=\"string\">smax</span><span class=\"string\">&quot;</span>: np.max(quals),\n        <span class=\"string\">&quot;</span><span class=\"string\">smin</span><span class=\"string\">&quot;</span>: np.min(quals),\n        <span class=\"string\">&quot;</span><span class=\"string\">scnt</span><span class=\"string\">&quot;</span>: len(quals),\n        <span class=\"string\">&quot;</span><span class=\"string\">sabv</span><span class=\"string\">&quot;</span>: sum(q &gt; global_mean <span class=\"keyword\">for</span> q in quals),\n    }\n\n\ntrain_subs = pd.DataFrame(\n    train_df[<span class=\"string\">&quot;</span><span class=\"string\">requester_subreddits_at_request</span><span class=\"string\">&quot;</span>].apply(get_sub_final).tolist()\n)\ntest_subs = pd.DataFrame(\n    test_df[<span class=\"string\">&quot;</span><span class=\"string\">requester_subreddits_at_request</span><span class=\"string\">&quot;</span>].apply(get_sub_final).tolist()\n)\n\ntitle_vec = TfidfVectorizer(max_features=<span class=\"number\">3000</span>, ngram_range=(<span class=\"number\">1</span>, <span class=\"number\">2</span>))\ntext_vec = TfidfVectorizer(max_features=<span class=\"number\">7000</span>, ngram_range=(<span class=\"number\">1</span>, <span class=\"number\">3</span>))\n\nX_train_tfidf = hstack(\n    [\n        title_vec.fit_transform(train_df[<span class=\"string\">&quot;</span><span class=\"string\">request_title</span><span class=\"string\">&quot;</span>]),\n        text_vec.fit_transform(train_df[<span class=\"string\">&quot;</span><span class=\"string\">request_text_edit_aware</span><span class=\"string\">&quot;</span>]),\n    ]\n)\nX_test_tfidf = hstack(\n    [\n        title_vec.transform(test_df[<span class=\"string\">&quot;</span><span class=\"string\">request_title</span><span class=\"string\">&quot;</span>]),\n        text_vec.transform(test_df[<span class=\"string\">&quot;</span><span class=\"string\">request_text_edit_aware</span><span class=\"string\">&quot;</span>]),\n    ]\n)\n\nX_train_final = hstack([X_train_tfidf, csr_matrix(train_subs), X_train_static])\nX_test_final = hstack([X_test_tfidf, csr_matrix(test_subs), X_test_static])\n\nfinal_model = lgb.train(\n    best_params,\n    lgb.Dataset(X_train_final, y_train),\n    num_boost_round=int(study.best_trial.user_attrs[<span class=\"string\">&quot;</span><span class=\"string\">avg_iter</span><span class=\"string\">&quot;</span>]),\n)\n\n<span class=\"comment\"># Generate submission</span>\ntest_pred = final_model.predict(X_test_final)\npd.DataFrame(\n    {<span class=\"string\">&quot;</span><span class=\"string\">request_id</span><span class=\"string\">&quot;</span>: test_df[<span class=\"string\">&quot;</span><span class=\"string\">request_id</span><span class=\"string\">&quot;</span>], <span class=\"string\">&quot;</span><span class=\"string\">requester_received_pizza</span><span class=\"string\">&quot;</span>: test_pred}\n).to_csv(<span class=\"string\">&quot;</span><span class=\"string\">submission/submission.csv</span><span class=\"string\">&quot;</span>, index=<span class=\"keyword\">False</span>)\n\n<span class=\"comment\"># Validation score</span>\nval_pred = final_model.predict(X_train_final)\nval_auc = roc_auc_score(y_train, val_pred)\nprint(<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">Final Training AUC: </span><span class=\"string\">{</span>val_auc<span class=\"string\">:</span><span class=\"string\">.4f</span><span class=\"string\">}</span><span class=\"string\">&quot;</span>)\n"
}