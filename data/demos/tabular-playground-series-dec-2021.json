{
    "title": "tabular-playground-series-dec-2021",
    "steps": [
        {
            "text": "<span class='prompt'>ml-master@ai4ai:~$</span> python ml_master.py --task tabular-playground-series-dec-2021 --time-limit 12h",
            "delay": 200
        },
        {
            "text": "<span class='info'>[INFO]</span>: Starting run \"tabular-playground-series-dec-2021\"",
            "delay": 200
        },
        {
            "text": "<span class='prompt'>ml-master@ai4ai:~$</span> ",
            "delay": 200
        }
    ],
    "code": "<span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd\n<span class=\"keyword\">import</span> lightgbm <span class=\"keyword\">as</span> lgb\n<span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> train_test_split\n<span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> accuracy_score\n<span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n\n<span class=\"comment\"># Load data with optimized memory usage</span>\ndtypes = {<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">Soil_Type</span><span class=\"string\">{</span>i<span class=\"string\">}</span><span class=\"string\">&quot;</span>: <span class=\"string\">&quot;</span><span class=\"string\">int8</span><span class=\"string\">&quot;</span> <span class=\"keyword\">for</span> i in range(<span class=\"number\">1</span>, <span class=\"number\">41</span>)}\ndtypes.update({<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">Wilderness_Area</span><span class=\"string\">{</span>i<span class=\"string\">}</span><span class=\"string\">&quot;</span>: <span class=\"string\">&quot;</span><span class=\"string\">int8</span><span class=\"string\">&quot;</span> <span class=\"keyword\">for</span> i in range(<span class=\"number\">1</span>, <span class=\"number\">5</span>)})\ndtypes[<span class=\"string\">&quot;</span><span class=\"string\">Cover_Type</span><span class=\"string\">&quot;</span>] = <span class=\"string\">&quot;</span><span class=\"string\">int8</span><span class=\"string\">&quot;</span>\n\ntrain = pd.read_csv(<span class=\"string\">&quot;</span><span class=\"string\">input/train.csv</span><span class=\"string\">&quot;</span>, dtype=dtypes)\ntest = pd.read_csv(<span class=\"string\">&quot;</span><span class=\"string\">input/test.csv</span><span class=\"string\">&quot;</span>, dtype=dtypes)\n\n<span class=\"comment\"># Prepare features and target</span>\nX = train.drop([<span class=\"string\">&quot;</span><span class=\"string\">Id</span><span class=\"string\">&quot;</span>, <span class=\"string\">&quot;</span><span class=\"string\">Cover_Type</span><span class=\"string\">&quot;</span>], axis=<span class=\"number\">1</span>)\ny = train[<span class=\"string\">&quot;</span><span class=\"string\">Cover_Type</span><span class=\"string\">&quot;</span>] - <span class=\"number\">1</span>  <span class=\"comment\"># Convert to 0-based index</span>\n\n<span class=\"comment\"># Check class distribution</span>\nprint(<span class=\"string\">&quot;</span><span class=\"string\">Class distribution:</span><span class=\"string\">&quot;</span>)\nprint(y.value_counts().sort_index())\n\n<span class=\"comment\"># Regular train-validation split</span>\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=<span class=\"number\">0.2</span>, random_state=<span class=\"number\">42</span>)\n\n<span class=\"comment\"># Configure LightGBM parameters</span>\nparams = {\n    <span class=\"string\">&quot;</span><span class=\"string\">objective</span><span class=\"string\">&quot;</span>: <span class=\"string\">&quot;</span><span class=\"string\">multiclass</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">num_class</span><span class=\"string\">&quot;</span>: <span class=\"number\">7</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">metric</span><span class=\"string\">&quot;</span>: <span class=\"string\">&quot;</span><span class=\"string\">multi_logloss</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">boosting_type</span><span class=\"string\">&quot;</span>: <span class=\"string\">&quot;</span><span class=\"string\">gbdt</span><span class=\"string\">&quot;</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">num_leaves</span><span class=\"string\">&quot;</span>: <span class=\"number\">63</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">learning_rate</span><span class=\"string\">&quot;</span>: <span class=\"number\">0.05</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">feature_fraction</span><span class=\"string\">&quot;</span>: <span class=\"number\">0.8</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">bagging_fraction</span><span class=\"string\">&quot;</span>: <span class=\"number\">0.8</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">bagging_freq</span><span class=\"string\">&quot;</span>: <span class=\"number\">5</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">min_child_samples</span><span class=\"string\">&quot;</span>: <span class=\"number\">20</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">reg_alpha</span><span class=\"string\">&quot;</span>: <span class=\"number\">0.1</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">reg_lambda</span><span class=\"string\">&quot;</span>: <span class=\"number\">0.1</span>,\n    <span class=\"string\">&quot;</span><span class=\"string\">verbosity</span><span class=\"string\">&quot;</span>: -<span class=\"number\">1</span>,\n}\n\n<span class=\"comment\"># Create datasets</span>\ntrain_data = lgb.Dataset(X_train, y_train)\nval_data = lgb.Dataset(X_val, y_val, reference=train_data)\n\n<span class=\"comment\"># Train model with early stopping</span>\nmodel = lgb.train(\n    params,\n    train_data,\n    valid_sets=[val_data],\n    num_boost_round=<span class=\"number\">2000</span>,\n    callbacks=[lgb.early_stopping(<span class=\"number\">100</span>)],\n)\n\n<span class=\"comment\"># Calculate validation accuracy</span>\nval_pred = model.predict(X_val, num_iteration=model.best_iteration).argmax(axis=<span class=\"number\">1</span>)\naccuracy = accuracy_score(y_val, val_pred)\nprint(<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">Validation Accuracy: </span><span class=\"string\">{</span>accuracy<span class=\"string\">:</span><span class=\"string\">.4f</span><span class=\"string\">}</span><span class=\"string\">&quot;</span>)\n\n<span class=\"comment\"># Generate test predictions</span>\ntest_pred = (\n    model.predict(test.drop(<span class=\"string\">&quot;</span><span class=\"string\">Id</span><span class=\"string\">&quot;</span>, axis=<span class=\"number\">1</span>), num_iteration=model.best_iteration).argmax(\n        axis=<span class=\"number\">1</span>\n    )\n    + <span class=\"number\">1</span>  <span class=\"comment\"># Convert back to 1-based</span>\n)\n\n<span class=\"comment\"># Create submission file</span>\nsubmission = pd.DataFrame({<span class=\"string\">&quot;</span><span class=\"string\">Id</span><span class=\"string\">&quot;</span>: test[<span class=\"string\">&quot;</span><span class=\"string\">Id</span><span class=\"string\">&quot;</span>], <span class=\"string\">&quot;</span><span class=\"string\">Cover_Type</span><span class=\"string\">&quot;</span>: test_pred})\nsubmission.to_csv(<span class=\"string\">&quot;</span><span class=\"string\">submission/submission.csv</span><span class=\"string\">&quot;</span>, index=<span class=\"keyword\">False</span>)\n"
}