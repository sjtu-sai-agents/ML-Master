{
    "title": "cassava-leaf-disease-classification",
    "steps": [
        {
            "text": "<span class='prompt'>ml-master@ai4ai:~$</span> python ml_master.py --task cassava-leaf-disease-classification --time-limit 12h",
            "delay": 200
        },
        {
            "text": "<span class='info'>[INFO]</span>: Starting run \"cassava-leaf-disease-classification\"",
            "delay": 200
        },
        {
            "text": "<span class='prompt'>ml-master@ai4ai:~$</span> ",
            "delay": 200
        }
    ],
    "code": "<span class=\"keyword\">import</span> os\n<span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd\n<span class=\"keyword\">import</span> torch\n<span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> Dataset, DataLoader\n<span class=\"keyword\">from</span> torchvision <span class=\"keyword\">import</span> transforms, models\n<span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image\n<span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> train_test_split\n<span class=\"keyword\">from</span> torch.cuda.amp <span class=\"keyword\">import</span> autocast, GradScaler\n<span class=\"keyword\">import</span> torch.nn.functional <span class=\"keyword\">as</span> F\n\n\n<span class=\"keyword\">class</span> <span class=\"class\">CassavaDataset</span>(Dataset):\n    <span class=\"keyword\">def</span> <span class=\"function\">__init__</span>(self, df, img_dir, transform=<span class=\"keyword\">None</span>, is_test=<span class=\"keyword\">False</span>):\n        self.df = df\n        self.img_dir = img_dir\n        self.transform = transform\n        self.is_test = is_test\n\n    <span class=\"keyword\">def</span> <span class=\"function\">__len__</span>(self):\n        <span class=\"keyword\">return</span> len(self.df)\n\n    <span class=\"keyword\">def</span> <span class=\"function\">__getitem__</span>(self, idx):\n        img_id = self.df.iloc[idx][<span class=\"string\">&quot;</span><span class=\"string\">image_id</span><span class=\"string\">&quot;</span>]\n        img_path = os.path.join(self.img_dir, img_id)\n        image = Image.open(img_path).convert(<span class=\"string\">&quot;</span><span class=\"string\">RGB</span><span class=\"string\">&quot;</span>)\n        transformed = self.transform(image)\n        <span class=\"keyword\">return</span> (\n            transformed <span class=\"keyword\">if</span> self.is_test <span class=\"keyword\">else</span> (transformed, self.df.iloc[idx][<span class=\"string\">&quot;</span><span class=\"string\">label</span><span class=\"string\">&quot;</span>])\n        )\n\n\n<span class=\"comment\"># Hyperparameters</span>\nIMG_SIZE = <span class=\"number\">384</span>\nBATCH_SIZE = <span class=\"number\">16</span>\nNUM_EPOCHS = <span class=\"number\">12</span>\n\n<span class=\"comment\"># Data preparation</span>\ntrain_df = pd.read_csv(<span class=\"string\">&quot;</span><span class=\"string\">input/train.csv</span><span class=\"string\">&quot;</span>)\ntrain_df, val_df = train_test_split(\n    train_df, test_size=<span class=\"number\">0.1</span>, stratify=train_df[<span class=\"string\">&quot;</span><span class=\"string\">label</span><span class=\"string\">&quot;</span>], random_state=<span class=\"number\">42</span>\n)\n\n<span class=\"comment\"># Data transforms</span>\ntrain_transform = transforms.Compose(\n    [\n        transforms.RandomResizedCrop(IMG_SIZE, scale=(<span class=\"number\">0.6</span>, <span class=\"number\">1.0</span>)),\n        transforms.RandAugment(num_ops=<span class=\"number\">3</span>, magnitude=<span class=\"number\">12</span>),\n        transforms.RandomHorizontalFlip(),\n        transforms.RandomVerticalFlip(),\n        transforms.ToTensor(),\n        transforms.Normalize([<span class=\"number\">0.485</span>, <span class=\"number\">0.456</span>, <span class=\"number\">0.406</span>], [<span class=\"number\">0.229</span>, <span class=\"number\">0.224</span>, <span class=\"number\">0.225</span>]),\n    ]\n)\n\nval_transform = transforms.Compose(\n    [\n        transforms.Resize(IMG_SIZE + <span class=\"number\">64</span>),\n        transforms.CenterCrop(IMG_SIZE),\n        transforms.ToTensor(),\n        transforms.Normalize([<span class=\"number\">0.485</span>, <span class=\"number\">0.456</span>, <span class=\"number\">0.406</span>], [<span class=\"number\">0.229</span>, <span class=\"number\">0.224</span>, <span class=\"number\">0.225</span>]),\n    ]\n)\n\n<span class=\"comment\"># Dataset and loaders</span>\ntrain_dataset = CassavaDataset(train_df, <span class=\"string\">&quot;</span><span class=\"string\">input/train_images</span><span class=\"string\">&quot;</span>, train_transform)\nval_dataset = CassavaDataset(val_df, <span class=\"string\">&quot;</span><span class=\"string\">input/train_images</span><span class=\"string\">&quot;</span>, val_transform)\ntrain_loader = DataLoader(\n    train_dataset, batch_size=BATCH_SIZE, shuffle=<span class=\"keyword\">True</span>, num_workers=<span class=\"number\">8</span>, pin_memory=<span class=\"keyword\">True</span>\n)\nval_loader = DataLoader(\n    val_dataset,\n    batch_size=BATCH_SIZE * <span class=\"number\">2</span>,\n    shuffle=<span class=\"keyword\">False</span>,\n    num_workers=<span class=\"number\">8</span>,\n    pin_memory=<span class=\"keyword\">True</span>,\n)\n\n<span class=\"comment\"># Model setup</span>\ndevice = torch.device(<span class=\"string\">&quot;</span><span class=\"string\">cuda</span><span class=\"string\">&quot;</span> <span class=\"keyword\">if</span> torch.cuda.is_available() <span class=\"keyword\">else</span> <span class=\"string\">&quot;</span><span class=\"string\">cpu</span><span class=\"string\">&quot;</span>)\nmodel = models.convnext_large(weights=models.ConvNeXt_Large_Weights.IMAGENET1K_V1)\nmodel.classifier[<span class=\"number\">2</span>] = torch.nn.Linear(model.classifier[<span class=\"number\">2</span>].in_features, <span class=\"number\">5</span>)\nmodel = model.to(device)\n\n<span class=\"comment\"># Training config</span>\noptimizer = torch.optim.AdamW(model.parameters(), lr=<span class=\"number\">5e-5</span>, weight_decay=<span class=\"number\">0.05</span>)\nscheduler = torch.optim.lr_scheduler.CosineAnnealingLR(\n    optimizer, T_max=NUM_EPOCHS, eta_min=<span class=\"number\">1e-6</span>\n)\nwarmup_scheduler = torch.optim.lr_scheduler.LinearLR(\n    optimizer, start_factor=<span class=\"number\">0.01</span>, total_iters=<span class=\"number\">3</span>\n)\ncombined_scheduler = torch.optim.lr_scheduler.SequentialLR(\n    optimizer, [warmup_scheduler, scheduler], milestones=[<span class=\"number\">3</span>]\n)\nscaler = GradScaler()\ncriterion = F.cross_entropy\n\n<span class=\"comment\"># Training loop</span>\nbest_val_acc = <span class=\"number\">0.0</span>\n<span class=\"keyword\">for</span> epoch in range(NUM_EPOCHS):\n    model.train()\n    <span class=\"keyword\">for</span> images, labels in train_loader:\n        images, labels = images.to(device), labels.to(device)\n        optimizer.zero_grad()\n\n        <span class=\"keyword\">with</span> autocast():\n            outputs = model(images)\n            loss = criterion(outputs, labels)\n\n        scaler.scale(loss).backward()\n        scaler.step(optimizer)\n        scaler.update()\n\n    combined_scheduler.step()\n\n    <span class=\"comment\"># Validation</span>\n    model.eval()\n    correct = <span class=\"number\">0</span>\n    total = <span class=\"number\">0</span>\n    <span class=\"keyword\">with</span> torch.no_grad():\n        <span class=\"keyword\">for</span> images, labels in val_loader:\n            images, labels = images.to(device), labels.to(device)\n            outputs = model(images)\n            _, predicted = torch.max(outputs, <span class=\"number\">1</span>)\n            total += labels.size(<span class=\"number\">0</span>)\n            correct += (predicted == labels).sum().item()\n\n    val_acc = correct / total\n    print(\n        <span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">Epoch </span><span class=\"string\">{</span>epoch+<span class=\"number\">1</span><span class=\"string\">}</span><span class=\"string\"> Val Acc: </span><span class=\"string\">{</span>val_acc<span class=\"string\">:</span><span class=\"string\">.4f</span><span class=\"string\">}</span><span class=\"string\"> | LR: </span><span class=\"string\">{</span>optimizer.param_groups[<span class=\"number\">0</span>][<span class=\"string\">&#x27;</span><span class=\"string\">lr</span><span class=\"string\">&#x27;</span>]<span class=\"string\">:</span><span class=\"string\">.2e</span><span class=\"string\">}</span><span class=\"string\">&quot;</span>\n    )\n\n    <span class=\"keyword\">if</span> val_acc &gt; best_val_acc:\n        best_val_acc = val_acc\n        torch.save(model.state_dict(), <span class=\"string\">&quot;</span><span class=\"string\">best_model.pth</span><span class=\"string\">&quot;</span>)\n\nprint(<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">Best Validation Accuracy: </span><span class=\"string\">{</span>best_val_acc<span class=\"string\">:</span><span class=\"string\">.4f</span><span class=\"string\">}</span><span class=\"string\">&quot;</span>)\n\n<span class=\"comment\"># Inference</span>\nmodel.load_state_dict(torch.load(<span class=\"string\">&quot;</span><span class=\"string\">best_model.pth</span><span class=\"string\">&quot;</span>))\nmodel.eval()\n\ntest_image_ids = [f <span class=\"keyword\">for</span> f in os.listdir(<span class=\"string\">&quot;</span><span class=\"string\">input/test_images</span><span class=\"string\">&quot;</span>) <span class=\"keyword\">if</span> f.endswith(<span class=\"string\">&quot;</span><span class=\"string\">.jpg</span><span class=\"string\">&quot;</span>)]\ntest_df = pd.DataFrame({<span class=\"string\">&quot;</span><span class=\"string\">image_id</span><span class=\"string\">&quot;</span>: test_image_ids})\ntest_transform = transforms.Compose(\n    [\n        transforms.Resize(IMG_SIZE + <span class=\"number\">64</span>),\n        transforms.CenterCrop(IMG_SIZE),\n        transforms.ToTensor(),\n        transforms.Normalize([<span class=\"number\">0.485</span>, <span class=\"number\">0.456</span>, <span class=\"number\">0.406</span>], [<span class=\"number\">0.229</span>, <span class=\"number\">0.224</span>, <span class=\"number\">0.225</span>]),\n    ]\n)\n\ntest_dataset = CassavaDataset(\n    test_df, <span class=\"string\">&quot;</span><span class=\"string\">input/test_images</span><span class=\"string\">&quot;</span>, test_transform, is_test=<span class=\"keyword\">True</span>\n)\ntest_loader = DataLoader(\n    test_dataset, batch_size=BATCH_SIZE * <span class=\"number\">2</span>, shuffle=<span class=\"keyword\">False</span>, num_workers=<span class=\"number\">8</span>\n)\n\npredictions = []\n<span class=\"keyword\">with</span> torch.no_grad():\n    <span class=\"keyword\">for</span> batch in test_loader:\n        images = batch.to(device)\n        outputs = model(images)\n        outputs_h = model(torch.flip(images, [<span class=\"number\">3</span>]))\n        outputs_v = model(torch.flip(images, [<span class=\"number\">2</span>]))\n        avg_outputs = (outputs + outputs_h + outputs_v) / <span class=\"number\">3</span>\n        predictions.extend(torch.argmax(avg_outputs, <span class=\"number\">1</span>).cpu().numpy())\n\nos.makedirs(<span class=\"string\">&quot;</span><span class=\"string\">submission</span><span class=\"string\">&quot;</span>, exist_ok=<span class=\"keyword\">True</span>)\npd.DataFrame({<span class=\"string\">&quot;</span><span class=\"string\">image_id</span><span class=\"string\">&quot;</span>: test_image_ids, <span class=\"string\">&quot;</span><span class=\"string\">label</span><span class=\"string\">&quot;</span>: predictions}).to_csv(\n    <span class=\"string\">&quot;</span><span class=\"string\">submission/submission.csv</span><span class=\"string\">&quot;</span>, index=<span class=\"keyword\">False</span>\n)\nprint(<span class=\"string\">f</span><span class=\"string\">&quot;</span><span class=\"string\">Submission created. Final Val Accuracy: </span><span class=\"string\">{</span>best_val_acc<span class=\"string\">:</span><span class=\"string\">.4f</span><span class=\"string\">}</span><span class=\"string\">&quot;</span>)\n"
}